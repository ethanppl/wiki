"use strict";(self.webpackChunkmy_wiki=self.webpackChunkmy_wiki||[]).push([[7928],{760:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>t,metadata:()=>a,toc:()=>c});var r=i(5893),o=i(1151);const t={},s="Compiler",a={id:"computers/programming/compiler",title:"Compiler",description:"Translates code.",source:"@site/docs/computers/programming/compiler.md",sourceDirName:"computers/programming",slug:"/computers/programming/compiler",permalink:"/wiki/computers/programming/compiler",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Command Line Interface",permalink:"/wiki/computers/programming/command-line"},next:{title:"Computer Vision",permalink:"/wiki/computers/programming/computer-vision"}},l={},c=[{value:"Resources",id:"resources",level:2}];function m(e){const n={a:"a",h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"compiler",children:"Compiler"}),"\n",(0,r.jsx)(n.p,{children:"Translates code."}),"\n",(0,r.jsx)(n.h2,{id:"resources",children:"Resources"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Book:\n",(0,r.jsx)(n.a,{href:"https://www3.nd.edu/~dthain/compilerbook/compilerbook.pdf",children:"Introduction to Compilers and Language Design"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Scanning, parsing, abstract syntax tree, semantic analysis, intermediate\nrepresentation, memory organization, assembly language, code generation,\noptimization, and a sample project"}),"\n",(0,r.jsx)(n.li,{children:"A book I found and planning to read"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://www.cs.cornell.edu/courses/cs6120/2020fa/self-guided/",children:"Cornell Advanced Compilers: The self-guided online course"}),"\n(",(0,r.jsx)(n.a,{href:"https://news.ycombinator.com/item?id=35130975",children:"HN"}),")","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"PhD-level CS course on the design of compilers. Includes videos and some\nreadings."}),"\n",(0,r.jsx)(n.li,{children:"Not just optimization or parsing, but also the language implementation, the\nsemantics of programs"}),"\n",(0,r.jsx)(n.li,{children:"Intermediate representations, data flow, optimizations, parallelization,\njust-in-time compilation, garbage collection"}),"\n"]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>a,a:()=>s});var r=i(7294);const o={},t=r.createContext(o);function s(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);