"use strict";(self.webpackChunkmy_wiki=self.webpackChunkmy_wiki||[]).push([[8130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2024/12/28/mfa-totp","metadata":{"permalink":"/blog/2024/12/28/mfa-totp","source":"@site/blog/2024-12-28-mfa-totp.md","title":"How does multifactor authentication (MFA) work?","description":"What is that 6 digits number in the authenticator app? Why those numbers change","date":"2024-12-28T00:00:00.000Z","tags":[{"inline":true,"label":"Auth","permalink":"/blog/tags/auth"},{"inline":true,"label":"Computers","permalink":"/blog/tags/computers"}],"readingTime":14.91,"hasTruncateMarker":true,"authors":[{"name":"Ethan Pang","url":"https://ethanppl.com/","imageURL":"https://github.com/ethanppl.png","key":"ethan","page":null}],"frontMatter":{"title":"How does multifactor authentication (MFA) work?","tags":[{"label":"Auth","permalink":"auth"},{"label":"Computers","permalink":"computers"}],"toc_min_heading_level":2,"toc_max_heading_level":3,"authors":"ethan","image":"./assets/mfa-totp/mfa-totp-app.webp"},"unlisted":false,"nextItem":{"title":"How I use keyd to remap my keyboard in Ubuntu 22.04 with Wayland","permalink":"/blog/2024/09/08/keyd"}},"content":"What is that 6 digits number in the authenticator app? Why those numbers change\\nevery 30 seconds? How are they generated? How does the server know that this is\\nthe correct number? How does it work offline?\\n\\nAlso, why do we need to scan a QR code when setting it up? What does the QR code\\ncontains? How secure is the whole system? What are the limitations? What to\\nconsider if implementing a server to support this authentication method?\\n\\nWe will start with a some simple intuitive explanation and slowly go into the\\ntechnical details and algorithms. Hopefully you can answer all the above\\nquestions after reading this. This is not a high level explanation of why it\'s\\ngood to have MFA, or how to deploy it, there are\\n[plenty](https://www.microsoft.com/en-us/security/blog/2020/01/15/how-to-implement-multi-factor-authentication/)\\n[of](https://www.cyber.gov.au/resources-business-and-government/maintaining-devices-and-systems/system-hardening-and-administration/system-hardening/implementing-multi-factor-authentication)\\n[resources](https://www.okta.com/resources/whitepaper/8-steps-for-effectively-deploying-mfa/)\\n[explaining](https://auth0.com/blog/multifactor-authentication-mfa/) that\\nalready. This article focus on the details of the technology under the hood.\\n\\n\x3c!-- truncate --\x3e\\n\\nIf you are ready, let\'s get started. First, we need to understand what is a\\nfactor means in multifactor authentication.\\n\\n## What is a \\"factor\\"?\\n\\nA factor is like a key for a different kind of locks. Imagine a door has only 1\\nlock, then everyone who has the key to that lock can open the door. Multifactor\\nis like having multiple locks on the doors that require different keys. Even if\\nyou lost 1 key accidentally, the door is still locked.\\n\\nIn digital systems, usually the lock is the username and password. If this is\\nthe only factor, if someone can steal or guess your password, then your account\\nis compromised. If there is an extra factor, usually in a different format, like\\nauthenticator app or a separate physical security key, then your account will be\\nsecure even if your password is leaked.\\n\\nIn [a study conducted by Microsoft in 2023](https://arxiv.org/abs/2305.00945),\\nMFA reduces the risk of being compromised by 99.22%! Also, dedicated\\nauthenticator app like Microsoft Authenticator outperform SMS-based\\nauthentication.\\n\\n## Time-based one-time password (TOTP)\\n\\nThis article will focus on explaining these authenticator apps, the one you see\\n6 digits number changing every 30 seconds. It is called time-based one-time\\npassword, TOTP in short. We will know how does the TOTP algorithm generate that\\n6 digits number, why does it change every 30 seconds, how does the server know\\nthe same 6 digits number even if the authenticator app is offline.\\n\\n![A typical authenticator app](./assets/mfa-totp/mfa-totp-app.webp)\\n\\nThe formal document that defines how TOTP should work is defined in\\n[RFC 6238](https://datatracker.ietf.org/doc/html/rfc6238). TOTP is a way to\\ngenerates a user-friendly value based on the current time, called the one time\\npassword (OTP), to authenticate the user. The one time password is used once\\nonly and cannot be reused. But before we go deep into the terminologies and how\\nall these work, let\'s look at a simpler, imaginative scenario to understand the\\nidea behind TOTP. Let\'s imagine we need to secure a phone call.\\n\\n## Explain like I am five\\n\\nImagine Alice and Bob phone call each other to share updates and secrets, but\\nthey are often scared that the phone is not picked up by one of them but\\nMallory, so they both come up with a secret phrase, \\"chipmunk\\" and \\"chinchilla\\".\\nEvery time before the phone call starts, Alice and Bob need to tell their secret\\nphrase. Only if both sides are correct, they start talking. It works well until\\none time Bob realize Mallory is listening from behind and hear the secret phrase\\n\\"chinchilla\\", what can they do?\\n\\n![Phone call with secret phrase](./assets/mfa-totp/phone.webp)\\n\\nTurns out, there is a special species of magic parrot. The magic parrots are\\nalways twin. At any given time, you can ask the magic parrot to say a random\\nword. The two magic parrots will say the same word even if they are physical\\nseparated far away.\\n\\n![Phone call secured by magic parrot twins](./assets/mfa-totp/phone-with-parrot.webp)\\n\\nNow, as long as Alice and Bob keep their magic parrot secure to them, they are\\nsafe. Even if Mallory knows the secret phrase \\"chipmunk\\" or \\"chinchilla\\", she\\ncannot impersonate Alice and Bob because she doesn\'t have that specific magic\\nparrot. She cannot reuse \\"goose\\" either because this word is randomly generated\\nby the magic parrot and used once only.\\n\\nIf you understand why the magic parrot makes it more secure, then you know why\\nTOTP makes authentication systems more secure. The magic parrot is the second\\nfactor. In TOTP, \\"chipmunk\\" or \\"chinchilla\\", is your username and password. And\\n\\"goose\\" is the TOTP, the generated one-time password. The magic parrot is the\\nTOTP algorithm. It can generate a random value at any given time.\\n\\nIn the real world, there is no magic parrot twins that work like this, but we\\ncan create something digitally that works in the same way.\\n\\n## TOTP in detail\\n\\nThis is the typical flow of an authentication with TOTP.\\n\\n![The typical flow of TOTP authentication](./assets/mfa-totp/totp-sequence.webp)\\n\\n1. The user first login with username and password, or any other authentication\\n   methods like\\n   [single signed-on (SSO)](https://en.wikipedia.org/wiki/Single_sign-on)\\n2. The server verifies the identity and confirm that the user has enabled\\n   multifactor authentication, so the server requests the user to provide the\\n   TOTP\\n3. The user get the TOTP from where it is stored, e.g. authenticator app or\\n   password managers, and submits it\\n4. The server also generates the TOTP from its end and compare the two is the\\n   same\\n\\nWe are going to focus on step 3 and 4, particularly how the user and the server\\nare able to generate the TOTP without communicating at that point.\\n\\nTo understand how TOTP is generated and why it is secure, we need to know three\\nbasic ingredients. A hash function, the Unix timestamp and a shared secret\\nbetween the server and the user.\\n\\n### Hash functions\\n\\n[Hash functions](https://en.wikipedia.org/wiki/Hash_function) in short are any\\none-way function that can map any data into another fixed size value. It has a\\nfew key properties that you need to keep in mind:\\n\\n1. Given the same data, it will always generate the same hash\\n2. Given a different set of data, it will always generate a different hash\\n3. When given a hash, it\u2019s impossible to guess or know what is the data that\\n   generated this hash\\n\\nBased on the first two properties, hash functions should never collide. The\\nnumber of bits in a hash is large, usually 256 or above. At that scale, a\\ncollision is extremely unlikely. If you don\'t believe this work you may watch\\n[this video from 3blue1brown on how secure is 256 bits](https://youtu.be/S9JGmA5_unY)\\nor read about the\\n[birthday problem](https://en.wikipedia.org/wiki/Birthday_problem).\\n\\nHash functions should also be one-way. One intuitive way to understand one-way\\nfunction is multiplication and factoring. Multiplying two numbers together is\\nkind of like \\"one-way\\". It is relatively easy to calculate 89 \xd7 67 = 5963, I\\nbelieve you can do it with a pen and paper in a minute. But if only 5963 is\\ngiven, and you were asked to find out which two numbers multiply to 5963, it\'s\\nway harder. Hope this can convince you there are such one-way, irreversible\\nmathematical operations exist. They aren\'t absolutely impossible to reverse,\\njust way harder.\\n\\n### Unix time\\n\\nThe second basics we need to understand is there is a globally universal\\ntimestamp. Even though your computer might be disconnected from the internet, as\\nlong as it has battery and the clock is correct, all computers should share the\\nsame timestamp.\\n\\nIn computers, there is a standard way to define the time, which is the\\n[Unix time](https://en.wikipedia.org/wiki/Unix_time). That is the number of\\nseconds since 00:00:00 UTC on 1 January 1970. There are some quirks and\\nexceptions (e.g. leap seconds), but all computers should be able to calculate\\nthe same Unix time at any given moment.\\n\\nThe timestamp is the important let the server and user generates the TOTP code\\nseparately without communication to each other.\\n\\n### Shared secret\\n\\nThe last but not least is there is a shared secret only know by the server and\\nthe user. When you use the authenticator app to scan a QR code to register the\\nmultifactor authentication, that is when the shared secret is exchanged.\\n\\nThe shared secret should not be revealed after the initial exchange. The shared\\nsecret should be random, unique for each user, and has a high\\n[entropy](<https://en.wikipedia.org/wiki/Entropy_(information_theory)>) that\\nit\'s not possible to be guessed or brute forced.\\n\\nIn the authenticator app example, the authenticator app gets the shared secret\\nfrom the QR code and stores it, which usually is just random bytes of human\\nunreadable data. The server also stores a copy of the secret uniquely linked to\\nthis user.\\n\\nNow we go to the actual algorithm.\\n\\n### TOTP algorithm\\n\\nThe TOTP algorithm works like this:\\n\\n1. Using a hash functions to hash the shared secret recursively\\n2. Using the current timestamp to determine how many times to hash\\n3. Calculate the modulus of the hash based on the size of the TOTP, this gives a\\n   human-readable 6 digits number\\n\\nYou can read more of the detail algorithm in\\n[section 4](https://datatracker.ietf.org/doc/html/rfc6238#section-4) of the RFC,\\nwhich is based on top of the HMAC-based One-Time Password (HOTP) algorithm\\ndefined in [RFC 4226](https://datatracker.ietf.org/doc/html/rfc4226).\\n\\nThe hash function used as specified in the RFC 6238 should be\\n[SHA-256 or SHA-512](https://en.wikipedia.org/wiki/Secure_Hash_Algorithms). This\\nis also agreed and stored in the authenticator app when scanning the QR code.\\nBecause hash functions generate different value given different input, without\\nknowing the shared secret, it is impossible to generate the same number. This is\\nthe reason why at any given time, there is only 1 valid number for this user,\\nand the server is able to verify that. Also, because hash functions are one-way,\\neven if the TOTP code is exposed, it is not possible to guess the shared secret\\nunless brute force.\\n\\nIn this algorithm, the timestamp used is not the exact Unix time, otherwise the\\n6 digits number will change every second. It will be impractical to ask a user\\nto enter 6 digits and submit within a second. The longer the time before\\nchanging the number, the better the usability for the users, because it\'s less\\nlikely the number changed midway when the user is inputting it. But the longer\\nit is, the less secure it is, because there is a larger window that the TOTP is\\nexposed. It\'s always a trade-off. The RFC 6238 recommends a time step of 30\\nseconds, which means the number only change every 30 seconds. If you open your\\nauthenticator app now, and reference a clock, you should see the number\\nrefreshes at the 00 or 30 seconds mark in a minute, unless it is not using 30\\nseconds as the time step.\\n\\nAs you can see, even if the authenticator app is offline and there is no\\ncommunication between your phone and the server, both of them can generate the\\nsame 6 digits number.\\n\\n### Resynchronization\\n\\nIt is possible that there are delays in the network connection, or the clock on\\nthe user device is delayed, or the user input the number too slow. As such, the\\nRFC recommends the validation server support resynchronization. For example, the\\ncurrent and the last 2 TOTP generated are all valid. The number of steps\\nbackward to consider valid is again a trade-off between usability and security.\\nThe server may optionally record the drift that the user clock has and adjust\\nfor that in future validations.\\n\\n## Security Considerations\\n\\nThere are various best practices for TOTP to be secure.\\n\\nFirst, the user must keep their TOTP secret a secret. It is assumed that the\\nsecret is securely stored in authenticator app or password manager. That should\\nnot be accessible over the internet. Therefore,\\n[it is controversial](https://news.ycombinator.com/item?id=35708869) when Google\\nAuthenticator supports syncing and backing up secrets to Google.\\n\\nAll communications between the user and the server should be done over a secure\\nchannel, e.g. HTTPS. It is true that revealing the TOTP will not leak the shared\\nsecret, but it\'s best to not leak it at all. The initialization phase must be\\ncommunicated over secure channel. If the initial setup QR code is leaked, the\\nattacker has access to the shared secret and the attacker can always generate\\nthe TOTP.\\n\\nThe TOTP code should also be used once only, as specified in the name, one-time\\npassword. For example, if the user login to the account using a TOTP code, that\\ncode should not be valid any more. This is to prevent an attacker that has\\naccess to the newly sent TOTP code from reusing that code to gain access. The\\nuser must wait for 30 seconds for the next code to be generated to log in.\\n\\nGiven all these practices, the best possible attack against this system should\\njust be brute forcing to guess the shared secret. And as mentioned, the shared\\nsecret should be long enough that it\'s not possible to guess and brute force in\\nreasonable timeframe.\\n\\nTOTP is still vulnerable to phishing attacks. Say the user is logging into a\\nfake authentication website, or willing transferring the generated TOTP to\\nattackers. Attackers can then proxy or input the TOTP code in real time to gain\\naccess to the system.\\n\\n## Implementation Details\\n\\nThere are two things to set up for the server. Initializing the TOTP and\\nauthentication the TOTP.\\n\\n### Setting up TOTP\\n\\nWhen a user set up TOTP, the server usually provides a QR code. It is the\\neasiest way and foolproof way to exchange the shared secret. The user can use a\\nseparate device to get the secret without the need to copy and paste. Most\\nphones have a camera nowadays, and password manager browser extensions (e.g.\\n[1Password](https://support.1password.com/one-time-passwords/)) can scan QR\\ncodes as well. QR codes have error correction by default and since users do not\\nneed to type in the unreadable secret, making it less likely to make mistakes.\\n\\nThe QR code is usually a URL in the format of\\n\\n```\\notpauth://totp/<issuer>:<account>?secret=<RandomBytesOfData>\\n```\\n\\n- `otpauth` is the scheme\\n- `totp` is the type of OTP that we are using\\n- The issuer is usually the organization, e.g. Google, Microsoft\\n- The account is usually your username or email\\n- The secret must be present in the parameters, usually a long string\\n- There are optional parameters like `algorithm` for the hash function used,\\n  `period` which defaults to 30 as mentioned above, and `digits` for the number\\n  of digits in the OTP code, which is usually 6\\n- You can read more about the URL format of TOTP in\\n  [this page](https://docs.yubico.com/yesdk/users-manual/application-oath/uri-string-format.html)\\n\\nBefore the user account has MFA enabled, the server should ask for a TOTP code\\nto verify that the user correctly saved the shared secret. Only if that code is\\nvalid, MFA is successfully enabled. The server needs to handle the state where\\nthe shared secret is generated and stored, but the MFA is not enabled yet.\\n\\n### Recovery Codes\\n\\nIn practical use, it is possible that users lose access to their phone or\\nwherever the TOTP codes are generated. It is a challenging aspect because the\\neasier it is for a user to recover the account after failed to log in with MFA\\nmeans the easier it is for attacker to use the same method to compromise the\\naccount.\\n\\nOne way to recover the account is the server provides some single-use recovery\\ncodes, usually some longer random strings. They are usually shown to the user\\nonce after the MFA is first successfully enabled. Each recovery codes should\\nonly be used once only, same as how TOTP codes can only be used once to prevent\\nreplay by an attacker.\\n\\nDuring authentication, the system should allow the user to input recovery codes\\nand if matches, the user is logged in but that recovery code is invalidated. The\\nusers are responsible for keeping the recovery codes secure and use it only when\\nTOTP codes are not available.\\n\\nAlternative recovery methods includes\\n\\n- Mailing a one-use recovery codes to the user\\n- Require the user to contacting the support team to verify the identity before\\n  resetting the MFA\\n- Require users to set up multiple MFA to limit the likelihood of losing access\\n  to all methods at once\\n\\n### Authenticating TOTP\\n\\nBefore supporting MFA, the login endpoint of the server will either return login\\nsuccess or login failed. With TOTP supported, the server has a third response,\\nindicating the credentials are valid but a TOTP code is required because MFA is\\nenabled.\\n\\nIn this response, the server should also return a unique token, (e.g. a JWT\\ntoken) to the frontend. This token will expire in a short period of time, like 5\\nminutes. It has to be submitted to a separate TOTP validation endpoint together\\nto signal that this particular user already passed the username & password\\nvalidation in a previous step. The server use this token to determine which user\\nis trying to log in and which TOTP shared secret to use to validate the TOTP\\ncode submitted. Without this step, a user can just log in with a TOTP code in\\nthe TOTP endpoint without even having the password validation step, which means\\nthe system is back to single factor authentication. Another option is the\\nfrontend stores the previously inputted username and password, and submit that\\nto the server alongside the TOTP code.\\n\\n### Libraries and third party service\\n\\nKnowing how the algorithm works behind the scenes is great, but you should never\\nimplement the algorithms yourself. Use a library instead. For example,\\n[`otpauth`](https://www.npmjs.com/package/otpauth) in the NPM registry for Node,\\nDeno, Bun runtime in JavaScript.\\n\\nThere are also third party services that provide authentication or MFA as a\\nservice. It is good for applications that do not have resources to implement\\ntheir own authentication system, but also require careful consideration for the\\nsecurity, integrity and availability of the third party service.\\n\\n## Useful links\\n\\n- [OWASP Multifactor Authentication Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Multifactor_Authentication_Cheat_Sheet.html)\\n- [RFC 6238 TOTP: Time-Based One-Time Password Algorithm](https://datatracker.ietf.org/doc/html/rfc6238)\\n- [Wikipedia: Multi-factor Authentication](https://en.wikipedia.org/wiki/Multi-factor_authentication)\\n- [Wikipedia: Time-based One-time Password](https://en.wikipedia.org/wiki/Time-based_one-time_password)"},{"id":"/2024/09/08/keyd","metadata":{"permalink":"/blog/2024/09/08/keyd","source":"@site/blog/2024-09-08-keyd.md","title":"How I use keyd to remap my keyboard in Ubuntu 22.04 with Wayland","description":"Think about how you use your keyboard. Imagine how good it would be if your","date":"2024-09-08T00:00:00.000Z","tags":[{"inline":true,"label":"Ubuntu","permalink":"/blog/tags/ubuntu"},{"inline":true,"label":"Tips & Configs","permalink":"/blog/tags/tips-and-configs"},{"inline":true,"label":"Computers","permalink":"/blog/tags/computers"}],"readingTime":12.42,"hasTruncateMarker":true,"authors":[{"name":"Ethan Pang","url":"https://ethanppl.com/","imageURL":"https://github.com/ethanppl.png","key":"ethan","page":null}],"frontMatter":{"title":"How I use keyd to remap my keyboard in Ubuntu 22.04 with Wayland","tags":[{"label":"Ubuntu","permalink":"ubuntu"},{"label":"Tips & Configs","permalink":"tips-and-configs"},{"label":"Computers","permalink":"computers"}],"toc_min_heading_level":2,"toc_max_heading_level":3,"authors":"ethan"},"unlisted":false,"prevItem":{"title":"How does multifactor authentication (MFA) work?","permalink":"/blog/2024/12/28/mfa-totp"},"nextItem":{"title":"Don\'t say it\'s a weird bug, because it makes you look stupid","permalink":"/blog/2024/06/19/weird-issue"}},"content":"Think about how you use your keyboard. Imagine how good it would be if your\\n`CapsLock` can be used as `Ctrl`, how much better it would be for your left\\npinky? That is the power of remapping the keyboard. It means you can customize\\nthe functionality of each key on your keyboard.\\n\\nThis is a walkthrough of my setup in Ubuntu using `keyd`. A guide I wish it\\nexisted when I first try to find out how to remap my keyboard in Ubuntu.\\n\\n\x3c!-- truncate --\x3e\\n\\n![xkcd 1806](https://imgs.xkcd.com/comics/borrow_your_laptop.png)\\n\\n_[xkcd 1806: borrow your laptop](https://xkcd.com/1806/)_\\n\\n## Why I Remap my Keyboard\\n\\nAfter I [dual-boot with Ubuntu](./2024-02-29-dual-boot-guide.md) and used it as\\nmy daily driver for work and personal use, one key thing I missed is\\n[AutoHotkey](https://www.autohotkey.com/). It is a software that I used to remap\\nmy keyboard in Windows and create shortcuts and \\"hotstrings\\". For example,\\n\\n- Remapping `CapsLock` to `Ctrl` on hold, but works as `Esc` when clicked alone\\n- `z+d` to scroll down and `z+u` to scroll up, and other ways to move my mouse\\n- `z+e` and `z+g` to insert my email addresses\\n- `|!=`, `|->`, `|<-` will be replaced by not equal (\u2260), right arrow (\u2192) and\\n  left arrow (\u2190), etc., automatically\\n\\nI shared\\n[my AHK configuration in this repository](https://github.com/ethanppl/ahk) if\\nyou are interested. I might write about it later too.\\n\\nI think remapping keyboard is one of the most important change I made to my\\nlaptop ever since I know how to use a computer. It is like the first time you\\ndiscovered you can use `Ctrl+C` rather than right click and select copy. I\\nhighly encourage everyone to try it, especially for keys like `CapsLock` that is\\nin a very convenient location but is rarely used.\\n\\nSo once I boot to Ubuntu, the first thing I wanted to do is to replicate this\\nsetup. Unfortunately, AHK only works for Windows, so I need to look for\\nalternatives. The first difficulty that you might face as well is Ubuntu 22.04\\nby default uses [Wayland](<https://en.wikipedia.org/wiki/Wayland_(protocol)>) as\\nthe window system, but a lot of tools available online works for\\n[X11](https://en.wikipedia.org/wiki/X_Window_System) only. For example, there is\\n[AutoKey](https://github.com/autokey/autokey) that seems to be popular but only\\nworks for X11.\\n\\nI first tried [`input-remapper`](https://github.com/sezanzeb/input-remapper). It\\nlooks promising with nice graphical user interface, but it didn\'t work out when\\nI tried to add more complicated logics. I also tried\\n[keyboard](https://github.com/boppreh/keyboard), a Python module which allows me\\nto create custom keyboard events in Python code. It\'s like coding my own daemon,\\nbut I found it too much overhead and quite laggy. In the end, I found\\n[a list of input remapping utilities](https://wiki.archlinux.org/title/Input_remap_utilities)\\nprovided by Arch Linux wiki. Going through the list and I chose\\n[`keyd`](https://github.com/rvaiya/keyd) which works for me quite well over the\\npast year.\\n\\nIf you are using Windows, you can check\\n[AutoHotkey](https://www.autohotkey.com/) as linked above. If you are on Mac, I\\nread that\\n[Karabiner](https://karabiner-elements.pqrs.org/docs/getting-started/features/)\\nis good, but I have not used a Mac before. If your keyboard supports it,\\n[QMK](https://docs.qmk.fm/#/newbs)/[VIA](https://www.caniusevia.com/docs/specification)\\nmight be good for you. Even if `keyd` doesn\'t work for you, you may follow along\\nto get some inspiration even though the syntax of the config is not the same.\\n\\n## Basic Concepts in `keyd`\\n\\nThe very first thing to understand in `keyd` config is it operates in terms of\\nlayers. The most intuitive way for me to understand a layer is the `Shift` key.\\nWhen the `Shift` key is pressed and hold, a different layer is activated and all\\nthe keys on your keyboard have a different meaning. And what `keyd` allows you\\nto do is to define custom layers, that is, defining how the layers are activated\\nand deactivated, and what each key means in each of the defined layer.\\n\\nThe major reason I select `keyd` is it works in X, sway and gnome in Wayland.\\nSecond, it natively supports key overloading, which allows me to configure the\\n`CapsLock` key to behave as `Ctrl` on hold while `Esc` when tapped. From what I\\ntest, it is instant and fast too.\\n\\nTo get started, install `keyd` from source. Clone\\n[the repository](https://github.com/rvaiya/keyd) and build it from source.\\nFollow the instructions in the\\n[README](https://github.com/rvaiya/keyd?tab=readme-ov-file#from-source) to\\ninstall it.\\n\\nHere are some helpful commands to know:\\n\\n- `sudo systemctl enable keyd`: start `keyd`, probably run it once in your\\n  lifetime\\n- `sudo keyd reload`: reload the config every time after you edit the config\\n- `sudo keyd monitor`: print key events, useful to debug what is remapped\\n- `keyd list-keys`: list all the valid key names, useful to check the\\n  possibilities\\n- `backspace+escape+enter` keyboard combo: terminate `keyd` anywhere anytime in\\n  case you severely messed up (happened once to me)\\n\\n## Sharing my Configuration\\n\\nHere is the full config if you are interested. I will explain it line by line\\nbelow.\\n\\n```\\n[ids]\\n\\n*\\n\\n[main]\\n\\n# Maps capslock to escape when pressed and control when held.\\ncapslock = overload(control, esc)\\n\\n# Maps z to a custom layer, but just \'z\' when pressed.\\nz = overload(z, z)\\n\\n# Shift layer\\n[shift:S]\\n\\n## shift+capslock is capslock\\ncapslock = capslock\\n\\n# Custom z layer\\n[z]\\n\\n## Escape common patterns\\ni = macro(zi)\\no = macro(zo)\\n\\n## Emails\\ne = macro(hi@ethanppl.com)\\ng = macro(hi@ethanppl.com)\\n\\n## Simplify complicated shortcut keys\\nv = C-S-v\\nn = C-S-a\\nx = A-f4\\ns = command(systemctl suspend)\\n\\n## Arrows\\nj = down\\nk = up\\nh = left\\nl = right\\n\\n## Media / modifier\\nm = oneshot(media)\\n\\n[media]\\n\\nj = previoussong\\nk = playpause\\nl = nextsong\\n\\na = macro({ enter 10ms \\"Aut 10ms hor 10ms iza 10ms tio 10ms n\\": space \\"Bea 10ms rer space C-v)\\n\\n```\\n\\n### Main layer\\n\\nLet\'s go through it line by line.\\n\\n```\\ncapslock = overload(control, esc)\\n```\\n\\nThis is the most important feature that I need, as introduced in the beginning.\\nAccording to the man page, `overload(<layer>, <action>)` \\"activates the layer on\\nhold while executes the action on tap\\". This line means `CapsLock` will act like\\n`Ctrl` when used with other keys. But when I tap it only, it works as `Esc`.\\nThis makes key combo like `Ctrl+C` way easier than before, where the `Ctrl` key\\nis in the bottom left. It also makes `Esc` easier, which is used a lot in Vim.\\nThis single line is the biggest reason why I picked `keyd`.\\n\\n```\\nz = overload(z, z)\\n```\\n\\nThis might seem weird when you first look at it, but think about the key `z` as\\nits own layer (remember, layer is like the `Shift` key). So when `z` is hold, it\\nactivates a `z` layer, like holding the `Shift` key activate the shift layer,\\nbut it acts as `z` when tap alone. This gives me another modifier key (e.g.\\n`Ctrl`, `Alt`, `Shift`), without overriding what the default keyboard shortcuts\\nthat come with software programs. But before we go into this special `z` layer,\\nwe need to fix one thing first.\\n\\n### Shift layer\\n\\n```\\n[shift:S]\\n\\ncapslock = capslock\\n```\\n\\nWe don\'t have a `CapsLock` key after we remap it. What this two lines do is\\nthat, in the shift layer, map `CapsLock` to work as `CapsLock`. So to summarize,\\nright now holding `CapsLock` is `Ctrl`, tapping `CapsLock` once is `Esc`, and\\ndoing `Shift+CapsLock` is `CapsLock`.\\n\\n### The `z` layer\\n\\n```\\ni = macro(zi)\\no = macro(zo)\\n```\\n\\nFirst thing is since I did this custom `z` layer with AutoHotkey in Windows, I\\nrealized the character `i` and `o` commonly follows the `z` key (e.g. amazing\\nand amazon). To avoid delay in typing or keys being ignored because I typed `i`\\nbefore releasing `z`. I mapped press and hold `z` then `i` (`z+i`) to output\\n`zi` and `z+o` to output `zo` here.\\n\\nI use `+` sign to mean press and hold the first key and type the second key. But\\n`keyd` use `+` sign to mean chording, which means two keys to be pressed at the\\nsame time. I didn\'t use chording in my config and most of the documentation for\\nkeyboard shortcuts often use `+` sign like `Ctrl+c`, so I hope it\'s easy to\\nunderstand.\\n\\n```\\ne = macro(hi@ethanppl.com)\\ng = macro(hi@ethanppl.com)\\n```\\n\\nNext, I mapped `z+e` and `z+g` to two emails that I used the most for\\ncommunication and sign in. You will be amazed how many times you type your email\\neach day. And how much better you don\'t need to type `@` anymore.\\n\\n```\\nv = C-S-v\\nn = C-S-a\\nx = A-f4\\ns = command(systemctl suspend)\\n```\\n\\nHere I simplified some commonly used shortcuts with the `z` layer. In `keyd`,\\ncapitalized `C`, `S` and `A` means `Ctrl`, `Shift` and `Alt` key respectively.\\nAnd the hyphen `-` means press and hold. For example, `z+v` is an alias of\\n`Ctrl+Shift+V` which is often used as paste text only or the markdown preview in\\nVSCode. `z+n` is an alias of `Ctrl+Shift+a` which shows information of all tabs\\nin Chrome. `z+x` is an alias of `Alt-F4` which closes a window. And `z+s` run\\nthe `systemctl suspend` command, which will suspend the laptop. I find this\\nhelpful, and somehow I trust it to suspend my laptop successfully more than just\\nclosing the lid of my laptop.\\n\\n```\\nj = down\\nk = up\\nh = left\\nl = right\\n```\\n\\nHere I mapped `j`, `k`, `h`, `l` to be arrow keys. For example, holding `z+l`\\nwill produce the right arrow key. The reason for these mappings (e.g. why `j` is\\ndown) are based on Vim motions. These are helpful because arrows are usually\\nunreachable unless I move my palm away from my keyboard. Doing `z+l` allows me\\nto do things like autocomplete in terminal without moving my palm.\\n\\nYou might also notice that I try to pair keys that are comfortable to reach when\\nholding `z` down, like I would avoid mapping anything to `z+a` that is just\\ncomplicated and unnatural to type.\\n\\n### The `z+m` layer, a layer on top of a layer\\n\\n```\\nm = oneshot(media)\\n```\\n\\nStill in the `z` layer, I defined the `m` key to activate the `media` layer. It\\nactivates this layer as `oneshot`. The man page defined `oneshot` as \\"If tapped,\\nactivate the supplied layer for the duration of the next key press\\". It means\\nthe layer is activated once tapped, and it will be toggled off only after\\nanother key is pressed. This means the `media` layer is activated once we tap\\n`z+m`, and we don\'t have to hold it for it to be active (unlike the `shift` or\\n`z` layer).\\n\\n```\\n[media]\\n\\nj = previoussong\\nk = playpause\\nl = nextsong\\n```\\n\\nI discovered these keys when browsing through the `keyd list-keys` command. And\\nUbuntu support these keys. How this works is once I pressed `z+m`, then tap `l`,\\nit will emit a `nextsong` key press. What this allows me to do is whichever\\nactive window I am in, I can use `z+m`, then `j`, `k`, or `l` to go back, pause,\\nor skip a song in Spotify, which I think is pretty amazing.\\n\\n```\\na = macro({ enter 10ms \\"Aut 10ms hor 10ms iza 10ms tio 10ms n\\": space \\"Bea 10ms rer space C-v)\\n```\\n\\nOne last line which doesn\'t relate to media actually, but I put it in any way.\\nIt is used to help me type the authorization header in GraphQL playground. What\\nI have to do is copy the token that I want to use, then type `z+m` and `a`, it\\nwill help me generate the whole\\n\\n```\\n{\\n  \\"Authorization\\": \\"Bearer <token_copied_here>\\"\\n}\\n```\\n\\nIt is taking advantage of the GraphQL playground I used that will help me close\\nthe `{` curly braces. With some trial and error I realize I cannot make `keyd`\\nto type all keys at once, so I leave some delay in between and that works\\nbetter. Having it run `Ctrl+V` to paste also helps a lot. I find this saves me\\nquite some time each day.\\n\\n## Other thoughts\\n\\nThere are many other features in `keyd` that is up to you to explore. I have\\nadded different configs in and out over the year until I settle down to this set\\nof commands. For example, initially I also configured a shortcut to type\\n`console.log` and `IO.inspect` for TypeScript and Elixir, other than the\\nauthorization header shortcut, but I found out I rarely used them and I removed\\nthem.\\n\\nI also tried `oneshot(shift)` which is recommended in the `keyd` README. But it\\ndidn\'t work for me. I find out I often tap `Shift` but changed my mind\\nafterwards, which makes me accidentally typed characters in uppercase. I also\\nfind out `oneshot(shift)` doesn\'t work well with Shift and drag to select in\\nbulk with mouse because it doesn\'t understand there is a mouse click and\\ndeactivate the shift layer after I realize the `Shift` key.\\n\\nAnother thing I found is the `command()` call doesn\'t always work. I once\\ninstalled `copyq` to get clipboard history and I configured `z+c` to be\\n`command(copyq show)`, but it never worked. It\'s not a dealbreaker and I didn\'t\\nspend time to debug why.\\n\\nOne thing you might already notice is there is no more hotstrings, which I had\\nin [my AutoHotkey configuration](https://github.com/ethanppl/ahk). I can no\\nlonger type `\u2260`, `\u2192`, `\u2190` and other special characters that easily. I realize\\nconfiguration like `l = \u2190` doesn\'t work. After reading the man page, I believe I\\ncan make it works by setting up Unicode support, which have some other external\\nconfiguration required, and I have not spent the time investigating.\\n\\nThere is also no more mouse control. There is no way to move my mouse with\\n`keyd` because all `keyd` does is to remap keys. I know there are other daemons\\nin Linux that are designed for that, but I have not tried. I remember I found\\none before, but it only works for X11.\\n\\nThere are also some minor problems that I wish to solve in the future. For\\nexample, `Ctrl+<arrows>` is a common key combination that I do, but I can\'t\\neasily do that with `CapsLock+z+<hjkl>` because the relative position of\\n`CapsLock` and `z` is too close.\\n\\nI would like to try mapping specific shortcuts to specific applications too. But\\nmost of the time I find the default configs coming with the app works good\\nenough. Also, I did not configure any keys to launch an application because I\\nfind `meta+<num>` good enough to open the windows that are pinned to the task\\nbar. For example, `win+2` always open my browser and `win+3` open VSCode.\\n\\nThat is how my configuration in `keyd` works and some of my reasoning behind it.\\nI hope you like this explanation, and it inspires you to remap your keyboard\\ntoo. It genuinely improved my life.\\n\\n_You might be interested in [this page about keyboards](/computers/keyboard) in\\nmy Wiki too._\\n\\n## Useful links\\n\\n- [`keyd` repository](https://github.com/rvaiya/keyd)\\n- [`keyd` examples](https://github.com/rvaiya/keyd/tree/master/examples) by the\\n  creator\\n- If you are stuck, you might find a solution by searching the\\n  [issues in `keyd`](https://github.com/rvaiya/keyd/issues)"},{"id":"/2024/06/19/weird-issue","metadata":{"permalink":"/blog/2024/06/19/weird-issue","source":"@site/blog/2024-06-19-weird-issue.md","title":"Don\'t say it\'s a weird bug, because it makes you look stupid","description":"Often when someone is debugging an issue, you might hear:","date":"2024-06-19T00:00:00.000Z","tags":[{"inline":true,"label":"Thoughts","permalink":"/blog/tags/thoughts"},{"inline":true,"label":"Workplace","permalink":"/blog/tags/workplace"}],"readingTime":5.855,"hasTruncateMarker":true,"authors":[{"name":"Ethan Pang","url":"https://ethanppl.com/","imageURL":"https://github.com/ethanppl.png","key":"ethan","page":null}],"frontMatter":{"title":"Don\'t say it\'s a weird bug, because it makes you look stupid","tags":[{"label":"Thoughts","permalink":"thoughts"},{"label":"Workplace","permalink":"workplace"}],"toc_min_heading_level":2,"toc_max_heading_level":3,"authors":"ethan"},"unlisted":false,"prevItem":{"title":"How I use keyd to remap my keyboard in Ubuntu 22.04 with Wayland","permalink":"/blog/2024/09/08/keyd"},"nextItem":{"title":"Dual Boot Windows and Ubuntu with Secure Boot and Full Disk Encryption","permalink":"/blog/2024/02/29/dual-boot-guide"}},"content":"Often when someone is debugging an issue, you might hear:\\n\\n- It\'s a _weird bug_\\n- _Somehow_ it throws an error, it\'s _weird_\\n- I followed the README, but _weirdly_ it doesn\'t work\\n\\nAs if something outside their control misbehaved, they expect someone to help\\nthem eliminate the \\"weirdness\\". I find that a bit annoying. What does \\"weird\\"\\nactually mean?\\n\\nWe think \\"it\'s weird\\" because we feel like we did nothing wrong, and the outcome\\nis not what we intended. We do not understand why something unexpected happened,\\nand our first instinct is to label it as \\"it\'s weird\\". If the system is \\"weird\\",\\nthen it is no longer our problem.\\n\\nHowever, is this true? Should you ever say computers behaved \\"weirdly\\"?\\n\\n\x3c!-- truncate --\x3e\\n\\n## Computers never lie\\n\\nOne day, something like this happened. I was interrupted by my colleague because\\nhe found a weird issue. He was debugging an API. While testing it, he missed the\\nauthorization token in one of the service-to-service APIs, and as expected, an\\nunauthorized error was thrown. His immediate response was \\"weird\\", and then seek\\nhelp, and told me \\"it\'s weird\\". Huh? Why? What is weird though?\\n\\nI understand what he felt like \\"weird\\" is he supplied a user token already, how\\ncan it be unauthorized? The unauthorized error feels \\"weird\\" because the reason\\nis unknown. However, the reality is one of the APIs the program uses expects\\nanother type of token, and the code missed that. There is nothing \\"weird\\", but\\nthat immediate thought of the computer being \\"weird\\" makes it sound like he\\nthinks the computer lied to him, hence weird.\\n\\nBut computers don\'t lie! Computers are devices that take inputs, process and\\nthen output. If the output is unexpected, either the inputs or the process, or\\nboth are wrong. Data and code are both provided by users, programmers or other\\nsystems. The computer only executes it. There is nothing weird about the\\ncomputer itself.\\n\\nIt\'s even worse when a developer says something is weird with the program that\\nthey wrote. You wrote the program! The computer follows your instructions. How\\nwould you blame something that exactly follows your instructions as weird, and\\npretend to take no ownership of the error?\\n\\nIf you think seeing an unauthorized error is weird. It\'s not the computer\\nbehaving weirdly, instead, it is you not understanding how your code works. It\\nis you not checking the API documentation before commenting it is weird. It is\\nnot the computer lying to you therefore the code throw an error. Instead, it is\\nyou who made a mistake in the code causing it to throw.\\n\\nComputers don\'t lie. Even if they do because of hardware failure or cosmic rays\\nfrom light years away flipping a bit in the processor, it\'s abiding by the law\\nof physics. Figure out why and own the problem. That\'s how you learn.\\n\\n## Why it makes you look stupid\\n\\nWhen blaming something as weird, it sounds like blaming some external factors\\ncausing the weirdness, as if you take no responsibility for the issue, and you\\nare not eager to understand the problem.\\n\\nWhen you get used to saying \\"it\'s weird\\" to anything unexpected, your first\\ninstinct is to make it sound like you have no control. It sounds like you do not\\nunderstand the issue only because some \\"weirdness\\" is hindering your ability to\\nunderstand. But to someone who understands, they know the reason is you lack the\\nknowledge to understand, not because it\'s weird. It just sounds like you do not\\nunderstand how things work, you are making up excuses, and you are not taking\\nownership of figuring it out yourself. It doesn\'t matter how you think, it might\\njust be a filler word, but others who listen feel differently. It sounds like\\nyou are stupid.\\n\\nEven worse is if you are used to settling for the answer of \\"it\'s weird\\", you do\\nnot try to understand what is wrong. You are tempted to seek help immediately.\\nOnce you get used to that, you no longer self-learn and improve. You think you\\ndon\'t understand just because things are \\"weird\\". You learn less.\\n\\nImagine if there are network issues, rather than labelling it as a \\"weird\\ninternet problem\\", you take the time to investigate, you might figure out how\\nHTTP calls are structured, the difference between TCP and UDP, how DNS records\\npropagate, or how routing protocols work. That is how we learn.\\n\\nSo, whenever we are debugging, and when we encounter something unexpected, try\\nnot to say \\"it\'s weird\\".\\n\\n## Instead, state the facts\\n\\nThe fact is we don\'t know. We find it unexpected because we don\'t know why, and\\nthere is nothing wrong with stating that. Imagine someone coming to you to ask\\nyou a question, which way is better:\\n\\n> How do I find the log of this line in the console? Weirdly the log is not\\n> showing up.\\n\\nOr,\\n\\n> How do I find the log of this line in the console? I tried checking the\\n> browser console, but I could not find it. I don\'t know where it is logged, can\\n> you help?\\n\\nSee the difference? The first one sounds like the person is blaming some\\nweirdness that swallowed the console.log. But in fact, it is some piece of code\\nchanging the control flow causing that line not to log. Or it\'s just looking at\\nthe wrong place to find the log, it could be in the server-side console.\\n\\nTaking the unauthorized error example, instead of a filler word \\"weird\\", he\\ncould comment \\"I already put in my token, I expect the API calls to be\\nauthorized\\", and then proceed to find the source of the error.\\n\\nIt\'s mysterious and weird only because you don\'t understand how the program you\\nwrote works. State that you don\'t know what caused the unexpected behaviour is\\nbetter than labelling it as \\"weird\\".\\n\\nSooner or later you will figure out the issue. It might be some global variables\\nand side effects in functions. It might be some outdated cache. It might be race\\nconditions. Or it might be some network failure. No matter what it is, you will\\nrealize there is nothing \\"weird\\", just a lack of understanding. So, admit that\\nit\'s just you don\'t know, and you will try to understand it.\\n\\nTo get even better, state what you have tried when seeking help. Divide and\\nconquer. Check intermediate outputs. Narrow down the scope and state your\\nfindings when asking questions. \\"I tried checking the browser console\\". \\"This\\nline is logged in the console but not this\\". This shows that you are eager to\\nfigure it out and learn. You put in the effort to understand the issue and try\\nto demystify it yourself. Talk to a\\n[rubber duck](https://en.wikipedia.org/wiki/Rubber_duck_debugging) and you might\\neventually figure it out all yourself :)\\n\\nSo, avoiding saying \\"it\'s weird\\". State what you found, what you expect to see\\nand what is unexpected. It will make you sound more credible. A person who takes\\nownership."},{"id":"/2024/02/29/dual-boot-guide","metadata":{"permalink":"/blog/2024/02/29/dual-boot-guide","source":"@site/blog/2024-02-29-dual-boot-guide.md","title":"Dual Boot Windows and Ubuntu with Secure Boot and Full Disk Encryption","description":"A few months ago, I finally took the time to set up dual boot on my laptop. I","date":"2024-02-29T00:00:00.000Z","tags":[{"inline":true,"label":"Dual Boot","permalink":"/blog/tags/dual-boot"},{"inline":true,"label":"Ubuntu","permalink":"/blog/tags/ubuntu"},{"inline":true,"label":"Computers","permalink":"/blog/tags/computers"}],"readingTime":11.49,"hasTruncateMarker":true,"authors":[{"name":"Ethan Pang","url":"https://ethanppl.com/","imageURL":"https://github.com/ethanppl.png","key":"ethan","page":null}],"frontMatter":{"title":"Dual Boot Windows and Ubuntu with Secure Boot and Full Disk Encryption","tags":[{"label":"Dual Boot","permalink":"dual-boot"},{"label":"Ubuntu","permalink":"ubuntu"},{"label":"Computers","permalink":"computers"}],"toc_min_heading_level":2,"toc_max_heading_level":3,"authors":"ethan"},"unlisted":false,"prevItem":{"title":"Don\'t say it\'s a weird bug, because it makes you look stupid","permalink":"/blog/2024/06/19/weird-issue"}},"content":"A few months ago, I finally took the time to set up dual boot on my laptop. I\\nwould love to try Ubuntu as my daily driver again, while keeping the Windows OS\\njust in case. I treated this as a learning opportunity and configured dual boot\\nwith secure boot still enabled and have full disk encryption configured for both\\noperating systems.\\n\\nI wrote this blog because I could not find a single guide explains all steps for\\nsecure boot and full disk encryption sequentially, and these steps interleave\\neach other. So, I made some notes before the installation to ensure I am doing\\nthe right thing at the right time. For example, I won\'t accidentally skip a step\\nabout configuring secure boot when I am focused on following another guide about\\nfull disk encryption. This guide is a cleaned up version of the notes that I\\ncompiled for my dual boot set up.\\n\\nI organized the whole flow into 6 general steps:\\n\\n1. Preparing in Windows: set boot mode, partition disk, etc.\\n2. Configure BIOS: boot mode and other BIOS settings\\n3. Configure Ubuntu Partition: boot and data partition\\n4. Install Ubuntu: configure dual boot and mounting volumes correctly\\n5. Set up `crypttab` for full disk encryption\\n6. Reboot and fix some other issues\\n\\n\x3c!-- truncate --\x3e\\n\\nYou can do step 1 and 2 separately. From step 3 onwards, I suggest doing in 1\\nsitting, which might take an hour or more.\\n\\nWhat I have is a Lenovo ThinkPad X1 Carbon 7th Gen laptop, running Windows 11\\nhome and I would like it to dual boot into Ubuntu 22.04. And, as mentioned, with\\nsecure boot enabled in the boot process and full disk encryption for both\\noperating systems.\\n\\nNow the system has been running for a few months and things work fine. No issue\\nwith booting or decrypting the disk. It\'s a good time to document the steps and\\nshare the resources that I found helpful. Hopefully this is helpful to others\\nand maybe one day my future self.\\n\\n**Dual boot is stressful and it has risk. This guide by no means is complete.**\\nI have dual boot a few times before, so I kind of know how things look like. To\\nme, it\'s helpful to watch YouTube video of people dual booting before doing it\\nto understand what to expect. Also, check a few more guides, compare and\\nunderstand which part is common and which part is custom.\\n\\n**Make sure you have access to guides and notes on mobile or another device.**\\nYou won\'t be able to access notes in the device during dual boot. Things might\\nbreak after dual booting. Maybe the Wi-Fi card driver is not working, or\\ngraphics card config is wrong, or the pointer device is unusable. You will need\\nanother device to access your notes or search the Internet for answers.\\n\\n## Preparation in Windows\\n\\nLet\'s start!\\n\\nThe first step is to prepare for dual boot. All the steps in this stage are done\\nwithin the Windows. There is no specific order for these steps and no need to do\\nit in 1 sitting. I had my laptop running on Windows, so all the preparation are\\ndone in Windows.\\n\\n- UEFI, not BIOS\\n  - On Windows: `System Information` \u2192 `BIOS Mode` = `UEFI` instead of `Legacy`\\n  - `UEFI` is required for secure boot, GUID partition table (GPT) t\'s faster,\\n    and many other features\\n  - Read more here: https://itsfoss.com/check-uefi-or-bios/\\n- GPT, not MBR\\n  - On Windows: `Disk management` \u2192 `Create and format hard disk partitions` \u2192\\n    right-click disk \u2192 `Properties` \u2192 `Volume` \u2192 `Partition style` =\\n    `GUID Partition Table (GPT)`\\n  - Read more here: https://itsfoss.com/check-mbr-or-gpt/\\n- Use [Rufus](https://rufus.ie/en/) to create the bootable USB\\n  - Get the [Ubuntu Desktop Image](https://ubuntu.com/download/desktop)\\n  - Partition scheme: Select `GPT`\\n  - Target System: Select `UEFI`\\n- Backup BitLocker recovery key\\n  - Make sure your BitLocker recovery key is saved to your Microsoft account, or\\n    any other ways of backing it up\\n  - Read more on how to back up in\\n    [Microsoft official guide](https://support.microsoft.com/en-us/windows/back-up-your-bitlocker-recovery-key-e63607b4-77fb-4ad3-8022-d6dc428fbd0d)\\n- Partition your disk\\n  - Assuming Windows now taking up the full disk, you will need to shrink the\\n    volume available to Windows and create space for Linux\\n  - Disable BitLocker\\n    - I had to disable BitLocker to shrink the Windows volume\\n    - Follow the on-screen instructions for each to decrypt and reboot, it will\\n      take some time\\n    - Read more on\\n      [this guide about resize BitLocker partition](https://www.diskpart.com/articles/resize-bitlocker-partition-windows-10-0725.html)\\n  - Partition\\n    - I used [AOMEI Partition Assistant](https://www.diskpart.com/download.html)\\n    - Read their\\n      [How to safely partition](https://www.diskpart.com/safely-partition.html)\\n      tutorial\\n    - Other guides I found useful:\\n      [Align partition](https://www.diskpart.com/help/align-partition.html),\\n      [PreOS Mode](https://www.diskpart.com/lib/PreOS-mode.html)\\n    - If you want to use the Disk Management tool from Windows but failed,\\n      [this post](https://answers.microsoft.com/en-us/windows/forum/all/windows-disk-management-unable-to-shrink-c-drive/217c3521-b254-4662-bac9-bc90dc633fab)\\n      might be helpful\\n  - Move `WinRe` partition after the Windows partition\\n    - This is the recovery partition for Windows to support failover\\n    - It is recommended to keep this as a separate partition and put it right\\n      after the Windows partition\\n    - Read more on\\n      [this post](https://learn.microsoft.com/en-us/answers/questions/1354739/the-recovery-partition-is-typically-created-at-the)\\n    - So what I had is [Windows | WinRe | Unused space (for Ubuntu later)]\\n\\n## Configure BIOS in the BIOS Menu\\n\\nJust to make sure a few things are set in the BIOS menu. Knowing how to get into\\nthe BIOS menu is also helpful in case of bad things happened.\\n\\nReboot the computer and enter the BIOS menu before the OS load. Search online\\nhow to do it for your computer. It\'s usually F2 or F12. For me is pressing Enter\\nwhen it says something like \\"Press Enter to interrupt\\".\\n\\nThings to check:\\n\\n- Make sure the UEFI BIOS is up-to-date\\n- SATA mode is `AHCI`, as Ubuntu doesn\'t support other operations\\n- Secure boot is enabled and CSM is disabled\\n  - It is required to install Ubuntu with secure boot enabled for secure boot to\\n    work with Ubuntu\\n  - CSM is to support non-UEFI OS. It should already be disabled with secure\\n    boot enabled\\n- Boot mode is UEFI only\\n- TPM security has to be enabled for BitLocker in Windows\\n- You can check the Boot order in the BIOS menu as well\\n\\n## Configure Ubuntu Partition\\n\\nThe important bits start here! From now on, it\'s better to do all remaining\\nsteps in one go.\\n\\nThis stage is to boot into Ubuntu with the live USB and configure the Ubuntu\\npartition that is encrypted.\\n\\n1. Boot the USB stick and select `Try without installing` when prompted\\n2. You should see the default Ubuntu desktop, open a terminal\\n3. In the terminal, change to root with\\n   ```bash\\n   sudo su\\n   ```\\n4. Check the partition table again\\n   1. Check with `sgdisk`\\n      ```bash\\n      sgdisk --print /dev/nvme0n1\\n      ```\\n   2. If your disk is not `/dev/nvme0n1`, then you will have to replace all the\\n      following commands to your disk name, e.g. `/dev/sda`\\n   3. Look for the disk name (e.g. `/dev/sda` or `/dev/nvme0n1`) not the\\n      partition name (e.g. `/dev/sda1` or `/dev/nvme0n1p1`)\\n5. Create 2 partitions in the empty space in your disk, one for boot and the\\n   rest for root\\n   1. New 1800M partition for boot\\n      ```bash\\n      sgdisk --new=5:0:+1800M /dev/nvme0n1\\n      ```\\n   2. New partition using the rest for root\\n      ```bash\\n      sgdisk --new=6:0:0 /dev/nvme0n1\\n      ```\\n   3. Name the partitions\\n      ```bash\\n      sgdisk --change-name=5:/boot --change-name=6:rootfs /dev/nvme0n1\\n      ```\\n   4. Choose 8300 as the type code for the file system (Linux filesystem)\\n      ```bash\\n      sgdisk --typecode=5:8300 --typecode=6:8300 /dev/nvme0n1\\n      ```\\n      (you can find all typecode with `sgdisk -L`)\\n   5. Make EXT4 file system (notice that here is the partition name)\\n      ```bash\\n      mkfs.ext4 -L boot /dev/nvme0n1p5\\n      ```\\n6. Encrypt the Linux data partition with LUKS\\n\\n   - In the following codeblock, I am showing the output as well\\n   - Lines after `#` are what needed to be inputted to the terminal\\n   - The passphrase you chose at this step is what you needed to decrypt the\\n     disk when booting\\n\\n   ```bash\\n   # cryptsetup luksFormat --type=luks2 /dev/nvme0n1p6\\n   WARNING!\\n   ========\\n   This will overwrite data on /dev/nvme0n1p6 irrevocably.\\n\\n   Are you sure? (Type uppercase yes): YES\\n   Enter passphrase for /dev/nvme0n1p6:\\n   Verify passphrase:\\n\\n   # cryptsetup open /dev/nvme0n1p6 nvme0n1p6_crypt\\n   Enter passphrase for /dev/nvme0n1p6:\\n\\n   # ls /dev/mapper/\\n   control nvme0n1p6_crypt\\n   ```\\n\\n7. Set up logical volume manager (LVM), with root, swap and home partition\\n   ```bash\\n   # pvcreate /dev/mapper/nvme0n1p6_crypt\\n   Physical volume \\"/dev/mapper/nvme0n1p6_crypt\\" successfully created.\\n   # vgcreate ubuntu-vg /dev/mapper/nvme0n1p6_crypt\\n   Volume group \\"ubuntu-vg\\" successfully created\\n   # lvcreate -L 64G -n root ubuntu-vg\\n   Logical volume \\"root\\" created.\\n   # lvcreate -L 16G -n swap ubuntu-vg\\n   Logical volume \\"swap\\" created.\\n   # lvcreate -l 100%FREE -n home ubuntu-vg\\n   Logical volume \\"home\\" created.\\n   ```\\n\\nNow all the Ubuntu partitions are prepared. Without exiting the live\\nenvironment, use the GUI to continue the installation.\\n\\n## Install Ubuntu\\n\\nWe will install Ubuntu on the encrypted disk and configure things to make sure\\nsecure boot also works.\\n\\n1. Run the graphical installer\\n2. Connect to your Wi-Fi network\\n3. On the software step, for \\"Other options\\" (This step is important for secure\\n   boot to work)\\n   1. Check the \\"Download updates\\" option\\n   2. Check the \\"Install third-party software for graphics and Wi-Fi hardware\\"\\n   3. Check the \\"Configure Secure Boot\\" option and enter a password, remember\\n      this password. Useful for the MOK management step explained below.\\n   4. Save and continue\\n4. When asked what to do with the disk, pick \\"Something else\\", or the option\\n   that allows you to manually assign disk partition\\n   1. Use the ~1800MB partition as `ext4` with mount point as `/boot`\\n   2. Use the `/dev/mapper/ubuntu-vg-root` as `ext4` FS and mount it to `/`\\n   3. Use the `/dev/mapper/ubuntu-vg-home` as `ext4` FS and mount it to `/home`\\n   4. Use the `/dev/mapper/ubuntu-vg-swap` as `swap`\\n   5. Do the same as above if you have more or less partitions\\n   6. The bootloader device should be `/dev/nvme0n1`\\n5. Proceed with the installation\\n6. When finished, select `Continue Testing`, and it should bring you back to the\\n   Ubuntu Desktop environment\\n\\nDo not leave the live environment just yet.\\n\\n## Set up `crypttab`\\n\\n`crypttab` is used to decrypt the disk on boot.\\n\\n1. Open the terminal and find the UUID of the partition with LUKS\\n   ```bash\\n   sudo blkid /dev/nvme0n1p6\\n   ```\\n   Example output:\\n   ```\\n   /dev/nvme0n1p6: UUID=\\"abcdefgh-1234-5678-9012-abcdefghijklm\\" TYPE=\\"crypto_LUKS\\"\\n   ```\\n   I suggest writing the UUID down somewhere\\n2. Mount the drives and chroot into the mount:\\n\\n   ```bash\\n   mount /dev/mapper/ubuntu-vg-root /target\\n   mount /dev/nvme0n1p5 /target/boot\\n   for n in proc sys dev etc/resolv.conf; do mount --rbind /$n /target/$n; done\\n   chroot /target\\n\\n   mount -a\\n   ```\\n\\n3. Configure `/etc/crypttab`:\\n\\n   ```\\n   # <target name> <source device> <key file> <options>\\n   # options used:\\n   #     luks    - specifies that this is a LUKS encrypted device\\n   #     tries=0 - allows to re-enter password unlimited number of times\\n   #     discard - allows SSD TRIM command, WARNING: potential security risk (more: \\"man crypttab\\")\\n   #     loud    - display all warnings\\n   nvme0n1p6_crypt UUID=abcdefgh-1234-5678-9012-abcdefghijklm none luks,discard\\n   ```\\n\\n4. Apply the changes (still inside chroot)\\n   ```bash\\n   update-initramfs -k all -c\\n   ```\\n\\n## Reboot and some remaining issues\\n\\n### Blue screen MOK management\\n\\n1. When reboot, because of the secure boot, you will see a blue screen and ask\\n   to perform MOK management\\n2. Choose Enroll MOK, continue, yes\\n3. Input the password that you inputted on the step for software install during\\n   the installation for third party drivers\\n   - It won\'t show what you typed, trust that it\'s there\\n   - This is only a one time thing so no worries\\n   - Once successful you don\'t need the password anymore\\n\\n### Windows BitLocker Issue\\n\\nYou might need to input the BitLocker recovery key when booting into Windows.\\nFind your recovery key in where ever you saved (e.g. Microsoft account) and\\ninput it. This is also one time thing, so no worries.\\n\\nIf you have disabled BitLocker before to partition the disk, you will need to\\nre-enable it and encrypt the Windows partition again.\\n\\nTo encrypt again, you need to make sure you meet the pre-requisites to enable\\nBitLocker:\\n\\n- Check that the partition table is GPT\\n- BIOS is set to UEFI\\n- Secure boot is enabled\\n\\nGo to `System information` \u2192 scroll down and see device encryption support needs\\nto be `meets prerequisites`. If not, check the above again and maybe reboot and\\nsee.\\n\\nOnce the prerequisites are met, go to Settings \u2192 privacy & security \u2192 device\\nencryption and enable BitLocker.\\n\\nTo check the progress:\\n\\n- Open admin command prompt and input `manage-bde -status C:`\\n- If the status stuck, not updating, try `manage-bde -pause C:` and then\\n  `manage-bde -resume C:`\\n\\nWith BitLocker re-enabled, this means both Ubuntu and Windows have full disk\\nencryption and secure boot enabled!\\n\\n### Wrong timezone after dual boot\\n\\nYou might notice one of the OS show the wrong time before resyncing their time.\\nThis is because they store time into the computer hardware clock differently.\\nLinux assumes that the time on the hardware clock is stored in UTC and Windows\\nassumes it is local time. One solution is to ask Linux to store the hardware\\nclock as local time:\\n\\n```bash\\ntimedatectl set-local-rtc 1\\n```\\n\\n[Read more in this guide from It\'s Foss](https://itsfoss.com/wrong-time-dual-boot/)\\n\\n## References\\n\\n### About full disk encryption:\\n\\n- [How to Dual-Boot Ubuntu 20.04 (or 22.04) and Windows 10 (or 11) with Encryption | Mike Kasberg](https://www.mikekasberg.com/blog/2020/04/08/dual-boot-ubuntu-and-windows-with-encryption.html) -\\n  recommend reading\\n- [Dual boot with encryption nodes | GitHub Gist from @luispabon](https://gist.github.com/luispabon/db2c9e5f6cc73bb37812a19a40e137bc)\\n\\n### About secure boot:\\n\\n- [Can I enable secure boot again? | Reddit](https://www.reddit.com/r/linux4noobs/comments/osotp3/ubuntu_dual_boot_with_windows_10_can_i_enable/) -\\n  Ans: no\\n- [A Clean Install of Linux Ubuntu 20.04 (Lenovo UEFI BIOS with Secure Boot and MOK) | YouTube](https://youtu.be/GqJBniwj1Mg) -\\n  worth watching parts about the secure boot and MOK step\\n- [It is possible to dual boot Linux and Windows 10 with secure boot enabled? | Ask Ubuntu](https://askubuntu.com/questions/880240/it-is-possible-to-dual-boot-linux-and-windows-10-with-secure-boot-enabled) -\\n  Ans: yes\\n\\n### About partition and BitLocker:\\n\\n- [Windows Disk Management unable to shrink C: drive volume](https://answers.microsoft.com/en-us/windows/forum/all/windows-disk-management-unable-to-shrink-c-drive/217c3521-b254-4662-bac9-bc90dc633fab)\\n- [How can I resize BitLocker partition in Windows 10/11](https://www.diskpart.com/articles/resize-bitlocker-partition-windows-10-0725.html)\\n- [Dual Booting Ubuntu with Windows 10 Pro with BitLocker Encryption](https://itsfoss.com/dual-boot-ubuntu-windows-bitlocker/)\\n\\nThat\'s it and I hope you can set up dual boot without issues!"}]}}')}}]);