<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wiki.ethanppl.com/blog</id>
    <title>Ethan's Wiki Blog</title>
    <updated>2025-05-25T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wiki.ethanppl.com/blog"/>
    <subtitle>Ethan's Wiki Blog</subtitle>
    <icon>https://wiki.ethanppl.com/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[My $4/month self-hosted web server setup]]></title>
        <id>https://wiki.ethanppl.com/blog/2025/05/25/self-host</id>
        <link href="https://wiki.ethanppl.com/blog/2025/05/25/self-host"/>
        <updated>2025-05-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This blog documented my setup for self-hosting a web server. Hopefully this is]]></summary>
        <content type="html"><![CDATA[<p>This blog documented my setup for self-hosting a web server. Hopefully this is
helpful for others to get started with hosting your web server. I was intimated
by all the potential cost and complexity before, but after all, it was not that
complicated.</p>
<p>It starts from renting a virtual machine and setting the machine up, to running
my web servers in containers, setting DNS records, running Nginx and monitoring
tools. All cost me on average less than $4 a month. Including the cost of
renting my own domain, it is still less than $5 per month on average.</p>
<p>It gave me a lot of fun to tinker with things. It allows me to host more than 1
web server on the same machine using nginx. I would like to share the steps,
thought process and learnings in details.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="overview">Overview<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#overview" class="hash-link" aria-label="Direct link to Overview" title="Direct link to Overview">​</a></h2>
<p>Last year, I created <a href="https://playground.ethanppl.com/" target="_blank" rel="noopener noreferrer">my playground</a>. It is a
web server that power real time, turn-based multiplayer game. The major
difference it has with all the tools I built before was it needs a server.
Unlike this Wiki, the content and service it provides are not static. It cannot
be hosted as a static site on GitHub Pages for free. To synchronize and power
real time multiplayer, I need a server on the Internet that is always up that
clients can connect to.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-i-chose-self-hosting">Why I chose self-hosting<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#why-i-chose-self-hosting" class="hash-link" aria-label="Direct link to Why I chose self-hosting" title="Direct link to Why I chose self-hosting">​</a></h3>
<p>There are multiple ways to do this. With
<a href="https://en.wikipedia.org/wiki/Platform_as_a_service" target="_blank" rel="noopener noreferrer">platform as a service</a> or
similar cloud services model, I could just use the right platform to host. It
should be easier to set up and configure, with less overhead and initial cost.
However, because it is just a hobby project, the stakes are low. I think it is
worth to figure out how to self-host.</p>
<p>Self-hosting allows me to tinker with networking, containers, server management,
and more. By having a machine running, it also opens the possibility to host
more than 1 web services on it. I started with hosting
<a href="https://playground.ethanppl.com/" target="_blank" rel="noopener noreferrer">the playground server</a>, soon added my own
<a href="https://plausible.io/" target="_blank" rel="noopener noreferrer">plausible analytics server</a>, an error tracking server
called <a href="https://glitchtip.com/" target="_blank" rel="noopener noreferrer">glitchtip</a>, and more. All running on this small
machine in the data center. There is no additional cost for each new server I
add to the server.</p>
<p>The server with just 2 vCPUs and 4 GB of RAM, with 20 TB traffic included, is
able to power a lot of services. The server itself cost less than $4 a month.
Considering, Plausible cloud service cost $9 a month, and most cloud providers'
web services with much tinier machine still cost a few dollars a month.
Self-hosting is a great deal.</p>
<p>This guide includes my notes and thought process while researching and setting
up things. It started from purchasing my own domain. Then, researching and
deciding to rent a virtual machine from Hetzner, configure it and setting it up.
Running my web server in a container in the VM. All the configurations required
to route traffic to the web server and finally monitoring tools for the server.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="architecture-overview">Architecture Overview<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#architecture-overview" class="hash-link" aria-label="Direct link to Architecture Overview" title="Direct link to Architecture Overview">​</a></h3>
<p>Before I go over the setup step by step, it would be great to go over the major
components in the setup and some terminologies so that we are aligned.</p>
<p><img decoding="async" loading="lazy" alt="architecture" src="https://wiki.ethanppl.com/assets/images/architecture-546e0402b35561fc00c2c6692f84a92f.png" width="1415" height="485" class="img_ev3q"></p>
<p>When user request for <code>playground.ethanppl.com</code>, what happens is your computer
need to know where that is hosted. It sends a domain name system (DNS) query to
DNS servers to ask for the IP address for the <code>playground.ethanppl.com</code> domain.
Once it gets the IP address, it sends a request to this IP address at port 80 to
get the web page. This guide will go through how to configure and set up your
domain and DNS. For more about how the Internet work I suggest checking out
<a href="https://explained-from-first-principles.com/internet/" target="_blank" rel="noopener noreferrer">The Internet, Explained from First Principle</a>
or other resources in the <a href="https://wiki.ethanppl.com/computers/network/network">Computer Network Page</a> in
this Wiki.</p>
<p>From here, the definition of the "server" can get a bit confusing. There are
multiple web servers supporting multiple services that can be run on the same
server machine. It is like your computer can run different apps, process,
servers on the same machine. We can run multiple web servers on the same
machine.</p>
<p>Requests coming from the Internet reach our IP address. The computer listening
to these requests is the <em>server</em>. I hosted this server on
<a href="https://www.hetzner.com/cloud/" target="_blank" rel="noopener noreferrer">Hetzner</a>, a cloud provider providing cheap
virtual machines and the IP addresses. This virtual private server (VPS) is like
a normal computer that is accessible from the Internet. In this guide, I will
refer to this server as the virtual machine (VM), the server machine, or just
the Hetzner VPS. I will explain why I chose Hetzner and how to set it up below.</p>
<p>Within the server machine, all incoming requests go through
<em><a href="https://nginx.org/en/" target="_blank" rel="noopener noreferrer">nginx</a></em>, a reverse proxy running natively on the
virtual machine. A
<a href="https://www.cloudflare.com/en-gb/learning/cdn/glossary/reverse-proxy/" target="_blank" rel="noopener noreferrer">reverse proxy</a>
is like a server sitting in front of our real server, relaying messages between
the clients and the server. Nginx looks at what servers you are requesting, in
this case <code>playground.ethanppl.com</code>, and route this to the corresponding service
that are handling these requests. Say another request is going to
<code>plausible.ethanppl.com</code>, nginx will route this to a separate service. Nginx is
the magic that allow us to run multiple web services on the same server machine.
It is also responsible for supporting HTTP2, HTTP3 and HTTPS. All explained
below.</p>
<p>All the web services on the server are running in
<em><a href="https://www.docker.com/resources/what-container/" target="_blank" rel="noopener noreferrer">containers</a></em>. It provides an
isolated way to run these services without them intervening each other. The
containers are the actual "web servers" that are providing the service. I will
also explain how I ran the database that the playground web server use in a
container, and how to set up docker volumes and network for this local database.</p>
<p>It is OK if all the terminologies sounds a lot. I will explain in details below.
All you need to be aware of right now is the difference between the server
machine and the web servers. I will first talk about the server machine hosted
on Hetzner, then how to run containers in the server machine, and lastly
configure Nginx and wiring things up.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>Terminologies:</p><ul>
<li><strong>DNS</strong>: translates domain name to IP address</li>
<li><strong>Server machine</strong>:<!-- -->
<ul>
<li>A web server rent from Hetzner running in a data center in Finland</li>
<li>Also referenced as the Hetzner VPS, or the virtual machine</li>
</ul>
</li>
<li><strong>nginx</strong>:<!-- -->
<ul>
<li>A reverse proxy server in front of the real web server</li>
<li>Handle piping the traffic to the right server based on the domain requesting</li>
<li>Handle HTTPS, HTTP2 and HTTP3</li>
</ul>
</li>
<li><strong>Containers</strong>: the actual web servers</li>
</ul></div></div>
<p>This blog turns out to be longer than I initially thought. However, I do not
want this to be intimidating for people who want to try self-hosting. Instead, I
would like to write down all my thought process and things I learned along the
way to help anyone hesitate to start.</p>
<p>This document is structured as if you were following along self-hosting your own
Playground server. There are notes for some key steps and concepts. I wish this
document is something I could read beforehand, telling me self-hosting is not
that hard and not that expensive!</p>
<p>If you are ready, let's start from the first thing I did, getting a domain name.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="register-a-domain">Register a Domain<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#register-a-domain" class="hash-link" aria-label="Direct link to Register a Domain" title="Direct link to Register a Domain">​</a></h2>
<p>When I decided to self-host my server, the first thing I did is to purchase my
own <code>ethanppl.com</code> domain. If you have a domain, you can skip forward to
<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#renting-a-hetzner-vps">renting a Hetzner VPS</a>.</p>
<p>Registering a domain technically is not related to self-hosting. It is not
required to run a server. It is possible to directly connect to the server over
the Internet with IP address and port number. However, having a hostname is
easier to visit, share, or get a certificate for HTTPS.</p>
<p>There are many domain registrars. I got mine from
<a href="https://www.cloudflare.com/en-gb/products/registrar/" target="_blank" rel="noopener noreferrer">Cloudflare</a>. It is cheap
and easy to set up. I got my domain for 2 years with less than 20 USD.
Cloudflare provides free whois protection, DNSSEC, email routing, etc. by
default. I have heard that <a href="https://www.namecheap.com/" target="_blank" rel="noopener noreferrer">Namecheap</a> and
<a href="https://porkbun.com/" target="_blank" rel="noopener noreferrer">Porkbun</a> both works well with the developer community.
You can read
<a href="https://blog.pragmaticengineer.com/domain-registrars-which-developers-recommend/" target="_blank" rel="noopener noreferrer">this article from the Pragmatic Engineer</a>
for more.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="renting-a-hetzner-vps">Renting a Hetzner VPS<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#renting-a-hetzner-vps" class="hash-link" aria-label="Direct link to Renting a Hetzner VPS" title="Direct link to Renting a Hetzner VPS">​</a></h2>
<p>To self-host, you need a server. The server is just a computer that runs 24
hours and connected to the Internet.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="where-to-host">Where to host<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#where-to-host" class="hash-link" aria-label="Direct link to Where to host" title="Direct link to Where to host">​</a></h3>
<p>You could use a machine you have or use a cloud provider. The difference is
whether you manage the physical metal machine, networking, electricity and
operating system, or pay a cloud provider to handle that. I considered hosting
with a machine at home, but I chose to rent a VM from a cloud provider in the
end.</p>
<p>I have an old laptop sitting next to me unused, or I could buy a
<a href="https://www.raspberrypi.org/" target="_blank" rel="noopener noreferrer">Raspberry Pi</a>. The benefit is there will be no
ongoing cloud subscription fee to rent a VM. For a cheaper price, I get better
performance. It allows me to learn more, figure out more details and
understanding more on bare metal operating systems and servers. The latency for
me to connect to the service I host is also extremely low as it sits next to me.</p>
<p>One of the bigger hurdles to use a machine at home is to ensure a stable IP
address for this machine to be reachable over the Internet. But for most home
address, the IP address might be dynamic, or go through
<a href="https://en.wikipedia.org/wiki/Network_address_translation" target="_blank" rel="noopener noreferrer">network address translation</a>
which makes it impossible to have a stable IP address. One possible solution is
<a href="https://github.com/ddclient/ddclient" target="_blank" rel="noopener noreferrer">ddclient</a>, which periodically update the
DNS record for you with the dynamically changing IP address. It works with all
major DNS and domain registrars including Cloudflare, Namecheap and Porkbun.</p>
<p>Also, there are greater risk in terms of privacy and security concerns. If I
messed up, I am not exposing a VM in a datacenter but a computer in my home
network. It is also going to consume electricity and network bandwidth of my
home network. In the end, considering the risk and effort required, I decided to
rent a cloud VM.</p>
<p>Out of all the options I can find online, the cheapest is renting a
<a href="https://www.hetzner.com/cloud/" target="_blank" rel="noopener noreferrer">Hetzner VM</a>. I chose the cheapest model I can
find, CX22 machine in Helsinki, Finland. It provides 2 vCPUs, 4 GB of RAM, 40 GB
of storage and 20 TB of bandwidth per month. The server and a IPv4 address
combined cost €3.79 each month. It is cheaper compare to all other providers
with the same specs, and it is more than what I need. With this, there are a lot
I can do with it.</p>
<p>The biggest drawback for me is it is hosted in Finland, the roundtrip from Hong
Kong to Finland takes time. I searched online on the typical latency and also
tested it after rending, it is around 0.1 to 0.3 seconds. It is definitely
noticeable, but not deal-breaking for me considering the price. Hetzner started
to offer servers in Singapore, but with 2 to 3 times the price. I chose Finland
instead.</p>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>If you would like to try Hetzner, here is my
<a href="https://hetzner.cloud/?ref=YMRI7xo3b2af" target="_blank" rel="noopener noreferrer">referral link for hetzner</a>. You get
$20 credits for free on sign up, while I get $10 after you spent $10. If you
have the same setup as me, this should get yours running 5 months for free.</p></div></div>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>Renting on Hetzner instead of local machine because:</p><ul>
<li>Still very cheap</li>
<li>No need to handle problems with dynamic IP address</li>
<li>Lower privacy and security risk</li>
<li>Hardware maintenance is taken care by Hetzner</li>
<li>Electricity and network cost is also handled by Hetzner</li>
</ul></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="hetzner-server-setup">Hetzner Server Setup<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#hetzner-server-setup" class="hash-link" aria-label="Direct link to Hetzner Server Setup" title="Direct link to Hetzner Server Setup">​</a></h3>
<p>If you decided to host on another cloud machine, similar set of settings should
apply. Make sure you can connect to it over SSH, and it is accessible over the
Internet. After that, you may skip forward to
<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#ssh-connection">SSH configuration tips</a> and
<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#running-the-web-server">running the web server in Docker</a>.</p>
<p>To rent a Hetzner VPS, create an account in
<a href="https://hetzner.cloud/?ref=YMRI7xo3b2af" target="_blank" rel="noopener noreferrer">Hetzner Cloud</a>. There might be a few
verifications steps involved to prevent abuse. Once the account is active, you
can rent a server.
<a href="https://docs.hetzner.com/cloud/servers/getting-started/creating-a-server" target="_blank" rel="noopener noreferrer">Hetzner has a comprehensive guide on how to create a server</a>.</p>
<p>I tried to keep my server specs closer to what I have on my laptop. I tried an
Arm chip at first, but there were minor inconveniences I faced because of
slightly different versions, API or support on various stuff. It is frustrating
because I know the issue, but I cannot reproduce and test the fix locally. In
the end, I went back to Amd x86 chip, same as my laptop used for development.</p>
<p>My configuration are:</p>
<ul>
<li>Location: Helsinki<!-- -->
<ul>
<li>After considering latency and pricing, this works for me</li>
</ul>
</li>
<li>Image: Ubuntu<!-- -->
<ul>
<li>Just because <a href="https://wiki.ethanppl.com/blog/2024/02/29/dual-boot-guide">I use Ubuntu locally</a> as well</li>
</ul>
</li>
<li>Typed: Shared CPU x86 (Intel/AMD)<!-- -->
<ul>
<li>I am not doing intensive or sensitive stuff, shared CPU is fine</li>
<li>I chose x86 because I am running on an x86 laptop as well</li>
</ul>
</li>
<li>Networking: IPv4 and IPv6<!-- -->
<ul>
<li>IPv4: My network is only IPv4, saves me a lot of hassle by having a IPv4</li>
<li>IPv6: It is free of charge so why not</li>
</ul>
</li>
<li>SSH keys: Create a pair and save the keys locally, use later to SSH into the
machine</li>
<li>Volumes: No, I did not create one.</li>
<li>Firewall: No, I did not create one.</li>
<li>Backups: No, I did not enable it.</li>
<li>Placement groups: No, irrelevant as I only have 1 server</li>
<li>Labels: Whatever you like, I did not add any as I only have 1 server</li>
<li>Cloud config: See below</li>
</ul>
<p>Cloud configuration is a set initialization configuration for newly created
servers.
<a href="https://community.hetzner.com/tutorials/basic-cloud-config" target="_blank" rel="noopener noreferrer">Hetzner Community has a guide for it</a>
and I used a very similar config.</p>
<p>The few important things it set up are:</p>
<ul>
<li><code>fail2ban</code>: To prevent brute force attacks on the SSH authentication</li>
<li><code>ufw</code>: firewall to only allow required ports</li>
<li>Harden SSH configs like deactivating password authentication</li>
</ul>
<p>I suggest read the Hetzner guide and the manual for these programs. It is worth
to understand the suggested security practice. Tweak it according to what you
would like. Remember to change the user's name to your name.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="ssh-connection">SSH Connection<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#ssh-connection" class="hash-link" aria-label="Direct link to SSH Connection" title="Direct link to SSH Connection">​</a></h3>
<p>To connect to the server, you need to
<a href="https://en.wikipedia.org/wiki/Secure_Shell" target="_blank" rel="noopener noreferrer">SSH</a> into the machine. SSH provides
a way to connect your computer to the server computer with the terminal. It is
like directly accessing the terminal of the server over the Internet, securely.
<a href="https://docs.hetzner.com/cloud/servers/getting-started/connecting-to-the-server" target="_blank" rel="noopener noreferrer">Hetzner documentation has a guide as well</a>.</p>
<p>To connect to a server, you run an ssh command:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ssh -i /path/to/private_key username@&lt;ip_address&gt;</span><br></span></code></pre></div></div>
<ul>
<li>The <code>-i</code> option for the identity file, provide the ssh private key file</li>
<li>The username is the name set in the cloud init configuration above</li>
<li>The IP address is the address you rent, shown on the Hetzner dashboard</li>
</ul>
<p>If your cloud init config changed the port to <code>2222</code>, then</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">ssh -i /path/to/private_key -p 2222 username@&lt;ip_address&gt;</span><br></span></code></pre></div></div>
<p>For the first time, you will most likely be prompted if you want to connect to
the host. By default, confirming will save this host to <code>~/.ssh/known_hosts</code>,
and you will not see this warning again. Once successfully ran the command, you
should see output like this:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Welcome to Ubuntu 24.04 LTS (GNU/Linux 6.8.0-40-generic x86_64)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * Documentation:  https://help.ubuntu.com</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * Management:     https://landscape.canonical.com</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> * Support:        https://ubuntu.com/pro</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> System information as of Sat Apr 19 03:35:28 PM UTC 2025</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  System load:  0.37               Processes:             223</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Usage of /:   58.7% of 37.23GB   Users logged in:       0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Memory usage: 55%                IPv4 address for eth0: 100.100.100.100</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  Swap usage:   0%                 IPv6 address for eth0: aaaa:bbbb:cccc:dddd::1</span><br></span></code></pre></div></div>
<p>Running the command <code>exit</code> or pressing <code>Ctrl + D</code> will close the connection.</p>
<p>There is one additional step I did to improve the workflow. Instead of typing
out the command and IP address out every time, you can set up an SSH config in
<code>~/.ssh/config</code>. Here is my config for my server:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">Host playground</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  HostName 100.100.100.100</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  User ethan</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  IdentityFile ~/.ssh/hetzner_personal</span><br></span></code></pre></div></div>
<ul>
<li>The host <code>playground</code> can be any name you choose.</li>
<li>Hostname is the IP address of your server machine</li>
<li>User is the login username</li>
<li>Identity file is the file to the private key</li>
</ul>
<p>With this configuration saved, connecting to the server is simply running
<code>ssh playground</code>.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>Set up server</p><ul>
<li>Choose suitable architecture and OS</li>
<li>Basic firewall and SSH configurations for security measures</li>
<li>Create an SSH config in <code>~/.ssh/config</code> locally for easier access</li>
</ul></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="running-the-web-server">Running the Web Server<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#running-the-web-server" class="hash-link" aria-label="Direct link to Running the Web Server" title="Direct link to Running the Web Server">​</a></h2>
<p>With the server machine all set up, next is to run the playground web server and
the database on this machine. I chose running the app and the database in docker
for easier management. If you run it in other ways, you can skip this session,
make the app run on the server, and skip ahead to the
<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#configuring-dns">configuring DNS</a>,
<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#configure-firewall-ufw">configuring firewall with <code>ufw</code></a>, and
<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#configure-reverse-proxy-server-nginx">configuring reverse proxy server <code>nginx</code></a>
section.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="why-docker">Why Docker?<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#why-docker" class="hash-link" aria-label="Direct link to Why Docker?" title="Direct link to Why Docker?">​</a></h3>
<p>There are several ways to run a server. You may run it as a process on the
machine directly. This should be the simplest to get started. You can even run
the server the same way as how you are running it locally. However, it will get
harder when managing versions of the apps and getting the runtime right. For
example, my playground is an elixir server. If I want to update the Elixir or
Erlang version, I need to make sure the same version is properly installed on
the server machine as well. If I have another web server running on the same
machine that needs another version of Elixir then I need to install some other
virtual environment or shimming tools on the server as well. And if I ever want
to have more than one machine running the same app, then I need to update every
single machine to the same versions.</p>
<p>I am probably still far from all these scaling issues, but there is nothing
stopping me from preemptively think about scaling issues. It gets harder to
manage when more things are involved, if there is no isolation. To solve all the
above issues, the most common solution is running apps in
<a href="https://www.docker.com/resources/what-container/" target="_blank" rel="noopener noreferrer">containers</a>.</p>
<p>If you do not know what containers are, you can think of them as a box that
provide a mini computer environment for the things running inside. And this box
is completely isolated from other boxes or the world outside the box. The box is
lightweight, which means it is easy to create, start, stop or destroy, with
lower overhead compare to virtual machines. Furthermore, they are "standardized"
like shipping containers. The same containers can be run in different
environment (Windows, Mac, Linux, etc.) with the docker engine installed. Any
code in any tech stack can be run within a container, just like any things can
be shipped on any cargo vessels, as long as they fit in the standardized
shipping containers. It solves the issue where an app need to build a native
version for every runtime environment.</p>
<p>The overall flow for me to deploy playground right now is not very optimized,
but works for me. Plus, I do not deploy frequently. I will go through them in
details below, but this is the higher level:</p>
<ol>
<li>Push code to GitHub and tag the commit I want to deploy</li>
<li>Pull code from the Hetzner VPS and checkout the tag</li>
<li>Build a new image in the VPS</li>
<li>Stop and then remove the old container</li>
<li>Start the new container</li>
</ol>
<p>There are other tools and services to allow easier deployment, like
<a href="https://coolify.io/" target="_blank" rel="noopener noreferrer">Coolify</a>. You may find these useful if you are not
comfortable working with docker and nginx directly, or want to make the process
more optimize.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="pull-code">Pull Code<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#pull-code" class="hash-link" aria-label="Direct link to Pull Code" title="Direct link to Pull Code">​</a></h3>
<p>First, I need to make sure my Hetzner VPS and my local machine have the same
code. And the easiest way for me to copy them over is to push that code to
GitHub, then pull the same commit from GitHub.</p>
<p>I chose not to use a docker repository, where I would need to first push a
docker image for the new version, and then pull that image and run it. I already
have a code repository. I can directly build the docker image with the source
code in the server machine. Because it is just docker build, I do not need any
runtime and binary either. I only need to SSH into the VPS and run a script.</p>
<p>If you are able to push code to GitHub, I think you know how to pull code from
GitHub. The only difference, maybe, is to get familiar with the git CLI, if you
are used to Git with a GUI. The CLI is not that complicate for basic pull and
checkout. I have some more resources in the
<a href="https://wiki.ethanppl.com/computers/programming/git" target="_blank" rel="noopener noreferrer">Git page of this Wiki</a>.
<a href="https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent" target="_blank" rel="noopener noreferrer">Generate a new pair of SSH keys</a>
in the Hetzner VM and add it to your GitHub account should make every thing
works.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="building-the-server-image">Building the Server Image<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#building-the-server-image" class="hash-link" aria-label="Direct link to Building the Server Image" title="Direct link to Building the Server Image">​</a></h3>
<p>With Git set up, next is to install docker. Docker allow us to build the images
and run those images in containers. There are detailed documentation on how to
install docker, and
<a href="https://docs.docker.com/engine/install/ubuntu/" target="_blank" rel="noopener noreferrer">here is the one for Ubuntu</a>.
One thing to pay attention for Linux is there are
<a href="https://docs.docker.com/engine/install/linux-postinstall/" target="_blank" rel="noopener noreferrer">post-installation steps</a>
to manage user roles and permissions.</p>
<p>To run the app in a container, we need to build an image for it to run on. A
docker image contains the code and data needed for the container to run. The
instructions for building a docker image are specified in a
<a href="https://docs.docker.com/reference/dockerfile/" target="_blank" rel="noopener noreferrer">docker file</a>.</p>
<p>I will not go into the specific details of setting up the Elixir build
environment and run time in this post, that will most likely be different from
what you need if you are not running an Elixir app. You will need to write your
own docker file or copy some templates for your tech stack. You can find the
<a href="https://github.com/ethanppl/playground/blob/main/Dockerfile" target="_blank" rel="noopener noreferrer">docker file for my playground app in the GitHub repository</a>
for reference.</p>
<p>Docker image can be based on top of other docker images. For example,
<a href="https://hub.docker.com/_/alpine/" target="_blank" rel="noopener noreferrer">alpine</a> is a lightweight Linux image to be
based on. Which image to use depends on what apps you are running, there should
be plenty of guides on how to build a docker image for the tech stack that you
are running on. For the playground app, since we are running an Elixir app, the
base image is based on the
<a href="https://hub.docker.com/_/elixir" target="_blank" rel="noopener noreferrer">elixir docker image</a>.</p>
<p>To test the docker file, you can build it locally and run the container locally
to see if it works as expected. This is also why I set up my server environment
closer to my local machine. It is easier to build and debug the image locally,
while having a higher likelihood all should still work on the server machine.</p>
<p>So, build the docker image at the root of the repository, where the <code>Dockerfile</code>
is. I like to tag the output image (<code>-t playground</code>), so it is easier to
reference later:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker buildx build -t playground .</span><br></span></code></pre></div></div>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>Building a docker image for the web server</p><ul>
<li>Docker containers for isolation and easier deployment</li>
<li>Write and test building the docker image locally</li>
<li>Pull code from git and build the container image in the server machine</li>
</ul></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="running-the-postgres-container">Running the Postgres Container<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#running-the-postgres-container" class="hash-link" aria-label="Direct link to Running the Postgres Container" title="Direct link to Running the Postgres Container">​</a></h3>
<p>My server depends on a Postgres database. I ran this database also inside a
container, with docker volume and custom bridge network set up. If you do not
need a database, you may skip this section.</p>
<p>Again, I can run the Postgres database natively or as a docker container. I
chose running it in a docker container for the benefit of isolation. I knew I
will run other services on the same machine that also need separate Postgres
databases. Having them isolated make things easier to control.</p>
<p>Docker volumes and networking are the two important things to consider when
running a database in a container.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="docker-volume">Docker Volume<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#docker-volume" class="hash-link" aria-label="Direct link to Docker Volume" title="Direct link to Docker Volume">​</a></h4>
<p>First, when the database container is stopped or destroyed, we want to persist
its data. Otherwise, it's not a database.
<a href="https://docs.docker.com/engine/storage/volumes/" target="_blank" rel="noopener noreferrer">Docker volume</a> is a great way
to do that. Volumes are managed by docker and the data will be preserved even
the container is stopped or destroyed. Volume is the preferred way to store and
retrieve data in a container.</p>
<p>First, create a volume to be used later:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker volume create pgdata</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="docker-network">Docker Network<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#docker-network" class="hash-link" aria-label="Direct link to Docker Network" title="Direct link to Docker Network">​</a></h4>
<p>Second, as mentioned, containers are isolated. The playground app running in a
container by default cannot connect to the Postgres database running in another
container. There are generally two approaches to solve this issue, expose the
container to the host network or create a user-defined
<a href="https://docs.docker.com/engine/network/" target="_blank" rel="noopener noreferrer">docker network</a> to connect the two
containers.</p>
<p>Exposing to the host network means the container will share the host's network.
For example, if the Postgres container is exposing the 5432 port to the host
network, inside the machine, accessing <code>localhost:5432</code> will be the docker
container. The advantage is this is easier to set up, just add the
<code>--network=host</code> flag, but then there is no isolation. Generally, any process
that can access localhost will be able to access the localhost will be able to
access the container. It is also impossible for two different Postgres
containers to share the same localhost 5432 port.</p>
<p>On the other hand, docker allows creating user-defined network. The default
network driver is called
<a href="https://docs.docker.com/engine/network/drivers/bridge/" target="_blank" rel="noopener noreferrer">bridge network</a>. In
simple terms, defining a custom bridge network creates a bridge between the
containers to communicate with each other. This solves what we need while
maintaining the same isolation. Containers can also be attached and detached
from the bridge networks on the fly.</p>
<p>To create a network to be used later:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker network create playgroundNetwork</span><br></span></code></pre></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="running-the-database">Running the Database<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#running-the-database" class="hash-link" aria-label="Direct link to Running the Database" title="Direct link to Running the Database">​</a></h4>
<p>It takes one line to run the Postgres container</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker run</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  --name postgres</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  --env=POSTGRES_PASSWORD=ReplaceMe</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  --env=POSTGRES_DB=playground_engine</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  -v pgdata:/var/lib/postgresql/data</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  -p 5432:5432</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  -d</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  postgres</span><br></span></code></pre></div></div>
<ul>
<li>The <a href="https://docs.docker.com/reference/cli/docker/container/run/#name" target="_blank" rel="noopener noreferrer">name</a>
of the container will be <code>postgres</code></li>
<li>The two
<a href="https://docs.docker.com/reference/cli/docker/container/run/#env" target="_blank" rel="noopener noreferrer">ENV variables</a>
<ul>
<li>The password for the superuser <code>postgres</code></li>
<li>The default database name</li>
<li><a href="https://hub.docker.com/_/postgres/" target="_blank" rel="noopener noreferrer">There are more ENV variables available to configure</a></li>
</ul>
</li>
<li>Use the <code>pgdata</code> volume created earlier and mount that to the
<code>/var/lib/postgresql/data</code> path inside the container</li>
<li>Expose 5432 port to the network</li>
<li><code>-d</code> to
<a href="https://docs.docker.com/reference/cli/docker/container/run/#detach" target="_blank" rel="noopener noreferrer">detach</a>
the container process from the terminal window, otherwise closing the terminal
will stop the container</li>
<li>And finally <code>postgres</code> is the name of the image, which
<a href="https://hub.docker.com/_/postgres/" target="_blank" rel="noopener noreferrer">you can find on docker hub</a></li>
</ul>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="verify-the-database-is-running">Verify the Database is Running<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#verify-the-database-is-running" class="hash-link" aria-label="Direct link to Verify the Database is Running" title="Direct link to Verify the Database is Running">​</a></h4>
<p>Once connected, we can use <code>psql</code> to verify the database is up and running.</p>
<p>Most likely, the base Ubuntu image does not come with <code>psql</code>, so it needs to be
installed:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo apt install -y postgresql-client-common postgresql-client-16</span><br></span></code></pre></div></div>
<p>Then connecting to it:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">psql postgresql://postgres@localhost:5432/playground_engine</span><br></span></code></pre></div></div>
<p>You will be prompted to input your password. Input the same password set above
in the <code>POSTGRES_PASSWORD</code> ENV variable. If connected successfully, it means the
database is running well.</p>
<p>In my
<a href="https://github.com/ethanppl/playground/blob/main/DEPLOYMENT.md" target="_blank" rel="noopener noreferrer">playground deployment notes</a>,
you will find lines where I set up DB roles and privileges. They are just
practices. Normally for a side project database there is no such need either. I
mainly referenced
<a href="https://rlopzc.com/posts/securing-your-postgresql-db-with-roles--privileges/" target="_blank" rel="noopener noreferrer">Securing your PostgreSQL DB with Roles &amp; Privileges</a>
to build these commands for creating roles and granting privileges.</p>
<p>With all that set, exit the <code>psql</code> session and back to the host machine, we add
the Postgres container to the network created earlier:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker network connect playgroundNetwork postgres</span><br></span></code></pre></div></div>
<p>Then, inspect the network to get the IP address of the Postgres container.</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker network inspect playgroundNetwork</span><br></span></code></pre></div></div>
<p>There should be something like 127.18.0.2. Save it. It will be useful later to
connect the playground container to the database.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="running-the-server-container">Running the Server Container<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#running-the-server-container" class="hash-link" aria-label="Direct link to Running the Server Container" title="Direct link to Running the Server Container">​</a></h3>
<p>Then, we can deploy the Playground container. There are playground specific
commands that is used because of Elixir Phoenix framework. Your server with a
different tech stack will most likely require different ENVs. For example,
Phoenix framework provide a
<a href="https://hexdocs.pm/phoenix/deployment.html" target="_blank" rel="noopener noreferrer">deployment guide</a>. You may be able
to find similar documentation.</p>
<p>For playground, this docker run command is used:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker run --name playground \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  --network=playgroundNetwork \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  --env=DATABASE_URL="postgresql://playground_backend:password@172.18.0.2:5432/playground_engine" \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  --env=MIGRATION_DATABASE_URL="postgresql://playground_migrations:password@172.18.0.2:5432/playground_engine" \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  --env=SECRET_KEY_BASE="secret" \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  --env=PHX_HOST="playground.ethanppl.com" \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  --env=ENV="production" \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  --env=SENTRY_DSN="https://sentry.ethanppl.com" \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  -p 4000:4000 \</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  -d</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  playground</span><br></span></code></pre></div></div>
<ul>
<li>Name this container as <code>playground</code></li>
<li>The network is the <code>playgroundNetwork</code> created earlier</li>
<li>Change the database role, password, IP address, and database name accordingly</li>
<li>I have a separate role and user for schema migration, so a different
<code>MIGRATION_DATABASE_URL</code></li>
<li>Set the <code>SECRET_KEY_BASE</code> to a secret generated from <code>mix phx.gen.secret</code></li>
<li>Set the <code>PHX_HOST</code> to the domain name being used</li>
<li>Set the <code>ENV</code> to production</li>
<li>The <code>SENTRY_DSN</code> is optional to track errors</li>
<li>Expose port 4000</li>
<li><code>-d</code> to detach the process</li>
<li>Run the <code>playground</code> image</li>
</ul>
<p>Once ran, you should be able to confirm the container is running with</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker ps</span><br></span></code></pre></div></div>
<p>You should be able to see the playground container is up and running.</p>
<p>Check the logs in the container to confirm it can connect to the database:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">docker logs playground</span><br></span></code></pre></div></div>
<p>If the app cannot connect to the database, double-check the IP address and port.
As a tip, you can spin up a small container with the
<a href="https://hub.docker.com/_/alpine/" target="_blank" rel="noopener noreferrer"><code>alpine</code> image</a>, add this small container to
the same network with the database, and you can use
<a href="https://docs.docker.com/reference/cli/docker/container/exec/" target="_blank" rel="noopener noreferrer"><code>docker exec</code></a> to
debug and see if it can connect to the database in the network. If it works,
then the database and docker network is working, it's the configuration or the
playground server problem. If it does not, then maybe the database is not
running, or the docker bridge network is not working.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>Getting everything running in docker:</p><ul>
<li>Also run the Postgres database in container</li>
<li>Use docker volume to persist the database storage</li>
<li>Use docker network to allow connections between the web server container and
the database container</li>
<li>Run the container with the right environment variables</li>
</ul></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="configuring-dns">Configuring DNS<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#configuring-dns" class="hash-link" aria-label="Direct link to Configuring DNS" title="Direct link to Configuring DNS">​</a></h2>
<p>Domain name system (DNS) allows anyone on the Internet to use
<code>playground.ethanppl.com</code> to find the IP address of the server hosting it, and
route request there.</p>
<p>I used Cloudflare to purchase my <code>ethanppl.com</code> domain, so logically I use their
DNS service. Their DNS service is free of charge.</p>
<p>To point <code>playground.ethanppl.com</code> to the Hetzner VPS, we will need to set up an
<code>A</code> record for the IPv4 address and an <code>AAAA</code> record for the IPv6 address. The
name of both records is <code>playground</code>. The content is the IPv4 and IPv6 address,
respectively. I set the proxy status to true for both, but false also works.
Keep the time to live (TTL) as auto, which by default is 5 minutes.</p>
<p>If proxy is enabled, Cloudflare will expose their server IP address, and
internally route traffic to the Hetzner VPS. It automatically offers some
optimization, caching and protection. Read more in
<a href="https://developers.cloudflare.com/dns/proxy-status/" target="_blank" rel="noopener noreferrer">Cloudflare documentation</a>.</p>
<p><img decoding="async" loading="lazy" alt="Cloudflare DNS" src="https://wiki.ethanppl.com/assets/images/cloudflare-dns-58058872de1e78e06b4ce83cfcf9f880.png" width="1284" height="387" class="img_ev3q"></p>
<p>Later, we will require HTTPS for the domain. If proxy is enabled, we need to
change the encryption mode from "Flexible" to "Full" or "Full (Strict)" in the
SSL/TLS page. By default, Cloudflare use "Flexible" mode which send request in
HTTP. If the server automatically redirects HTTP request to HTTPS requests, and
Cloudflare forward that request as HTTP, creating an infinite redirect loop.
Change the encryption mode so that Cloudflare send request as HTTPS. Read more
about this problem in
<a href="https://developers.cloudflare.com/ssl/troubleshooting/too-many-redirects/#flexible-encryption-mode" target="_blank" rel="noopener noreferrer">Cloudflare documentation</a>.</p>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>DNS:</p><ul>
<li><code>A</code> record for IPv4 and <code>AAAA</code> for IPv6</li>
<li>If proxy with Cloudflare and requiring HTTPS later, change encryption mode in
Cloudflare to "Full" or "Full (Strict)"</li>
</ul></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="configure-firewall-ufw">Configure firewall (<code>ufw</code>)<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#configure-firewall-ufw" class="hash-link" aria-label="Direct link to configure-firewall-ufw" title="Direct link to configure-firewall-ufw">​</a></h2>
<p>With DNS set up, we can configure the server to listen to the traffic from the
Internet.</p>
<p>Check the firewall setting in <code>ufw</code> to make sure our app can listen to web
server traffic.</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo ufw status</span><br></span></code></pre></div></div>
<p>Some of the commands that might be helpful</p>
<ul>
<li><code>sudo ufw show verbose</code>: show config</li>
<li><code>sudo ufw status verbose</code>: show status</li>
<li><code>sudo ufw enable</code>: enable ufw</li>
<li><code>sudo ufw default deny incoming</code>: by default disallow all incoming traffic
from the Internet to the machine</li>
<li><code>sudo ufw default allow outgoing</code>: by default allow all outgoing traffic from
the machine to the Internet</li>
<li><code>sudo ufw allow OpenSSH</code>: allow SSH, <strong>this is important</strong>, otherwise will not
be able to SSH in</li>
<li><code>sudo ufw allow http</code>: allow HTTP</li>
<li><code>sudo ufw allow https</code>: allow HTTPS</li>
<li><code>sudo ufw allow in on docker0 from 192.168.1.0/24</code>: open ufw to docker for
local network</li>
<li><code>sudo ufw allow in on docker0 from 10.8.0.0/24</code>: open ufw to docker for local
network</li>
<li><code>sudo ufw allow in on docker0 from 172.20.0.0/16</code>: open ufw to docker for
local docker subnet</li>
<li><code>sudo ufw allow 51820/udp</code>: allow UDP on port 51820 (this is not useful for
playground but for the wireguard server I have)</li>
</ul>
<p>Here is the configuration I have</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">To                         Action      From</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">--                         ------      ----</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">OpenSSH                    ALLOW       Anywhere</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">80/tcp                     ALLOW       Anywhere</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">443                        ALLOW       Anywhere</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Anywhere on docker0        ALLOW       192.168.1.0/24</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Anywhere on docker0        ALLOW       10.8.0.0/24</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Anywhere on docker0        ALLOW       172.20.0.0/16</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">51820/udp                  ALLOW       Anywhere</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">OpenSSH (v6)               ALLOW       Anywhere (v6)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">80/tcp (v6)                ALLOW       Anywhere (v6)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">443 (v6)                   ALLOW       Anywhere (v6)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">51820/udp (v6)             ALLOW       Anywhere (v6)</span><br></span></code></pre></div></div>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>Firewall</p><ul>
<li>Allow SSH and HTTP connections</li>
<li>Disallow traffic into other ports</li>
</ul></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="configure-reverse-proxy-server-nginx">Configure reverse proxy server (<code>nginx</code>)<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#configure-reverse-proxy-server-nginx" class="hash-link" aria-label="Direct link to configure-reverse-proxy-server-nginx" title="Direct link to configure-reverse-proxy-server-nginx">​</a></h2>
<p>Nginx is a lightweight server running on the machine. It makes it easy to host
multiple domains on the same server. It can route the incoming traffic from the
Internet to the right server running on the machine based on the domain name.
For example, anyone on the internet trying to talk to <code>playground.ethanppl.com</code>
will be routed to the docker container running at port <code>4000</code> locally.</p>
<p>There are a lot more features supported by nginx, you may explore them on
<a href="https://nginx.org/en/docs/" target="_blank" rel="noopener noreferrer">their documentation</a>. The first thing is to get it
up and running.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="basics">Basics<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#basics" class="hash-link" aria-label="Direct link to Basics" title="Direct link to Basics">​</a></h3>
<p>Install nginx first.
<a href="https://nginx.org/en/linux_packages.html#Ubuntu" target="_blank" rel="noopener noreferrer">Here is the doc for installing on Ubuntu</a>.</p>
<p>Start the nginx server:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo systemctl start nginx</span><br></span></code></pre></div></div>
<p>The configurations are stored in the <code>/etc/nginx</code> directory.</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">cd /etc/nginx</span><br></span></code></pre></div></div>
<p>You should find a <code>/etc/nginx/nginx.conf</code> file with some default configurations.</p>
<p>You may add new configurations in the <code>nginx.conf</code> file directly to test. But
for better organization, I find it better to create a separate config file for
each server and include them in the main <code>nginx.conf</code>. For me, the default
configuration already includes a line of <code>include /etc/nginx/conf.d/*.conf;</code> in
the <code>http</code> block. Adding a new <code>*.conf</code> file inside the <code>/etc/nginx/conf.d</code>
directory will work.</p>
<p>Create a new file <code>playground.conf</code> file in <code>/etc/nginx/conf.d</code>. The file name
does not matter, you can change it however you want.</p>
<p>Add the following config:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">server {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   listen 80;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   # Change this</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   server_name playground.ethanppl.com;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   location / {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      proxy_pass http://localhost:4000;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      proxy_ssl_server_name on;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      # For web socket connections</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      proxy_http_version 1.1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      proxy_set_header Upgrade $http_upgrade;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      proxy_set_header Connection "Upgrade";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>Change the <code>server_name</code> directive to the domain name of your web server. The
<code>server_name</code> directive is what nginx use to determine where to route the
traffic. In the above configuration, anything requesting to
<code>playground.ethanppl.com</code> will go to <code>localhost:4000</code>.</p>
<p>If you are running the playground server, or anything requires web socket, the
three lines for setting header and connection upgrade is required. It allows
upgrading an HTTP connection to a WebSocket connection. Read more about it in
<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Upgrade" target="_blank" rel="noopener noreferrer">MDN docs</a>
and explanation on setting up
<a href="https://nginx.org/en/docs/http/websocket.html" target="_blank" rel="noopener noreferrer">WebSocket proxying in nginx</a>.</p>
<p>If your site contains requirements for other communication protocol, worth
checking nginx documentation to see if there are specific configurations needed.
It is also a good way to learn how protocols run behind the scenes and what are
involved underlying the connections.</p>
<p>Then, test that the nginx configurations are valid.</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo nginx -t</span><br></span></code></pre></div></div>
<p>If all goes well, you should see the following lines being printed:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nginx: configuration file /etc/nginx/nginx.conf test is successful</span><br></span></code></pre></div></div>
<p>Otherwise, follow the instructions printed to fix the configuration. It should
tell you where are the invalid value on which directive.</p>
<p>Once all good, reload the nginx server:</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo nginx -s reload</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="https">HTTPS<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#https" class="hash-link" aria-label="Direct link to HTTPS" title="Direct link to HTTPS">​</a></h3>
<p>HTTPS is almost compulsory nowadays. Some default browser settings would prevent
users from accessing a site without HTTPS. I would like to share my site with
people without them clicking "Proceed (unsafe)". Able to set up HTTPS for
self-hosted site is a must for me.</p>
<p>Fortunately, there are free service providing signing and issuing certificate
for HTTPS. <a href="https://letsencrypt.org/" target="_blank" rel="noopener noreferrer">Let's Encrypt</a> is a free certificate
authority service by a nonprofit organization. In fact, some major static site
hosting on cloud providers like Render all uses Let's Encrypt behind the scene
to provide their automated SSL certificates.</p>
<p>Setting up the certificates are pretty easy.
<a href="https://certbot.eff.org/instructions?ws=nginx&amp;os=ubuntufocal" target="_blank" rel="noopener noreferrer">Here is the guide</a>
for using nginx on Ubuntu with Certbot. <a href="https://certbot.eff.org/" target="_blank" rel="noopener noreferrer">Certbot</a> can
get free certificates and set the corresponding nginx configurations
automatically.</p>
<p>For other platforms and setup, check
<a href="https://letsencrypt.org/getting-started/" target="_blank" rel="noopener noreferrer">Let's Encrypt Getting Started documentation</a>
and <a href="https://certbot.eff.org/pages/help" target="_blank" rel="noopener noreferrer">Certbot help page</a>.</p>
<p>Follow the instructions to install snap and use snap to install certbot. Run
certbot and allow it to edit the nginx configurations directly.</p>
<div class="language-sh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-sh codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo certbot --nginx</span><br></span></code></pre></div></div>
<p>It will automatically find all the domains without certificates, create a
certificate and update the nginx configuration accordingly. Certbot provides a
<code>certonly</code> option to let you make the nginx configurations by hand. But in my
experience, the bot is good, and it does not mess up the nginx configurations.</p>
<p>Test that the configurations are all good: <code>sudo nginx -t</code>. And reload the
configurations again, <code>sudo nginx -s reload</code>.</p>
<p>Now you should be able to connect to the site with HTTPS!</p>
<p>If you inspect the configuration file, you will see that lines marked with
<code># managed by Certbot</code>. It added port 443 for SSL connection, added the
<code>ssl_certificate</code> directive and some related configurations. It also added an
automatic redirect from HTTP to HTTPS. This is why we need to tell Cloudflare to
send request with HTTPS when proxy through Cloudflare. Otherwise, it enters a
redirect loop.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="http2-and-http3">HTTP2 and HTTP3<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#http2-and-http3" class="hash-link" aria-label="Direct link to HTTP2 and HTTP3" title="Direct link to HTTP2 and HTTP3">​</a></h3>
<p>HTTP2 and HTTP3 each has improvements over the application protocol to improve
latency and reliability. Most of the time there should not be noticeable
difference, especially our site is not demanding high bandwidth communication.
You read more about HTTP2 and HTTP3 on the
<a href="https://wiki.ethanppl.com/computers/network/http">HTTP Page in this Wiki</a>.</p>
<p>To enable HTTP2,</p>
<ul>
<li>Add <code>http2 on</code> in the server configuration</li>
</ul>
<p>To enable HTTP3,</p>
<ul>
<li>Add <code>http3 on</code></li>
<li>Add <code>listen 443 quic reuseport</code> or just <code>listen 443 quic</code>.<!-- -->
<ul>
<li>Notice that if there are multiple servers using the same IP address and port
in nginx, only one of them can do <code>reuseport</code>.</li>
</ul>
</li>
<li>Add <code>add_header Alt-Svc 'h3=":443"; ma=86400'</code> in the location block<!-- -->
<ul>
<li>This is a response header to let the browser know that another location
(alternative service (Alt-Svc)) is available for servicing with HTTP3 (h3)</li>
</ul>
</li>
<li>The port used by <code>quic</code> is recommended to be the same as <code>ssl</code>, hence 443</li>
</ul>
<p>The final configuration should look something like this:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">server {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   server_name  playground.ethanppl.com;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   http2 on;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   http3 on;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   location / {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      proxy_pass http://localhost:4000;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      proxy_ssl_server_name on;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      # For web socket connections</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      proxy_http_version 1.1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      proxy_set_header Upgrade $http_upgrade;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      proxy_set_header Connection "Upgrade";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      add_header Alt-Svc 'h3=":443"; ma=86400';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   listen 443 ssl; # managed by Certbot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   listen 443 quic reuseport;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   ssl_certificate /etc/letsencrypt/live/playground.ethanppl.com/fullchain.pem; # managed by Certbot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   ssl_certificate_key /etc/letsencrypt/live/playground.ethanppl.com/privkey.pem; # managed by Certbot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">server {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   if ($host = playground.ethanppl.com) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      return 301 https://$host$request_uri;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   } # managed by Certbot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   listen       80;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   server_name  playground.ethanppl.com;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">   return 404; # managed by Certbot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<div class="theme-admonition theme-admonition-note admonition_xJq3 alert alert--secondary"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_BuS1"><p>Nginx</p><ul>
<li>Based on the <code>server_name</code>, proxy the connection to the docker container</li>
<li>Use Let's Encrypt and certbot to get a certificate and configure HTTPS
automatically</li>
<li>Add relevant configuration to support HTTP2 and HTTP3 connections</li>
</ul></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="monitoring">Monitoring<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#monitoring" class="hash-link" aria-label="Direct link to Monitoring" title="Direct link to Monitoring">​</a></h2>
<p>I am not running mission-critical life savings web services, but it is still
good to monitor what is going on in the server and alert me when things gone
wrong. I found some monitoring services online that are free for hobby projects.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="netdata">Netdata<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#netdata" class="hash-link" aria-label="Direct link to Netdata" title="Direct link to Netdata">​</a></h3>
<p>I use <a href="https://www.netdata.cloud/" target="_blank" rel="noopener noreferrer">Netdata</a> for monitoring the Hetzner server
and the containers. It has an agent to read the data and optionally upload to
Netdata cloud server for some nice visualizations. It includes basics like CPU,
memory, storage and network data for the host machine. Additionally, it can also
show the load for each container running in the machine.</p>
<p><img decoding="async" loading="lazy" alt="Netdata System Overview" src="https://wiki.ethanppl.com/assets/images/netdata-overview-81f6550ce791712e4b18b990e4ae97bc.png" width="1517" height="495" class="img_ev3q">
<img decoding="async" loading="lazy" alt="Netdata Containers Metrics" src="https://wiki.ethanppl.com/assets/images/netdata-containers-75a970d1a187422f08c8fa79adc609f3.png" width="1517" height="487" class="img_ev3q"></p>
<p>It works out of the box. Create an account on Netdata Cloud, follow the prompt
to connect a node, pick Ubuntu and follow the instructions on screen to install
the Netdata agent and all graphs worked. Email automations are automatically
configured to notify when things went wrong. However, configuring the
notifications rules requires subscribing to a paid plan.</p>
<div class="theme-admonition theme-admonition-tip admonition_xJq3 alert alert--success"><div class="admonitionHeading_Gvgb"><span class="admonitionIcon_Rf37"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_BuS1"><p>If you would like to subscribe to Netdata, here is my
<a href="https://netdata.cello.so/m3g8ZJvzrI9" target="_blank" rel="noopener noreferrer">invite link</a> for 10% discount for the
first year.</p></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="checkly">Checkly<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#checkly" class="hash-link" aria-label="Direct link to Checkly" title="Direct link to Checkly">​</a></h3>
<p>Another tool I used for checking uptime and response time is
<a href="https://www.checklyhq.com/" target="_blank" rel="noopener noreferrer">Checkly</a>. For free, there is a certain amount of
API calls and browser per month. What I do is just for every 30 mins to 1 hour,
call my self-hosted services and make sure they return status 200.</p>
<p><img decoding="async" loading="lazy" alt="Checkly" src="https://wiki.ethanppl.com/assets/images/checkly-b86ec2cfb7a9f85a2adf582ec49c9a90.png" width="1003" height="403" class="img_ev3q"></p>
<p>Checkly supports different location and interval to send the request. It also
allows different assertions like text/json response, and verify the response
meet certain requirements. I kept it simple to assert for status 200, but there
are potential to configure it for more robust health checks.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="much-more">Much More<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#much-more" class="hash-link" aria-label="Direct link to Much More" title="Direct link to Much More">​</a></h2>
<p>Other than monitoring, there are a lot more to try and experiment. I added my
own <a href="https://plausible.io/" target="_blank" rel="noopener noreferrer">plausible analytics server</a>,
<a href="https://glitchtip.com/" target="_blank" rel="noopener noreferrer">glitchtip</a> error tracking server, and more. This blog
is already long. I may write about them in the future. All in all, the machine
is yours, and you can do whatever you want with it.</p>
<p>There are more to explore in the area of self-hosting. There are always more to
do with security. This blog covered the basics like SSH authentication with keys
instead of password, basic firewall set up with <code>ufw</code> and HTTPS for our server.
There are more to do like not SSH into as root user by default and running
containers in rootless environment.</p>
<p>Backup is also another important aspect for self-hosting. If you want to store
anything important, always backup regularly. Follow the
<a href="https://en.wikipedia.org/wiki/Backup#3-2-1_Backup_Rule" target="_blank" rel="noopener noreferrer">3-2-1 backup rule</a>,
with 3 copies, 2 on different media types and 1 stored offsite. This is to
prevent any potential catastrophic error, be it human error, or disk corrupted,
electricity disruption, virus and malware.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="summary">Summary<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#summary" class="hash-link" aria-label="Direct link to Summary" title="Direct link to Summary">​</a></h2>
<p>This setup has been running for 9 months now, and it requires little
maintenance. I had a lot of fun running my own server and figuring out stuff
along the way.</p>
<p>This blog went through my thought process on choosing the server machine,
running playground in docker, configuring database containers, DNS, nginx,
firewall and monitoring tools. I believe it will be a never ending journey and I
hope this inspires people to try too. I am not someone particularly interested
in DevOps or server configurations, but this project gave me a better
understanding of the problem space.</p>
<p>If you would like to explore more,
<a href="https://github.com/awesome-selfhosted/awesome-selfhosted" target="_blank" rel="noopener noreferrer"><code>awesome-selfhosted</code></a>
is a list of software services available for hosting, and
<a href="https://github.com/awesome-foss/awesome-sysadmin" target="_blank" rel="noopener noreferrer"><code>awesome-sysadmin</code></a> is a list
of awesome open-source sysadmin resources.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="references">References<a href="https://wiki.ethanppl.com/blog/2025/05/25/self-host#references" class="hash-link" aria-label="Direct link to References" title="Direct link to References">​</a></h2>
<p>Checkout <a href="https://wiki.ethanppl.com/computers/self-hosting">self-hosting page</a> for more.</p>
<p>My setup is closest to this blog:</p>
<ul>
<li><a href="https://cprimozic.net/blog/my-selfhosted-websites-architecture/" target="_blank" rel="noopener noreferrer">My self-hosted websites architecture</a>
<ul>
<li>OVH cloud, nginx reverse proxy, DNS &amp; networking, external CDN for high
traffic static sites</li>
<li>Hosting websites, databases, plausible for analytics, sentry for error
alerts, personal utils</li>
<li>Handling security, monitoring, backup and disaster recovery</li>
</ul>
</li>
</ul>
<p>Other blogs:</p>
<ul>
<li><a href="https://grifel.dev/decentralization/" target="_blank" rel="noopener noreferrer">Self-hosting in 2023</a>
(<a href="https://news.ycombinator.com/item?id=34860655" target="_blank" rel="noopener noreferrer">HN</a>)<!-- -->
<ul>
<li>Interesting read. Self-host a blog with Raspberry Pi, Coolify for deployment
and DDClient to solve the problem of a dynamic IP</li>
</ul>
</li>
<li><a href="https://pixeljets.com/blog/self-hosted-is-awesome/" target="_blank" rel="noopener noreferrer">Self-hosted is awesome</a>
<ul>
<li>Hetzner setup, docker applications, nginx host, cloudflare DNS</li>
</ul>
</li>
<li><a href="https://jakew.me/home-server/" target="_blank" rel="noopener noreferrer">Repurpose your old laptop into a home server</a>
<ul>
<li>Ubuntu server, install docker, run Plex and secure remote connection with
tailscale</li>
</ul>
</li>
</ul>
<p>Other resources:</p>
<ul>
<li><a href="https://github.com/awesome-selfhosted/awesome-selfhosted" target="_blank" rel="noopener noreferrer">awesome-selfhosted</a>
— List of web applications that can be self-hosted</li>
<li><a href="https://github.com/awesome-foss/awesome-sysadmin" target="_blank" rel="noopener noreferrer">awesome-sysadmin</a> — List of
sysadmin resources</li>
<li><a href="https://www.reddit.com/r/selfhosted/" target="_blank" rel="noopener noreferrer">r/selfhosted</a>,
<a href="https://www.reddit.com/r/HomeServer/" target="_blank" rel="noopener noreferrer">r/HomeServer</a> — Reddit sub</li>
<li><a href="https://selfh.st/" target="_blank" rel="noopener noreferrer">slefh.st</a> — Newsletter</li>
</ul>]]></content>
        <author>
            <name>Ethan Pang</name>
            <uri>https://ethanppl.com/</uri>
        </author>
        <category label="Computers" term="Computers"/>
        <category label="Self Hosting" term="Self Hosting"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reimplement all JavaScript Array Functions with while loops only]]></title>
        <id>https://wiki.ethanppl.com/blog/2025/02/23/js-array</id>
        <link href="https://wiki.ethanppl.com/blog/2025/02/23/js-array"/>
        <updated>2025-02-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Last month, out of curiosity, I reimplemented all 38 JavaScript Array functions]]></summary>
        <content type="html"><![CDATA[<p>Last month, out of curiosity, I reimplemented all 38 JavaScript Array functions
(e.g. <code>.forEach()</code>, <code>.map()</code>, <code>.sort()</code>, etc.) with while loops only. As always,
I learned something as I work on the all the functions. Some features, edge
cases, considerations that I previously do not know about JavaScript.</p>
<ul>
<li><a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#sparse-arrays">There are sparse arrays and the pain of handling them</a></li>
<li><a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#arrays-are-objects">Arrays are objects and its implications</a></li>
<li><a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#copy-of-a-reference">What copy of a reference in JavaScript actually means</a></li>
<li><a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#iterator-and-generator">What are iterators and generators</a></li>
<li><a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#equality">Different kinds of equality in JavaScript</a></li>
</ul>
<p>Other than that, there are some less-known functions that I discovered, at least
I have not used them before until now, like <code>.copyWithin()</code>, <code>.splice()</code> and
<code>.with()</code>.</p>
<p>To be honest, most of the implementation is tedious and repetitive. A lot of
effort goes into handling edge cases, which are the interesting things I
learned. The implementation is not as interesting compare to random things I
learned, so I will focus on sharing the lessons first. But if you really want
to, you can skip to the
<a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#implementation-considerations">implementation considerations</a>
where I explained the setup, how some functions are implemented, especially some
interesting one like <code>.flat()</code> and <code>.sort()</code>.</p>
<p>The full code is available in <a href="https://github.com/ethanppl/js-array" target="_blank" rel="noopener noreferrer">this repo</a>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-i-learned">What I learned<a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#what-i-learned" class="hash-link" aria-label="Direct link to What I learned" title="Direct link to What I learned">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="sparse-arrays">Sparse Arrays<a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#sparse-arrays" class="hash-link" aria-label="Direct link to Sparse Arrays" title="Direct link to Sparse Arrays">​</a></h3>
<p>The first thing I discovered, and the major source of pain in this experiment is
sparse arrays. This means an array can have empty slots in between. Empty items
are different from <code>undefined</code> or <code>null</code>. <code>undefined</code> in an array is not empty
items. Empty slots are just empty. You can define sparse arrays like this:</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> a </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// [1, &lt;empty&gt;, 3]</span><br></span></code></pre></div></div>
<p>Or if you set the length of an array that is larger than its original length,
the new items are all empty.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> a </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">length</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// [1, &lt;empty&gt;]</span><br></span></code></pre></div></div>
<p>But if you access an empty item with the square bracket, it will return
<code>undefined</code>.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> a </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword nil" style="color:#00009f">undefined</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// undefined</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// undefined</span><br></span></code></pre></div></div>
<p>So, the only way to know if an index is an empty slot, you use the <code>in</code>
operator. If it returns false, then it is empty.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> a </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword nil" style="color:#00009f">undefined</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// true</span><br></span></code></pre></div></div>
<p>To make an item empty, you cannot reassign "an empty value". You have to delete
it from the array.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> a </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// [1]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">delete</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// [&lt;empty&gt;]</span><br></span></code></pre></div></div>
<p>There are many more tricky things that comes with sparse arrays. For example,
most of the functions that take a callback like <code>.forEach()</code>, <code>.filter()</code>, and
<code>.reduce()</code> will skip empty items in the array. But despite it skips invoking
the callback, functions like <code>.map</code>, <code>.sort()</code> and <code>.reverse()</code> will preserve
the empty items in their output.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> out </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">map</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">e</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> e </span><span class="token operator" style="color:#393A34">**</span><span class="token plain"> e</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 3</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// [1, &lt;empty&gt;, 27]</span><br></span></code></pre></div></div>
<p>Functions like <code>.at()</code> on the other hand treat empty as <code>undefined</code>. And newer
functions that creates a copy of the original array, like <code>.toSorted()</code> and
<code>.toReversed()</code>, converts empty items to <code>undefined</code>. Yes, it is pretty
inconsistent.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">at</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// undefined</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toReversed</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// [3, undefined, 1]</span><br></span></code></pre></div></div>
<p>Also, <code>.sort()</code> takes a compare function to sort the elements. But empty items
or <code>undefined</code> are not invoked. All undefined and empty items are sorted to the
end of the array, with <code>undefined</code> comes first and then empty items.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token keyword nil" style="color:#00009f">undefined</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">sort</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// [1, 2, 3, undefined, &lt;empty&gt;]</span><br></span></code></pre></div></div>
<p>I did not know that arrays can have empty slots that is different from
<code>undefined</code>. I thought <code>undefined</code> means empty previously. I cannot think of a
way that empty arrays are useful, maybe except for a potential marginal gain in
memory. Anything sparse arrays is useful for can be replaced by having
<code>undefined</code> as the value. In addition, <code>delete</code> and <code>in</code> operation is not what
developers are used to when dealing with arrays. I do not think using sparse
arrays is a good practice.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="arrays-are-objects">Arrays are Objects<a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#arrays-are-objects" class="hash-link" aria-label="Direct link to Arrays are Objects" title="Direct link to Arrays are Objects">​</a></h3>
<p>The reason why you can use <code>delete</code> and <code>in</code> to check whether an item is empty
in an array, is because arrays are just objects. The index and value in an array
is a key value pair. The array object implements some helper that comes with
this object to support the array functionality. And in fact, functions, sets, or
strings are also objects. They can inherit methods and properties.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> a </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 'object'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">f</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">typeof</span><span class="token plain"> f</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 'object'</span><br></span></code></pre></div></div>
<p>Therefore, when the length of the array is modified to be larger than original,
the key does not exist yet, hence the value is empty and the array is sparse. On
the other hand, when the length is shortened, the array object automatically
clean up keys that are equal or larger than the length.</p>
<p>Some consequences of Array being an object are the time complexity of these
functions. For example, accessing any value of an array by index is O(1) because
it is just a key value store underlying. This is different from lists in some
languages that are linked lists under the hood, linked list usually requires
traversing the list from the start to access an item by index.</p>
<p>Another interesting consequences of time complexity is <code>.pop()</code> is O(1) while
<code>.shift()</code> is O(n). <code>.pop()</code> removes the last item in the array, and <code>.shift()</code>
removes the first item in the array. <code>.pop()</code> is O(1) because it only needs to
remove the last item, and the length of the array is decremented by 1.
<code>.shift()</code> is O(n) because it needs to remove the first item, and all the other
items need to be shifted to one index earlier.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="copy-of-a-reference">Copy of a Reference<a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#copy-of-a-reference" class="hash-link" aria-label="Direct link to Copy of a Reference" title="Direct link to Copy of a Reference">​</a></h3>
<p>In JavaScript, objects are neither pass by value nor pass by reference, it is
called copy of a reference. I knew there is something different but never able
to remember it until now.</p>
<p>First, in language with pointer, like c++, pass by value means the variable is
copied to another place in the memory. Modifying it in the function does not
change the original copy of the variable that is passed in. On the other hand,
pass by reference means the variable is not copied, but the reference to the
variable is passed in. Modifying it in the function will change the original
variable outside the scope of the function.</p>
<p>For JavaScript, it is a bit different. It is called copy of a reference. Kind of
like a mixture of the two. When you pass an object to a function, you are
passing a copy of the reference to the object. This means if you change the
properties of the object in the function, it will also change the object outside
the function. But if you reassign the object to a new object, it will not change
the object outside the function.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> a </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// [1, 2, 3]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">foo</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">arr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  arr</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">arr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// [4, 2, 3]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  arr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">7</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">arr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// [5, 6, 7]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">foo</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// [4, 2, 3]</span><br></span></code></pre></div></div>
<p>I knew this before, but now I finally can remember it. This is important because
some functions like <code>.map()</code> and <code>.filter()</code> will return a new array and do not
modify the original array. But some functions like <code>.sort()</code> and <code>.reverse()</code>
modify the original array.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="iterator-and-generator">Iterator and Generator<a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#iterator-and-generator" class="hash-link" aria-label="Direct link to Iterator and Generator" title="Direct link to Iterator and Generator">​</a></h3>
<p>I learned about iterators and generators when I have to implement <code>.entries()</code>,
<code>.keys()</code>, and <code>.values()</code>. I have never used them, but now I learned what they
are, what iterators and generators mean.</p>
<p>Iterator is an object that has a <code>next()</code> method that returns an object with
<code>value</code> and <code>done</code> properties. The <code>value</code> is the next value in the iteration,
and <code>done</code> is a boolean that indicates whether the iteration is done.</p>
<ul>
<li><code>.entries()</code>: iterator that returns an array with the index and value of each
item</li>
<li><code>.keys()</code>: iterator that returns the index of each item</li>
<li><code>.values()</code>: iterator that returns the value of each item</li>
</ul>
<p>For example,</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> a </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"a"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"b"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"c"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> entries </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">entries</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">entries</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// { value: [0, 'a'], done: false }</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">entries</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// { value: [1, 'b'], done: false }</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">entries</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// { value: [2, 'c'], done: false }</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">entries</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// { value: undefined, done: true }</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> keys </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">keys</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">keys</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// { value: 0, done: false }</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">keys</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// { value: 1, done: false }</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">keys</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// { value: 2, done: false }</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">keys</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// { value: undefined, done: true }</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> values </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">values</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">values</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// { value: 'a', done: false }</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">values</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// { value: 'b', done: false }</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">values</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// { value: 'c', done: false }</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">values</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">next</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// { value: undefined, done: true }</span><br></span></code></pre></div></div>
<p>Generators on the other hand is a function that returns an iterator. It is
defined with an asterisk <code>function*</code>. Inside a generator, you can use the
<code>yield</code> keyword to return a value for each <code>next()</code> call on the iterator. The
function will pause at the <code>yield</code> keyword, and resume when the <code>next()</code> method
is called again. It took me a while to understand how it works, but it is a
powerful tool to create custom iterators. I used generators to implement all 3
functions.</p>
<p>For example, to implement something that works like <code>.values()</code> is just:</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">function</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">values</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">array</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">length</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">yield</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<p>Generators is a very simple and neat way to create iterators. One tricky thing
when implementing the three iterators is sparse arrays are treated as undefined.
So <code>.keys()</code> will return the index of the empty items, and <code>.values()</code> will
return <code>undefined</code> for the empty items.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="using-call">Using <code>.call()</code><a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#using-call" class="hash-link" aria-label="Direct link to using-call" title="Direct link to using-call">​</a></h3>
<p>While implementing functions like <code>.map()</code> that takes a callback function, I
realize it also take a second argument that is call <code>thisArg</code>. For example,
given a function <code>foo</code> used in <code>array.map(foo)</code>, if you call <code>this</code> in the
callback function <code>foo</code>, the value of <code>this</code> is undefined. And in non-strict
environment <code>undefined</code> will be replaced by <code>globalThis</code>. You may read more
about it in the
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#iterative_methods" target="_blank" rel="noopener noreferrer">MDN docs</a>.</p>
<p>I do not care that much about the correctness of the <code>this</code> value here, but at
least I do want to know how to specify a <code>this</code> value when calling a function. I
discovered three functions provided by the Function object prototype, <code>.call()</code>,
<code>.apply()</code> and <code>.bind()</code>. All functions in JavaScript inherit these three
methods. Out of all the tutorial I read, I think W3Schools has the most clear
and concise explanation you can check:</p>
<ul>
<li><code>.call()</code>: Calls a function with a given <code>this</code> value and arguments
(<a href="https://www.w3schools.com/js/js_function_call.asp" target="_blank" rel="noopener noreferrer">W3Schools</a>)</li>
<li><code>.apply()</code>: Calls a function with a given <code>this</code> value and arguments as an
array (<a href="https://www.w3schools.com/js/js_function_apply.asp" target="_blank" rel="noopener noreferrer">W3Schools</a>)</li>
<li><code>.bind()</code>: Returns a new function with a given <code>this</code> value
(<a href="https://www.w3schools.com/js/js_function_bind.asp" target="_blank" rel="noopener noreferrer">W3Schools</a>)</li>
</ul>
<p>And this is how I make use of <code>.call()</code> in my implementation:</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// For example .map()</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter">array</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> callback</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> thisArg</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> output </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// loop the array</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">length</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Skip invoke on empty element, but still create empty element</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// Using call to specify thisArg</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// instead of just callback(array[i], i, array)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      output</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">output</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">length</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> callback</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">call</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">thisArg</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      output</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">length</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> output</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<p>I did not test it and I doubt it actually works because I switched my
implementations to be a module with functions rather than methods in a class (I
will explain <a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#the-setup">below</a>). The <code>this</code> object might not apply in that
case. But nevertheless, I learned about <code>.call()</code>, <code>.apply()</code> and <code>.bind()</code>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="equality">Equality<a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#equality" class="hash-link" aria-label="Direct link to Equality" title="Direct link to Equality">​</a></h3>
<p>As you might have already known, what is considered "equal" in JavaScript is
tricky. There are loosely equal (<code>==</code>) and strictly equal (<code>===</code>). In these
Array functions, there are also subtle differences between some functions when
talking about what is "equal" to what. One examples is using <code>.indexOf()</code> and
<code>.includes()</code> to find an element in an array.</p>
<p>There are a few ways to determine if an element is in array. You can use
<code>.find()</code> or <code>.findIndex()</code> which takes a callback testing function to determine
if the element is what you are looking for, which you can control how the
equality comparison works. But if you do not want to write a callback, you can
use <code>.indexOf()</code> to find an index that equals to the provided value (-1 if not
found). Or, you can use <code>.includes()</code> to check if the array includes the
provided value (false if not found). However, there is a subtle difference
between the equality in <code>.indexOf()</code> and <code>.includes()</code>.</p>
<p><code>.indexOf()</code> uses
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality" target="_blank" rel="noopener noreferrer">strict equal</a>
(<code>===</code>). Strict equality (<code>===</code>) is different from equality (<code>==</code>) where types
are also checked. Additionally, unlike <code>null</code> or <code>undefined</code>, <code>NaN</code> is not
strictly equal to itself. So searching for <code>NaN</code> in an array with <code>.indexOf()</code>
will always be -1. This design where <code>NaN</code> is not equal to itself is consistent
with a lot of other languages and follows the
<a href="https://en.wikipedia.org/wiki/NaN#Comparison_with_NaN" target="_blank" rel="noopener noreferrer">IEEE 754 Standard</a>.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword null nil" style="color:#00009f">null</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token keyword null nil" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword nil" style="color:#00009f">undefined</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token keyword nil" style="color:#00009f">undefined</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">NaN</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">NaN</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">NaN</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">indexOf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">NaN</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// -1</span><br></span></code></pre></div></div>
<p>However, <code>.includes()</code> uses
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value-zero_equality" target="_blank" rel="noopener noreferrer">same-value-zero equality</a>.
Values of zero are all considered to be equal, where <code>0</code> is equal to <code>-0</code> and
<code>NaN</code> is also equal to <code>NaN</code>. I referenced the implementation of <code>sameValueZero</code>
from the MDN docs linked above.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">sameValueZero</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">sameValueZero</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">NaN</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">NaN</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">NaN</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">includes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">NaN</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// true</span><br></span></code></pre></div></div>
<p>So if you need to check if there is <code>NaN</code> in an array, you should use
<code>.includes()</code> instead of <code>.indexOf()</code>. If you want to read more about equality
in JavaScript,
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness" target="_blank" rel="noopener noreferrer">this MDN page</a>
explains well with a table listed what is or is not equaled in each way of
evaluating equality.</p>
<p>By the way, another subtle difference is <code>.indexOf()</code> skips empty slots in
sparse arrays while <code>.includes()</code> treats empty slots as <code>undefined</code>. And all the
<code>find...</code> methods like <code>.find()</code> and <code>.findIndex()</code> callback function is invoked
for every index, unlike rest of the iterative methods like <code>.map()</code> and
<code>.forEach()</code> that skips empty slots. Yet another edge cases with sparse arrays.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">,</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">indexOf</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword nil" style="color:#00009f">undefined</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// -1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">,</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">includes</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword nil" style="color:#00009f">undefined</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// true</span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="negative-indexes">Negative Indexes<a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#negative-indexes" class="hash-link" aria-label="Direct link to Negative Indexes" title="Direct link to Negative Indexes">​</a></h3>
<p>Some other things I learned included most of the methods that take an index as
input supports negative index. For example, you can do <code>array.at(-1)</code> to get the
last element, but you cannot do <code>array[-1]</code> which is equivalent to <code>array["-1"]</code>
(which most likely is <code>undefined</code>).</p>
<p>And each function also has special handling for index that is less than
<code>-array.length</code> or greater than <code>array.length</code>. For example, <code>.at()</code> returns
<code>undefined</code> if the index is outside the range from <code>-array.length</code> to
<code>array.length - 1</code>.</p>
<p>There are more complicated examples like <code>.slice()</code>, which is a function takes a
start index and end index and slice the array. If the start index is a negative
index, it does the conversion to count from the end of the array. But if that
start index is less than <code>-array.length</code>, it uses 0 as the start index. And vice
versa for the end index, if greater than <code>array.length</code> it uses <code>array.length</code>
as the end index. And for these functions that takes two indexes, it also has a
special condition handling the order of the indexes. For <code>.slice()</code>, if the end
index is earlier than the start index after the conversion, it returns an empty
array. If this sounds confusing, I agree. I suggest read again in point form in
the
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice#parameters" target="_blank" rel="noopener noreferrer">MDN docs</a>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="locales">Locales<a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#locales" class="hash-link" aria-label="Direct link to Locales" title="Direct link to Locales">​</a></h3>
<p>I also learned about locale while reading about <code>.toLocaleString()</code>. It helps
convert number, date, letter formats, etc. Probably going too far away from
Arrays, but still, I didn't know JavaScript supports this many variations.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toLocaleString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"en-US"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">style</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"currency"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">currency</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"USD"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// '$1.00,$2.00,$3.00'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toLocaleString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"en-US"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">style</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"currency"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">currency</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"AUD"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// 'A$1.00,A$2.00,A$3.00'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toLocaleString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"en-US"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">style</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"currency"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">currency</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"EUR"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// '€1.00,€2.00,€3.00'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toLocaleString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"en-US"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">style</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"currency"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">currency</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"JPY"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// '¥1,¥2,¥3'</span><br></span></code></pre></div></div>
<p>For more you can read, again,
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl" target="_blank" rel="noopener noreferrer">MDN docs on the <code>Intl</code> global object</a>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="less-known-functions">Less known functions<a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#less-known-functions" class="hash-link" aria-label="Direct link to Less known functions" title="Direct link to Less known functions">​</a></h3>
<p>There are a few functions that I think are less known. At least I have not used
them before and would like to share.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="copywithin"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin" target="_blank" rel="noopener noreferrer"><code>.copyWithin()</code></a><a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#copywithin" class="hash-link" aria-label="Direct link to copywithin" title="Direct link to copywithin">​</a></h4>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">copyWithin</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">target</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> start</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">copyWithin</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">target</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> start</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> end</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<ul>
<li>It is used to copy elements with in the array by specifying the indexes</li>
<li>It takes three indexes as arguments: target, start and end index</li>
<li>It copies elements within start to end, to the target index</li>
<li>It modifies the array and also return the resulting array</li>
</ul>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"a"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"b"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"c"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"d"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"e"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">copyWithin</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Copy the element at index 3 to index 1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// ["a", "d", "c", "d", "e"]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"a"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"b"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"c"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"d"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"e"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">copyWithin</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Copy the elements index 2-5 to index 1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// ["a", "c", "d", "e", "e"]</span><br></span></code></pre></div></div>
<p>I am not sure when is it useful. I guess when there is something need to
rearrange elements within an array in such a way.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="splice"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noopener noreferrer"><code>.splice()</code></a><a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#splice" class="hash-link" aria-label="Direct link to splice" title="Direct link to splice">​</a></h4>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">splice</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">start</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">splice</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">start</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> deleteCount</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function" style="color:#d73a49">splice</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">start</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> deleteCount</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token spread operator" style="color:#393A34">...</span><span class="token plain">items</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<ul>
<li>It is used to delete some elements, and insert some new items at where
elements are deleted</li>
<li>It is like a combination of <code>.split()</code>, <code>.slice()</code> and <code>.concat()</code></li>
<li>It takes three arguments: starting index, delete count and list of new items</li>
<li>It modifies the array and return the deleted elements</li>
<li>If the delete count is not specified, it deletes till the end</li>
</ul>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> a </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"a"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"b"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"c"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"d"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"e"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Delete starting at index 1 and till the end</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">splice</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// ['b', 'c', 'd', 'e']</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// ['a']</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> b </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"a"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"b"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"c"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"d"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"e"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Delete 2 element starting at index 1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">b</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">splice</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// ['b', 'c']</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">b</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// ['a', 'd', 'e']</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> c </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"a"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"b"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"c"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"d"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"e"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Delete 2 element starting at index 1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// And insert "m" and "n" in to where elements are deleted</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">c</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">splice</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"i"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"j"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"k"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// ['b', 'c']</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">c</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// ['a', 'i', 'j', 'k', 'd', 'e']</span><br></span></code></pre></div></div>
<p>This is a useful and efficient way to remove or insert items in the middle of
the array, despite its functionality is not obvious from the name.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="shift-and-unshift"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift" target="_blank" rel="noopener noreferrer"><code>.shift()</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift" target="_blank" rel="noopener noreferrer"><code>.unshift()</code></a><a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#shift-and-unshift" class="hash-link" aria-label="Direct link to shift-and-unshift" title="Direct link to shift-and-unshift">​</a></h4>
<ul>
<li><code>.shift()</code> is like <code>.pop()</code> but removes the first element instead of the last
element</li>
<li><code>.unshift()</code> is like <code>.push()</code> but inserts the elements at the beginning of
the array</li>
<li>I also learned that both <code>.unshift()</code> and <code>.push()</code> can take more than 1
element</li>
<li>And I also learned that both <code>.unshift()</code> and <code>.push()</code> returns the new length
of the array</li>
</ul>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> a </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">pop</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 5</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// [1, 2, 3, 4]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> b </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">b</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">shift</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">b</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// [2, 3, 4, 5]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> c </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">c</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">push</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">6</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">7</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 7</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">c</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// [1, 2, 3, 4, 5, 6, 7]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> d </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">d</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">unshift</span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">-</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 7</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">d</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// [-1, 0, 1, 2, 3, 4, 5]</span><br></span></code></pre></div></div>
<p>And because how <a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#arrays-are-objects">arrays are objects</a> behind the scene,
<code>.pop()</code> is O(1) but <code>.shift()</code> is O(n), as explained above.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="toreversed-tosorted-and-tospliced"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toReversed" target="_blank" rel="noopener noreferrer"><code>.toReversed()</code></a>, <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted" target="_blank" rel="noopener noreferrer"><code>.toSorted()</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSpliced" target="_blank" rel="noopener noreferrer"><code>.toSpliced()</code></a><a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#toreversed-tosorted-and-tospliced" class="hash-link" aria-label="Direct link to toreversed-tosorted-and-tospliced" title="Direct link to toreversed-tosorted-and-tospliced">​</a></h4>
<p>There are <code>.reverse()</code>, <code>.sort()</code>, and <code>.splice()</code> that modify the array in
place. There are also <code>.toReversed()</code>, <code>.toSorted()</code> and <code>.toSpliced()</code> that are
functionally the same but create a new array instead of modifying the original
one.</p>
<p>There are also subtle difference in the to... version. These methods never
produce sparse array. They convert empty slots into <code>undefined</code>, while the
original <code>.reverse()</code>, <code>.sort()</code> and <code>.splice()</code> do not. I really wanted to know
why there is this difference and I went back to the
<a href="https://github.com/tc39/proposal-change-array-by-copy" target="_blank" rel="noopener noreferrer">original TC39 array by copy proposal</a>.
In the end, I found
<a href="https://github.com/tc39/proposal-change-array-by-copy/issues/8#issuecomment-817763412" target="_blank" rel="noopener noreferrer">this answer</a>.
In summary, these functions either are consistent with their counterpart that
treats empty slots as empty slots, or be consistent with all other features
since ES6 where they do not produce sparse arrays. So either way is breaking
consistency, and they decided to stay consistent with the ES6 standard.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">,</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">reverse</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// [&lt;empty&gt;, 3, 2, 1]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">,</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">toReversed</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// [undefined, 3, 2, 1]</span><br></span></code></pre></div></div>
<p>There are
<a href="https://github.com/tc39/proposal-change-array-by-copy/issues/101" target="_blank" rel="noopener noreferrer">repeated discussion</a>
about these inconsistencies in the proposal, it's an interesting read. It shows
how many problems sparse arrays create for JavaScript language designers.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="with"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/with" target="_blank" rel="noopener noreferrer"><code>.with()</code></a><a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#with" class="hash-link" aria-label="Direct link to with" title="Direct link to with">​</a></h4>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">with</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">index</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> value</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre></div></div>
<ul>
<li><code>.with()</code> creates a new array with 1 element changed</li>
<li>It is like the copying version of the bracket assignment <code>array[3] = 'a'</code>
notation</li>
<li>It is added as part of the same
<a href="https://github.com/tc39/proposal-change-array-by-copy" target="_blank" rel="noopener noreferrer">array by copy proposal</a>,
but not using the same to... naming pattern, and
<a href="https://github.com/tc39/proposal-change-array-by-copy/issues/103" target="_blank" rel="noopener noreferrer">people did ask why</a></li>
</ul>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> a </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> b </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">with</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// [1, 2, 3]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token console class-name">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">b</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// [1, 0, 3]</span><br></span></code></pre></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="implementation-considerations">Implementation Considerations<a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#implementation-considerations" class="hash-link" aria-label="Direct link to Implementation Considerations" title="Direct link to Implementation Considerations">​</a></h2>
<p>So that is mostly the things that I learned while working on this little
challenge. If you still find it interesting, here is how I actually did it, and
how I test it to ensure at least I have some certainty a majority of the
functionality correct.</p>
<p><a href="https://github.com/ethanppl/js-array" target="_blank" rel="noopener noreferrer">Here is the link to the repo</a> if you are
interested.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-setup">The setup<a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#the-setup" class="hash-link" aria-label="Direct link to The setup" title="Direct link to The setup">​</a></h3>
<p>The major change I made is I wrote an object (<code>MyArray</code>) that contains functions
as parameters (e.g. <code>MyArray.at(array, 0)</code>), rather than defining those
functions as methods of an object (e.g. <code>array.at(0)</code>). Therefore, the first
argument of all the functions is always the input array. With that, I do not
need to override the original methods. The built-in Array class is still used to
construct the array, but none of the prototype functions are modified or used.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> array </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"a"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"b"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"c"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// original function</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> expected </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">join</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// my function</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> actual </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token maybe-class-name">MyArray</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">join</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">array</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<p>This makes it easier to test too. The <code>actual</code> value can be directly compared
with the <code>expected</code> value.</p>
<p>For functions that modify the array instance, I can use <code>Array.from()</code> to create
copies and compare.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> array </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">"c"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"b"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"a"</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> expected </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token known-class-name class-name">Array</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword module" style="color:#00009f">from</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">array</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> actual </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token known-class-name class-name">Array</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword module" style="color:#00009f">from</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">array</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">expected</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">sort</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token maybe-class-name">MyArray</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">sort</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">actual</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<p>I used <a href="https://bun.sh/" target="_blank" rel="noopener noreferrer">bun</a> to run and test the code. It is fast, simple to
use, support TypeScript, and provide a test runner out of the box.</p>
<p>In the project, I have to rely on some basic properties of the Array object. I
need to get and set the <code>.length</code> property. As far as I can tell, that is the
only way to get the length and manipulate the length. I use angle brackets <code>[]</code>
to access and assign items in the array. Also, with the <code>in</code> and <code>delete</code>
operator to check if an item exists and remove the items respectively. And last
but not least, <code>while</code> to loop through the array.</p>
<p>At first, I thought of using <code>Array.reduce</code> to replicate all functionality of
other functions. It is inspired by functional programming language that a
<code>reduce</code> should be able to replicate all operations done recursively on a list.
But once I learned about <a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#sparse-arrays">sparse arrays</a> and
<a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#copy-of-a-reference">copy of a reference</a>, I realize it is near impossible if
not actually impossible to do so. So I changed my mind and use a <code>while</code> loop
instead. Why not <code>for</code> loop you may ask? Because then there is <code>for ... of</code> loop
and that is using the iterator behind the scene without the need of an index.
Just for the implementation to be more simple and raw, I decided to iterate with
an index instead, using a single keyword, <code>while</code>. And thus hopefully a more
catchy blog title <!-- -->:P</p>
<p>As I said, most of the implementation are just tedious. They are especially
tedious when multiple functions share similar functionalities.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="similar-functions">Similar functions<a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#similar-functions" class="hash-link" aria-label="Direct link to Similar functions" title="Direct link to Similar functions">​</a></h3>
<p><code>.find()</code>, <code>.findIndex()</code>, <code>.findLast()</code>, and <code>.findLastIndex()</code> are all very
similar. The difference is only whether it loops from the start or from the end,
and whether it returns the element or the index once the callback return true.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">find</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token constant" style="color:#36acaa">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">array</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token known-class-name class-name">Array</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token constant" style="color:#36acaa">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function-variable function" style="color:#d73a49">callback</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter literal-property property" style="color:#36acaa">element</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> </span><span class="token parameter constant" style="color:#36acaa">T</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> </span><span class="token parameter literal-property property" style="color:#36acaa">index</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> number</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> </span><span class="token parameter literal-property property" style="color:#36acaa">array</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> </span><span class="token parameter known-class-name class-name">Array</span><span class="token parameter operator" style="color:#393A34">&lt;</span><span class="token parameter constant" style="color:#36acaa">T</span><span class="token parameter operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> boolean</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    thisArg</span><span class="token operator" style="color:#393A34">?</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> any</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// loop the array</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// find does not skip empty value, but behave the same as undefined</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">length</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> callback</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">call</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">thisArg</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">result</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token keyword nil" style="color:#00009f">undefined</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<p>Once I learned iterators and generators, <code>.entries()</code>, <code>.keys()</code>, and
<code>.values()</code> are very similar. The only difference is the return value.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function-variable function" style="color:#d73a49">entries</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">function</span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> entries</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token constant" style="color:#36acaa">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">array</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token known-class-name class-name">Array</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token constant" style="color:#36acaa">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token maybe-class-name">ArrayIterator</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">number</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">T</span><span class="token punctuation" style="color:#393A34">]</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">length</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">yield</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<p><code>.some()</code> and <code>.every()</code> is like the opposite of each other. They both skip
empty element in sparse array. And one key thing is they both return early when
<code>.some()</code> finds true, or <code>.every()</code> finds false.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">every</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token constant" style="color:#36acaa">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">array</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token known-class-name class-name">Array</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token constant" style="color:#36acaa">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function-variable function" style="color:#d73a49">callback</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter literal-property property" style="color:#36acaa">element</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> </span><span class="token parameter constant" style="color:#36acaa">T</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> </span><span class="token parameter literal-property property" style="color:#36acaa">index</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> number</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> </span><span class="token parameter literal-property property" style="color:#36acaa">array</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> </span><span class="token parameter known-class-name class-name">Array</span><span class="token parameter operator" style="color:#393A34">&lt;</span><span class="token parameter constant" style="color:#36acaa">T</span><span class="token parameter operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> boolean</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    thisArg</span><span class="token operator" style="color:#393A34">?</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> any</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> every </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">true</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// loop the array</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">length</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// Skip empty element</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> callback</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">call</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">thisArg</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">result</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token comment" style="color:#999988;font-style:italic">// If one is false, stop looping</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          every </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token keyword control-flow" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> every</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<p>Despite some differences on what is returned, iterative functions like
<code>.filter()</code>, <code>.forEach()</code>, <code>.map()</code>, <code>.reduce()</code>, and <code>.reduceRight()</code> are all
similar. They all skip empty elements in sparse array, and use <code>callback.call()</code>
to invoke the callback. The only difference is handling the output returned.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">filter</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token constant" style="color:#36acaa">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token literal-property property" style="color:#36acaa">array</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token known-class-name class-name">Array</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token constant" style="color:#36acaa">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function-variable function" style="color:#d73a49">callback</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter literal-property property" style="color:#36acaa">element</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> </span><span class="token parameter constant" style="color:#36acaa">T</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> </span><span class="token parameter literal-property property" style="color:#36acaa">index</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> number</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> </span><span class="token parameter literal-property property" style="color:#36acaa">array</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> </span><span class="token parameter known-class-name class-name">Array</span><span class="token parameter operator" style="color:#393A34">&lt;</span><span class="token parameter constant" style="color:#36acaa">T</span><span class="token parameter operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> boolean</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    thisArg</span><span class="token operator" style="color:#393A34">?</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> any</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">output</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token known-class-name class-name">Array</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token constant" style="color:#36acaa">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// loop the array</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">length</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic">// Skip empty element</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> callback</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">call</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">thisArg</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> i</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">result</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          output</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">output</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">length</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> output</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<p>But out of all the functions, I find <code>.flat()</code> and <code>.sort()</code> particularly
interesting to tackle.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="flat"><code>.flat()</code><a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#flat" class="hash-link" aria-label="Direct link to flat" title="Direct link to flat">​</a></h3>
<p><code>.flat()</code> is interesting because it is a very good application of recursion.</p>
<p>The <code>.flat()</code> function takes an optional depth argument that defaults to 1,
specifying how many layer to flatten recursively.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">flat</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token constant" style="color:#36acaa">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">array</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token known-class-name class-name">Array</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token constant" style="color:#36acaa">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">depth</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> number </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token known-class-name class-name">Array</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token constant" style="color:#36acaa">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">doFlat</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> depth</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre></div></div>
<p>I first created a <code>doFlat</code> helper function that takes 2 arrays and the depth as
the arguments. The idea being the first array is the output array, and the
second array is the input array getting flatten, and the depth is the current
depth.</p>
<p>The <code>doFlat</code> function works like this:</p>
<ol>
<li>Loop through the array</li>
<li>If the element is an array, and the depth is not 0 yet, recursively call
<code>doFlat</code> with the same output array, the current element as the input array,
and one less depth</li>
<li>If the element is not an array, push it to the output</li>
</ol>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:#d73a49">doFlat</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter literal-property property" style="color:#36acaa">output</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> </span><span class="token parameter known-class-name class-name">Array</span><span class="token parameter operator" style="color:#393A34">&lt;</span><span class="token parameter">any</span><span class="token parameter operator" style="color:#393A34">&gt;</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> </span><span class="token parameter literal-property property" style="color:#36acaa">elements</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> </span><span class="token parameter known-class-name class-name">Array</span><span class="token parameter operator" style="color:#393A34">&lt;</span><span class="token parameter">any</span><span class="token parameter operator" style="color:#393A34">&gt;</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> </span><span class="token parameter literal-property property" style="color:#36acaa">depth</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> number</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> elements</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">length</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> elements</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token known-class-name class-name">Array</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">isArray</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">elements</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> depth </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">doFlat</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">output</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> elements</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> depth </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        output</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">output</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">length</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> elements</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    i</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> output</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<p>If you think of the nested array as trees, this is like a
<a href="https://en.wikipedia.org/wiki/Depth-first_search" target="_blank" rel="noopener noreferrer">depth first search</a> approach.
For every array, flatten it until the specified depth, then continue to append
to the output. I personally find this solution quite simple and elegant.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="sort"><code>.sort()</code><a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#sort" class="hash-link" aria-label="Direct link to sort" title="Direct link to sort">​</a></h3>
<p><code>.sort()</code> sorts the array in place, i.e. it modifies the original array. So,
<a href="https://en.wikipedia.org/wiki/Quicksort" target="_blank" rel="noopener noreferrer">quick sort</a> is a very good algorithm
for this. It does not require extra memory space but only swapping elements
within the array.</p>
<p>The sort function has a default compare function, that is based on the Unicode
order of the string. So <code>7</code> comes before <code>80</code>, but <code>80</code> actually comes before
<code>9</code> by default. This is because when numbers are converted to string, the
Unicode of <code>"80"</code> is earlier than <code>"9"</code>. So, I first need to recreate this
default compare function in case the compare function is not specified.
Fortunately, I can reuse the <code>String.localeCompare()</code> method.</p>
<p>Then for sorting, I also used a helper function <code>doSort</code> for recursively sorting
the array. It takes 4 arguments, the array to sort, the compare function, the
starting index and the ending index of range within the array to sort.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">sort</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token constant" style="color:#36acaa">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">array</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token known-class-name class-name">Array</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token constant" style="color:#36acaa">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> compareFn</span><span class="token operator" style="color:#393A34">?</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter literal-property property" style="color:#36acaa">a</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> </span><span class="token parameter constant" style="color:#36acaa">T</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> </span><span class="token parameter literal-property property" style="color:#36acaa">b</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> </span><span class="token parameter constant" style="color:#36acaa">T</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> number</span><span class="token punctuation" style="color:#393A34">)</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token known-class-name class-name">Array</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token constant" style="color:#36acaa">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token plain">compareFn</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function-variable function" style="color:#d73a49">compareFn</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter literal-property property" style="color:#36acaa">a</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> </span><span class="token parameter constant" style="color:#36acaa">T</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> </span><span class="token parameter literal-property property" style="color:#36acaa">b</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> </span><span class="token parameter constant" style="color:#36acaa">T</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> aStr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">a</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> bStr </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">${</span><span class="token template-string interpolation">b</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:#393A34">}</span><span class="token template-string template-punctuation string" style="color:#e3116c">`</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> aStr</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">localeCompare</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">bStr</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">doSort</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">array</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> compareFn</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">.</span><span class="token property-access">length</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><br></span></code></pre></div></div>
<p>If you want to know more about
<a href="https://en.wikipedia.org/wiki/Quicksort" target="_blank" rel="noopener noreferrer">Quick sort</a>, there are plenty
resources and examples on the Internet. The higher level idea is to pick a pivot
element, then partition the current array in to two, with one partition
containing elements lower and the other partition contains elements higher than
the pivot. Then recursively do the same algorithm for each of the two
partitions. The cool thing is this operation can be done without creating extra
arrays, it is only swapping element around within the array, and keep tracking
the indexes.</p>
<p>I did not do much optimization, so this is certainly nowhere near the best
implementation. The only thing I did is to pick a random pivot. This can lower
the chance of the two partitions having a very different size. Partitions that
are not in similar size may lead to poorer performance because more comparison
and swapping are needed.</p>
<p>Before the algorithm starts, the pivot element is moved to the end of the range.
Then each of the element in the range is compared to this pivot element. If the
compare function return a value smaller than 0, meaning the element is smaller
than the pivot, we swap element at the pivot and the current element and
increment the pivot index. This brings the current element to the earlier
partition. Once we finish looping the array, we swap the pivot element (at the
end of the range) with the pivot index to bring the pivot element in between the
two partitions. Then recursively do the same sort for the two partitions. You
may find it easier to understand by watching animations or reading the code
below.</p>
<p>There are also one more tricky thing to handle, briefly mentioned above.
Elements that are <code>undefined</code> or empty will not invoke the compare function.
They are always sorted to the end of the array, where all <code>undefined</code> comes
first, then all empty element at the end. So the first four big <code>if</code> in the
<code>doSort</code> function is handling <code>undefined</code> and empty items. Only when neither of
the element being compared nor the pivot element is <code>undefined</code> or empty, the
compare function is invoked.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> doSort </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token constant" style="color:#36acaa">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">array</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token known-class-name class-name">Array</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token constant" style="color:#36acaa">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function-variable function" style="color:#d73a49">compareFn</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter literal-property property" style="color:#36acaa">a</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> </span><span class="token parameter constant" style="color:#36acaa">T</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> </span><span class="token parameter literal-property property" style="color:#36acaa">b</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> </span><span class="token parameter constant" style="color:#36acaa">T</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> number</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">startIndex</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> number</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">endIndex</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> number</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> length </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> endIndex </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> startIndex </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">length </span><span class="token operator" style="color:#393A34">&lt;=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> randomIndex </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token known-class-name class-name">Math</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">floor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token known-class-name class-name">Math</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">random</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> length</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> startIndex</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">swap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">array</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> randomIndex</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> endIndex</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> currentIndex </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> startIndex</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> pivotIndex </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> startIndex</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">while</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">currentIndex </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> endIndex</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// pivot is empty, current in front, so swap</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">endIndex </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">swap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">array</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> currentIndex</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> pivotIndex</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      pivotIndex</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      currentIndex</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">continue</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// current is empty but pivot is not, do nothing</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token operator" style="color:#393A34">!</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">currentIndex </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      currentIndex</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">continue</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// pivot is undefined but current is defined, current in front, so swap</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">array</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">endIndex</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token keyword nil" style="color:#00009f">undefined</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">swap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">array</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> currentIndex</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> pivotIndex</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      pivotIndex</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      currentIndex</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">continue</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// current is undefined but pivot is not</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">array</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">currentIndex</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token keyword nil" style="color:#00009f">undefined</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">||</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">endIndex</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> </span><span class="token keyword nil" style="color:#00009f">undefined</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      currentIndex</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword control-flow" style="color:#00009f">continue</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// neither are empty or undefined</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> compare </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">compareFn</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">array</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">currentIndex</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">endIndex</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">compare </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">swap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">array</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> currentIndex</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> pivotIndex</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      pivotIndex</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    currentIndex</span><span class="token operator" style="color:#393A34">++</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">swap</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">array</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> pivotIndex</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> endIndex</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">doSort</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">array</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> compareFn</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> startIndex</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> pivotIndex </span><span class="token operator" style="color:#393A34">-</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">doSort</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">array</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> compareFn</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> pivotIndex </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> endIndex</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<p>And the <code>swap</code> function is also a helper function I created to swap two elements
in the array. It has special cases to handle swapping empty items. This <code>swap</code>
function is also used in <code>.reverse()</code> to reverse the array by swapping elements
symmetrically.</p>
<div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> swap </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&lt;</span><span class="token constant" style="color:#36acaa">T</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">(</span><span class="token parameter literal-property property" style="color:#36acaa">array</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> </span><span class="token parameter known-class-name class-name">Array</span><span class="token parameter operator" style="color:#393A34">&lt;</span><span class="token parameter constant" style="color:#36acaa">T</span><span class="token parameter operator" style="color:#393A34">&gt;</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> </span><span class="token parameter literal-property property" style="color:#36acaa">i</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> number</span><span class="token parameter punctuation" style="color:#393A34">,</span><span class="token parameter"> </span><span class="token parameter literal-property property" style="color:#36acaa">j</span><span class="token parameter operator" style="color:#393A34">:</span><span class="token parameter"> number</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">===</span><span class="token plain"> j</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> firstTemp </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> isFirstInArray </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> i </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> isSecondInArray </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> j </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">isSecondInArray</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    array</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">delete</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">i</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">isFirstInArray</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    array</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> firstTemp</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">delete</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">j</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword control-flow" style="color:#00009f">return</span><span class="token plain"> array</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre></div></div>
<p>For the rest, you can check
<a href="https://github.com/ethanppl/js-array" target="_blank" rel="noopener noreferrer">the repository</a> for the implementation.
Rest of them are mostly simple copying and modifying the length of the array, or
some variations of the above. The most complicated one would be <code>.splice()</code>
which requires some more thought into copying what are added and deleted and
moving the items around in the array.</p>
<p>Just a disclaimer, this is just a fun challenge I set for myself. I am not
confident that the implementation is absolutely correct, and I am sure you could
find improvements in both time and memory complexity if you wanted to.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="final-thoughts">Final thoughts<a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#final-thoughts" class="hash-link" aria-label="Direct link to Final thoughts" title="Direct link to Final thoughts">​</a></h2>
<p>Despite this exercise being a bit tedious. I think it is worth the effort.
Especially with more AI tools and auto-completion, getting to know the
fundamentals of a language is important. I do not ever think sparse array will
be useful, but knowing that it exists and why it exists is helpful.</p>
<p>Building something from scratch, without the help of AI autocompletion, feels
like it retrained my brain in designing algorithms and debugging logic errors.
It brings me back to the time when I first learn about programming, when
<a href="https://en.wikipedia.org/wiki/Off-by-one_error" target="_blank" rel="noopener noreferrer">off by 1 error</a> and
<a href="https://en.wikipedia.org/wiki/Infinite_loop" target="_blank" rel="noopener noreferrer">infinite loop</a> is the most
frequent mistake I make. I enjoyed the iterative process of running and testing
my code to validate the algorithms.</p>
<p>People often say how unreasonable and poorly designed the JavaScript language
is, which I agree. JavaScript's language design contains inconsistencies, for
example, all the edge cases around empty slots and sparse arrays.
Inconsistencies cause surprises, which means code are harder to reason about,
harder to maintain and debug. However, to me, this exercise provided an
opportunity for me to experience the inconsistencies. I am not reading about it
from forums or memes. I actually experienced it and I vividly remember how they
are handled. That is a rewarding thing out of all the tedious <code>in</code> checks.</p>
<p>Other than the inconsistencies, I notice one major theme in JavaScript is the
language assume the user is correct and avoid throwing errors. Throughout all
implementations, there are only 2 cases where it will throw an error. First is
when <code>.reduce()</code> or <code>.reduceRight()</code> is called with an empty array plus no
initial value given, a <code>TypeError</code> is thrown because nothing can be reduced or
returned. The second is when <code>.with()</code> is called with an index that is not
within the <code>-array.length</code> to the <code>array.length</code> range, a <code>RangeError</code> is
thrown. I think the <code>.with()</code> function throwing for <code>RangeError</code> is a better
design choice compare to other functions that tries to mask the error and just
return a default like an empty array or <code>undefined</code>. If something is unexpected,
like accessing items outside the range of indexes, clearly the user made a
mistake. In my opinion, throwing an error is better than letting the program
continues with hard coded default values. I understand the flexibility and
potential gain in user experience when used in client side applications, but
that is just masking the problem and kicking the can down the road.</p>
<p>I hope you learned something new about JavaScript array by reading this. And
maybe this inspires you to try something out even if it seems trivial. You might
learn something new on the way!</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="references">References<a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#references" class="hash-link" aria-label="Direct link to References" title="Direct link to References">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="docs">Docs<a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#docs" class="hash-link" aria-label="Direct link to Docs" title="Direct link to Docs">​</a></h3>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener noreferrer">MDN Docs on Array</a></li>
<li><a href="https://tc39.es/ecma262/multipage/indexed-collections.html#sec-properties-of-the-array-prototype-object" target="_blank" rel="noopener noreferrer">TC39 Specs on the Array Prototype Object</a></li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="time-complexity-of-all-array-functions">Time complexity of all Array functions<a href="https://wiki.ethanppl.com/blog/2025/02/23/js-array#time-complexity-of-all-array-functions" class="hash-link" aria-label="Direct link to Time complexity of all Array functions" title="Direct link to Time complexity of all Array functions">​</a></h3>
<p><em>Maybe this is useful in the future, while I still remembers</em></p>
<ul>
<li><code>n</code> denote the length of the original array</li>
<li><code>k</code> usually denote the input array length</li>
</ul>
<table><thead><tr><th>Functions</th><th>Time Complexity</th></tr></thead><tbody><tr><td>at</td><td><code>O(1)</code></td></tr><tr><td>concat</td><td><code>O(n)</code> where n being the length of the second array</td></tr><tr><td>copyWithin</td><td><code>O(n)</code> or less where n being the number of items to copy</td></tr><tr><td>entries</td><td><code>O(1)</code> where each iteration is <code>O(1)</code></td></tr><tr><td>every</td><td><code>O(n)</code> or less</td></tr><tr><td>fill</td><td><code>O(n)</code> or less</td></tr><tr><td>filter</td><td><code>O(n)</code> if callback is <code>O(1)</code></td></tr><tr><td>find</td><td><code>O(n)</code> if callback is <code>O(1)</code></td></tr><tr><td>findIndex</td><td><code>O(n)</code> if callback is <code>O(1)</code></td></tr><tr><td>findLast</td><td><code>O(n)</code> if callback is <code>O(1)</code></td></tr><tr><td>findLastIndex</td><td><code>O(n)</code> if callback is <code>O(1)</code></td></tr><tr><td>flat</td><td><code>O(n ^ d)</code> in the worst case where d is the depth</td></tr><tr><td>flatMap</td><td><code>O(n)</code> if callback is <code>O(1)</code></td></tr><tr><td>forEach</td><td><code>O(n)</code> if callback is <code>O(1)</code></td></tr><tr><td>includes</td><td><code>O(n)</code> or less</td></tr><tr><td>indexOf</td><td><code>O(n)</code> or less</td></tr><tr><td>join</td><td><code>O(n)</code></td></tr><tr><td>keys</td><td><code>O(1)</code> where each iteration is <code>O(1)</code></td></tr><tr><td>lastIndexOf</td><td><code>O(n)</code> or less</td></tr><tr><td>map</td><td><code>O(n)</code> if callback is <code>O(1)</code></td></tr><tr><td>pop</td><td><code>O(1)</code></td></tr><tr><td>push</td><td><code>O(k)</code></td></tr><tr><td>reduce</td><td><code>O(n)</code> if callback is <code>O(1)</code></td></tr><tr><td>reduceRight</td><td><code>O(n)</code> if callback is <code>O(1)</code></td></tr><tr><td>reverse</td><td><code>O(n)</code></td></tr><tr><td>shift</td><td><code>O(n)</code></td></tr><tr><td>slice</td><td><code>O(n)</code> or less</td></tr><tr><td>some</td><td><code>O(n)</code> or less</td></tr><tr><td>sort</td><td><code>O(n log n)</code> on average</td></tr><tr><td>splice</td><td><code>O(n + k)</code> or less</td></tr><tr><td>toLocaleString</td><td><code>O(n)</code></td></tr><tr><td>toReversed</td><td><code>O(n)</code></td></tr><tr><td>toSorted</td><td><code>O(n log n)</code></td></tr><tr><td>toSpliced</td><td><code>O(n + k)</code></td></tr><tr><td>toString</td><td><code>O(n)</code></td></tr><tr><td>unshift</td><td><code>O(n + k)</code></td></tr><tr><td>values</td><td><code>O(1)</code> where each iteration is <code>O(1)</code></td></tr><tr><td>with</td><td><code>O(1)</code></td></tr></tbody></table>
<ul>
<li>For <code>flat</code>, that is just the absolute worse case scenario where n is the
average length of every array exists, while each array contains n number of
arrays within, like an exponential tree</li>
<li><code>push</code>, <code>splice</code>, <code>toSpliced</code> and <code>unshift</code> depend on the input size <code>k</code> of
the elements to be added to the array</li>
<li>For <code>toLocaleString</code> and <code>toString</code>, I am not sure, but I assume the same as
<code>join</code> where it accesses each element and concatenate to a string, so O(n)</li>
</ul>]]></content>
        <author>
            <name>Ethan Pang</name>
            <uri>https://ethanppl.com/</uri>
        </author>
        <category label="Computers" term="Computers"/>
        <category label="JavaScript" term="JavaScript"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[How does the 6 digits number in multifactor authentication works?]]></title>
        <id>https://wiki.ethanppl.com/blog/2024/12/28/mfa-totp</id>
        <link href="https://wiki.ethanppl.com/blog/2024/12/28/mfa-totp"/>
        <updated>2024-12-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[What is that 6 digits number in the authenticator app? Why those numbers change]]></summary>
        <content type="html"><![CDATA[<p>What is that 6 digits number in the authenticator app? Why those numbers change
every 30 seconds? How are they generated? How does the server know that this is
the correct number? How does it work offline?</p>
<p>Also, why do we need to scan a QR code when setting it up? What does the QR code
contains? How secure is the whole system? What are the limitations? What to
consider if implementing a server to support this authentication method?</p>
<p>We will start with a some simple intuitive explanation and slowly go into the
technical details and algorithms. Hopefully you can answer all the above
questions after reading this. This is not a high level explanation of why it's
good to have MFA, or how to deploy it, there are
<a href="https://www.microsoft.com/en-us/security/blog/2020/01/15/how-to-implement-multi-factor-authentication/" target="_blank" rel="noopener noreferrer">plenty</a>
<a href="https://www.cyber.gov.au/resources-business-and-government/maintaining-devices-and-systems/system-hardening-and-administration/system-hardening/implementing-multi-factor-authentication" target="_blank" rel="noopener noreferrer">of</a>
<a href="https://www.okta.com/resources/whitepaper/8-steps-for-effectively-deploying-mfa/" target="_blank" rel="noopener noreferrer">resources</a>
<a href="https://auth0.com/blog/multifactor-authentication-mfa/" target="_blank" rel="noopener noreferrer">explaining</a> that
already. This article focus on the details of the technology under the hood.</p>
<p>If you are ready, let's get started. First, we need to understand what is a
factor means in multifactor authentication.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-a-factor">What is a "factor"?<a href="https://wiki.ethanppl.com/blog/2024/12/28/mfa-totp#what-is-a-factor" class="hash-link" aria-label="Direct link to What is a &quot;factor&quot;?" title="Direct link to What is a &quot;factor&quot;?">​</a></h2>
<p>A factor is like a key for a different kind of locks. Imagine a door has only 1
lock, then everyone who has the key to that lock can open the door. Multifactor
is like having multiple locks on the doors that require different keys. Even if
you lost 1 key accidentally, the door is still locked.</p>
<p>In digital systems, usually the lock is the username and password. If this is
the only factor, if someone can steal or guess your password, then your account
is compromised. If there is an extra factor, usually in a different format, like
authenticator app or a separate physical security key, then your account will be
secure even if your password is leaked.</p>
<p>In <a href="https://arxiv.org/abs/2305.00945" target="_blank" rel="noopener noreferrer">a study conducted by Microsoft in 2023</a>,
MFA reduces the risk of being compromised by 99.22%! Also, dedicated
authenticator app like Microsoft Authenticator outperform SMS-based
authentication.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="time-based-one-time-password-totp">Time-based one-time password (TOTP)<a href="https://wiki.ethanppl.com/blog/2024/12/28/mfa-totp#time-based-one-time-password-totp" class="hash-link" aria-label="Direct link to Time-based one-time password (TOTP)" title="Direct link to Time-based one-time password (TOTP)">​</a></h2>
<p>This article will focus on explaining these authenticator apps, the one you see
6 digits number changing every 30 seconds. It is called time-based one-time
password, TOTP in short. We will know how does the TOTP algorithm generate that
6 digits number, why does it change every 30 seconds, how does the server know
the same 6 digits number even if the authenticator app is offline.</p>
<p><img decoding="async" loading="lazy" alt="A typical authenticator app" src="https://wiki.ethanppl.com/assets/images/mfa-totp-app-92d78cd6ea842942be4153d5f887cdf4.webp" width="706" height="324" class="img_ev3q"></p>
<p>The formal document that defines how TOTP should work is defined in
<a href="https://datatracker.ietf.org/doc/html/rfc6238" target="_blank" rel="noopener noreferrer">RFC 6238</a>. TOTP is a way to
generates a user-friendly value based on the current time, called the one time
password (OTP), to authenticate the user. The one time password is used once
only and cannot be reused. But before we go deep into the terminologies and how
all these work, let's look at a simpler, imaginative scenario to understand the
idea behind TOTP. Let's imagine we need to secure a phone call.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="explain-like-i-am-five">Explain like I am five<a href="https://wiki.ethanppl.com/blog/2024/12/28/mfa-totp#explain-like-i-am-five" class="hash-link" aria-label="Direct link to Explain like I am five" title="Direct link to Explain like I am five">​</a></h2>
<p>Imagine Alice and Bob phone call each other to share updates and secrets, but
they are often scared that the phone is not picked up by one of them but
Mallory, so they both come up with a secret phrase, "chipmunk" and "chinchilla".
Every time before the phone call starts, Alice and Bob need to tell their secret
phrase. Only if both sides are correct, they start talking. It works well until
one time Bob realize Mallory is listening from behind and hear the secret phrase
"chinchilla", what can they do?</p>
<p><img decoding="async" loading="lazy" alt="Phone call with secret phrase" src="https://wiki.ethanppl.com/assets/images/phone-5801a5ec8d9102fa14ee7f9993bdd901.webp" width="850" height="346" class="img_ev3q"></p>
<p>Turns out, there is a special species of magic parrot. The magic parrots are
always twin. At any given time, you can ask the magic parrot to say a random
word. The two magic parrots will say the same word even if they are physical
separated far away.</p>
<p><img decoding="async" loading="lazy" alt="Phone call secured by magic parrot twins" src="https://wiki.ethanppl.com/assets/images/phone-with-parrot-6503e7561bf57e58f830772debda7e7c.webp" width="1282" height="532" class="img_ev3q"></p>
<p>Now, as long as Alice and Bob keep their magic parrot secure to them, they are
safe. Even if Mallory knows the secret phrase "chipmunk" or "chinchilla", she
cannot impersonate Alice and Bob because she doesn't have that specific magic
parrot. She cannot reuse "goose" either because this word is randomly generated
by the magic parrot and used once only.</p>
<p>If you understand why the magic parrot makes it more secure, then you know why
TOTP makes authentication systems more secure. The magic parrot is the second
factor. In TOTP, "chipmunk" or "chinchilla", is your username and password. And
"goose" is the TOTP, the generated one-time password. The magic parrot is the
TOTP algorithm. It can generate a random value at any given time.</p>
<p>In the real world, there is no magic parrot twins that work like this, but we
can create something digitally that works in the same way.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="totp-in-detail">TOTP in detail<a href="https://wiki.ethanppl.com/blog/2024/12/28/mfa-totp#totp-in-detail" class="hash-link" aria-label="Direct link to TOTP in detail" title="Direct link to TOTP in detail">​</a></h2>
<p>This is the typical flow of an authentication with TOTP.</p>
<p><img decoding="async" loading="lazy" alt="The typical flow of TOTP authentication" src="https://wiki.ethanppl.com/assets/images/totp-sequence-f963aee0e7459a8de39f8cfe67a239a1.webp" width="1262" height="766" class="img_ev3q"></p>
<ol>
<li>The user first login with username and password, or any other authentication
methods like
<a href="https://en.wikipedia.org/wiki/Single_sign-on" target="_blank" rel="noopener noreferrer">single signed-on (SSO)</a></li>
<li>The server verifies the identity and confirm that the user has enabled
multifactor authentication, so the server requests the user to provide the
TOTP</li>
<li>The user get the TOTP from where it is stored, e.g. authenticator app or
password managers, and submits it</li>
<li>The server also generates the TOTP from its end and compare the two is the
same</li>
</ol>
<p>We are going to focus on step 3 and 4, particularly how the user and the server
are able to generate the TOTP without communicating at that point.</p>
<p>To understand how TOTP is generated and why it is secure, we need to know three
basic ingredients. A hash function, the Unix timestamp and a shared secret
between the server and the user.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="hash-functions">Hash functions<a href="https://wiki.ethanppl.com/blog/2024/12/28/mfa-totp#hash-functions" class="hash-link" aria-label="Direct link to Hash functions" title="Direct link to Hash functions">​</a></h3>
<p><a href="https://en.wikipedia.org/wiki/Hash_function" target="_blank" rel="noopener noreferrer">Hash functions</a> in short are any
one-way function that can map any data into another fixed size value. It has a
few key properties that you need to keep in mind:</p>
<ol>
<li>Given the same data, it will always generate the same hash</li>
<li>Given a different set of data, it will always generate a different hash</li>
<li>When given a hash, it’s impossible to guess or know what is the data that
generated this hash</li>
</ol>
<p>Based on the first two properties, hash functions should never collide. The
number of bits in a hash is large, usually 256 or above. At that scale, a
collision is extremely unlikely. If you don't believe this work you may watch
<a href="https://youtu.be/S9JGmA5_unY" target="_blank" rel="noopener noreferrer">this video from 3blue1brown on how secure is 256 bits</a>
or read about the
<a href="https://en.wikipedia.org/wiki/Birthday_problem" target="_blank" rel="noopener noreferrer">birthday problem</a>.</p>
<p>Hash functions should also be one-way. One intuitive way to understand one-way
function is multiplication and factoring. Multiplying two numbers together is
kind of like "one-way". It is relatively easy to calculate 89 × 67 = 5963, I
believe you can do it with a pen and paper in a minute. But if only 5963 is
given, and you were asked to find out which two numbers multiply to 5963, it's
way harder. Hope this can convince you there are such one-way, irreversible
mathematical operations exist. They aren't absolutely impossible to reverse,
just way harder.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="unix-time">Unix time<a href="https://wiki.ethanppl.com/blog/2024/12/28/mfa-totp#unix-time" class="hash-link" aria-label="Direct link to Unix time" title="Direct link to Unix time">​</a></h3>
<p>The second basics we need to understand is there is a globally universal
timestamp. Even though your computer might be disconnected from the internet, as
long as it has battery and the clock is correct, all computers should share the
same timestamp.</p>
<p>In computers, there is a standard way to define the time, which is the
<a href="https://en.wikipedia.org/wiki/Unix_time" target="_blank" rel="noopener noreferrer">Unix time</a>. That is the number of
seconds since 00:00:00 UTC on 1 January 1970. There are some quirks and
exceptions (e.g. leap seconds), but all computers should be able to calculate
the same Unix time at any given moment.</p>
<p>The timestamp is the important let the server and user generates the TOTP code
separately without communication to each other.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="shared-secret">Shared secret<a href="https://wiki.ethanppl.com/blog/2024/12/28/mfa-totp#shared-secret" class="hash-link" aria-label="Direct link to Shared secret" title="Direct link to Shared secret">​</a></h3>
<p>The last but not least is there is a shared secret only know by the server and
the user. When you use the authenticator app to scan a QR code to register the
multifactor authentication, that is when the shared secret is exchanged.</p>
<p>The shared secret should not be revealed after the initial exchange. The shared
secret should be random, unique for each user, and has a high
<a href="https://en.wikipedia.org/wiki/Entropy_(information_theory)" target="_blank" rel="noopener noreferrer">entropy</a> that
it's not possible to be guessed or brute forced.</p>
<p>In the authenticator app example, the authenticator app gets the shared secret
from the QR code and stores it, which usually is just random bytes of human
unreadable data. The server also stores a copy of the secret uniquely linked to
this user.</p>
<p>Now we go to the actual algorithm.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="totp-algorithm">TOTP algorithm<a href="https://wiki.ethanppl.com/blog/2024/12/28/mfa-totp#totp-algorithm" class="hash-link" aria-label="Direct link to TOTP algorithm" title="Direct link to TOTP algorithm">​</a></h3>
<p>The TOTP algorithm works like this:</p>
<ol>
<li>Using a hash functions to hash the shared secret recursively</li>
<li>Using the current timestamp to determine how many times to hash</li>
<li>Calculate the modulus of the hash based on the size of the TOTP, this gives a
human-readable 6 digits number</li>
</ol>
<p>You can read more of the detail algorithm in
<a href="https://datatracker.ietf.org/doc/html/rfc6238#section-4" target="_blank" rel="noopener noreferrer">section 4</a> of the RFC,
which is based on top of the HMAC-based One-Time Password (HOTP) algorithm
defined in <a href="https://datatracker.ietf.org/doc/html/rfc4226" target="_blank" rel="noopener noreferrer">RFC 4226</a>.</p>
<p>The hash function used as specified in the RFC 6238 should be
<a href="https://en.wikipedia.org/wiki/Secure_Hash_Algorithms" target="_blank" rel="noopener noreferrer">SHA-256 or SHA-512</a>. This
is also agreed and stored in the authenticator app when scanning the QR code.
Because hash functions generate different value given different input, without
knowing the shared secret, it is impossible to generate the same number. This is
the reason why at any given time, there is only 1 valid number for this user,
and the server is able to verify that. Also, because hash functions are one-way,
even if the TOTP code is exposed, it is not possible to guess the shared secret
unless brute force.</p>
<p>In this algorithm, the timestamp used is not the exact Unix time, otherwise the
6 digits number will change every second. It will be impractical to ask a user
to enter 6 digits and submit within a second. The longer the time before
changing the number, the better the usability for the users, because it's less
likely the number changed midway when the user is inputting it. But the longer
it is, the less secure it is, because there is a larger window that the TOTP is
exposed. It's always a trade-off. The RFC 6238 recommends a time step of 30
seconds, which means the number only change every 30 seconds. If you open your
authenticator app now, and reference a clock, you should see the number
refreshes at the 00 or 30 seconds mark in a minute, unless it is not using 30
seconds as the time step.</p>
<p>As you can see, even if the authenticator app is offline and there is no
communication between your phone and the server, both of them can generate the
same 6 digits number.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="resynchronization">Resynchronization<a href="https://wiki.ethanppl.com/blog/2024/12/28/mfa-totp#resynchronization" class="hash-link" aria-label="Direct link to Resynchronization" title="Direct link to Resynchronization">​</a></h3>
<p>It is possible that there are delays in the network connection, or the clock on
the user device is delayed, or the user input the number too slow. As such, the
RFC recommends the validation server support resynchronization. For example, the
current and the last 2 TOTP generated are all valid. The number of steps
backward to consider valid is again a trade-off between usability and security.
The server may optionally record the drift that the user clock has and adjust
for that in future validations.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="security-considerations">Security Considerations<a href="https://wiki.ethanppl.com/blog/2024/12/28/mfa-totp#security-considerations" class="hash-link" aria-label="Direct link to Security Considerations" title="Direct link to Security Considerations">​</a></h2>
<p>There are various best practices for TOTP to be secure.</p>
<p>First, the user must keep their TOTP secret a secret. It is assumed that the
secret is securely stored in authenticator app or password manager. That should
not be accessible over the internet. Therefore,
<a href="https://news.ycombinator.com/item?id=35708869" target="_blank" rel="noopener noreferrer">it is controversial</a> when Google
Authenticator supports syncing and backing up secrets to Google.</p>
<p>All communications between the user and the server should be done over a secure
channel, e.g. HTTPS. It is true that revealing the TOTP will not leak the shared
secret, but it's best to not leak it at all. The initialization phase must be
communicated over secure channel. If the initial setup QR code is leaked, the
attacker has access to the shared secret and the attacker can always generate
the TOTP.</p>
<p>The TOTP code should also be used once only, as specified in the name, one-time
password. For example, if the user login to the account using a TOTP code, that
code should not be valid any more. This is to prevent an attacker that has
access to the newly sent TOTP code from reusing that code to gain access. The
user must wait for 30 seconds for the next code to be generated to log in.</p>
<p>Given all these practices, the best possible attack against this system should
just be brute forcing to guess the shared secret. And as mentioned, the shared
secret should be long enough that it's not possible to guess and brute force in
reasonable timeframe.</p>
<p>TOTP is still vulnerable to phishing attacks. Say the user is logging into a
fake authentication website, or willing transferring the generated TOTP to
attackers. Attackers can then proxy or input the TOTP code in real time to gain
access to the system.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="implementation-details">Implementation Details<a href="https://wiki.ethanppl.com/blog/2024/12/28/mfa-totp#implementation-details" class="hash-link" aria-label="Direct link to Implementation Details" title="Direct link to Implementation Details">​</a></h2>
<p>There are two things to set up for the server. Initializing the TOTP and
authentication the TOTP.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-totp">Setting up TOTP<a href="https://wiki.ethanppl.com/blog/2024/12/28/mfa-totp#setting-up-totp" class="hash-link" aria-label="Direct link to Setting up TOTP" title="Direct link to Setting up TOTP">​</a></h3>
<p>When a user set up TOTP, the server usually provides a QR code. It is the
easiest way and foolproof way to exchange the shared secret. The user can use a
separate device to get the secret without the need to copy and paste. Most
phones have a camera nowadays, and password manager browser extensions (e.g.
<a href="https://support.1password.com/one-time-passwords/" target="_blank" rel="noopener noreferrer">1Password</a>) can scan QR
codes as well. QR codes have error correction by default and since users do not
need to type in the unreadable secret, making it less likely to make mistakes.</p>
<p>The QR code is usually a URL in the format of</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">otpauth://totp/&lt;issuer&gt;:&lt;account&gt;?secret=&lt;RandomBytesOfData&gt;</span><br></span></code></pre></div></div>
<ul>
<li><code>otpauth</code> is the scheme</li>
<li><code>totp</code> is the type of OTP that we are using</li>
<li>The issuer is usually the organization, e.g. Google, Microsoft</li>
<li>The account is usually your username or email</li>
<li>The secret must be present in the parameters, usually a long string</li>
<li>There are optional parameters like <code>algorithm</code> for the hash function used,
<code>period</code> which defaults to 30 as mentioned above, and <code>digits</code> for the number
of digits in the OTP code, which is usually 6</li>
<li>You can read more about the URL format of TOTP in
<a href="https://docs.yubico.com/yesdk/users-manual/application-oath/uri-string-format.html" target="_blank" rel="noopener noreferrer">this page</a></li>
</ul>
<p>Before the user account has MFA enabled, the server should ask for a TOTP code
to verify that the user correctly saved the shared secret. Only if that code is
valid, MFA is successfully enabled. The server needs to handle the state where
the shared secret is generated and stored, but the MFA is not enabled yet.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="recovery-codes">Recovery Codes<a href="https://wiki.ethanppl.com/blog/2024/12/28/mfa-totp#recovery-codes" class="hash-link" aria-label="Direct link to Recovery Codes" title="Direct link to Recovery Codes">​</a></h3>
<p>In practical use, it is possible that users lose access to their phone or
wherever the TOTP codes are generated. It is a challenging aspect because the
easier it is for a user to recover the account after failed to log in with MFA
means the easier it is for attacker to use the same method to compromise the
account.</p>
<p>One way to recover the account is the server provides some single-use recovery
codes, usually some longer random strings. They are usually shown to the user
once after the MFA is first successfully enabled. Each recovery codes should
only be used once only, same as how TOTP codes can only be used once to prevent
replay by an attacker.</p>
<p>During authentication, the system should allow the user to input recovery codes
and if matches, the user is logged in but that recovery code is invalidated. The
users are responsible for keeping the recovery codes secure and use it only when
TOTP codes are not available.</p>
<p>Alternative recovery methods includes</p>
<ul>
<li>Mailing a one-use recovery codes to the user</li>
<li>Require the user to contacting the support team to verify the identity before
resetting the MFA</li>
<li>Require users to set up multiple MFA to limit the likelihood of losing access
to all methods at once</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="authenticating-totp">Authenticating TOTP<a href="https://wiki.ethanppl.com/blog/2024/12/28/mfa-totp#authenticating-totp" class="hash-link" aria-label="Direct link to Authenticating TOTP" title="Direct link to Authenticating TOTP">​</a></h3>
<p>Before supporting MFA, the login endpoint of the server will either return login
success or login failed. With TOTP supported, the server has a third response,
indicating the credentials are valid but a TOTP code is required because MFA is
enabled.</p>
<p>In this response, the server should also return a unique token, (e.g. a JWT
token) to the frontend. This token will expire in a short period of time, like 5
minutes. It has to be submitted to a separate TOTP validation endpoint together
to signal that this particular user already passed the username &amp; password
validation in a previous step. The server use this token to determine which user
is trying to log in and which TOTP shared secret to use to validate the TOTP
code submitted. Without this step, a user can just log in with a TOTP code in
the TOTP endpoint without even having the password validation step, which means
the system is back to single factor authentication. Another option is the
frontend stores the previously inputted username and password, and submit that
to the server alongside the TOTP code.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="libraries-and-third-party-service">Libraries and third party service<a href="https://wiki.ethanppl.com/blog/2024/12/28/mfa-totp#libraries-and-third-party-service" class="hash-link" aria-label="Direct link to Libraries and third party service" title="Direct link to Libraries and third party service">​</a></h3>
<p>Knowing how the algorithm works behind the scenes is great, but you should never
implement the algorithms yourself. Use a library instead. For example,
<a href="https://www.npmjs.com/package/otpauth" target="_blank" rel="noopener noreferrer"><code>otpauth</code></a> in the NPM registry for Node,
Deno, Bun runtime in JavaScript.</p>
<p>There are also third party services that provide authentication or MFA as a
service. It is good for applications that do not have resources to implement
their own authentication system, but also require careful consideration for the
security, integrity and availability of the third party service.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="useful-links">Useful links<a href="https://wiki.ethanppl.com/blog/2024/12/28/mfa-totp#useful-links" class="hash-link" aria-label="Direct link to Useful links" title="Direct link to Useful links">​</a></h2>
<ul>
<li><a href="https://cheatsheetseries.owasp.org/cheatsheets/Multifactor_Authentication_Cheat_Sheet.html" target="_blank" rel="noopener noreferrer">OWASP Multifactor Authentication Cheat Sheet</a></li>
<li><a href="https://datatracker.ietf.org/doc/html/rfc6238" target="_blank" rel="noopener noreferrer">RFC 6238 TOTP: Time-Based One-Time Password Algorithm</a></li>
<li><a href="https://en.wikipedia.org/wiki/Multi-factor_authentication" target="_blank" rel="noopener noreferrer">Wikipedia: Multi-factor Authentication</a></li>
<li><a href="https://en.wikipedia.org/wiki/Time-based_one-time_password" target="_blank" rel="noopener noreferrer">Wikipedia: Time-based One-time Password</a></li>
</ul>]]></content>
        <author>
            <name>Ethan Pang</name>
            <uri>https://ethanppl.com/</uri>
        </author>
        <category label="Auth" term="Auth"/>
        <category label="Computers" term="Computers"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[How I use keyd to remap my keyboard in Ubuntu 22.04 with Wayland]]></title>
        <id>https://wiki.ethanppl.com/blog/2024/09/08/keyd</id>
        <link href="https://wiki.ethanppl.com/blog/2024/09/08/keyd"/>
        <updated>2024-09-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Think about how you use your keyboard. Imagine how good it would be if your]]></summary>
        <content type="html"><![CDATA[<p>Think about how you use your keyboard. Imagine how good it would be if your
<code>CapsLock</code> can be used as <code>Ctrl</code>, how much better it would be for your left
pinky? That is the power of remapping the keyboard. It means you can customize
the functionality of each key on your keyboard.</p>
<p>This is a walkthrough of my setup in Ubuntu using <code>keyd</code>. A guide I wish it
existed when I first try to find out how to remap my keyboard in Ubuntu.</p>
<p><img decoding="async" loading="lazy" src="https://imgs.xkcd.com/comics/borrow_your_laptop.png" alt="xkcd 1806" class="img_ev3q"></p>
<p><em><a href="https://xkcd.com/1806/" target="_blank" rel="noopener noreferrer">xkcd 1806: borrow your laptop</a></em></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-i-remap-my-keyboard">Why I Remap my Keyboard<a href="https://wiki.ethanppl.com/blog/2024/09/08/keyd#why-i-remap-my-keyboard" class="hash-link" aria-label="Direct link to Why I Remap my Keyboard" title="Direct link to Why I Remap my Keyboard">​</a></h2>
<p>After I <a href="https://wiki.ethanppl.com/blog/2024/02/29/dual-boot-guide">dual-boot with Ubuntu</a> and used it as
my daily driver for work and personal use, one key thing I missed is
<a href="https://www.autohotkey.com/" target="_blank" rel="noopener noreferrer">AutoHotkey</a>. It is a software that I used to remap
my keyboard in Windows and create shortcuts and "hotstrings". For example,</p>
<ul>
<li>Remapping <code>CapsLock</code> to <code>Ctrl</code> on hold, but works as <code>Esc</code> when clicked alone</li>
<li><code>z+d</code> to scroll down and <code>z+u</code> to scroll up, and other ways to move my mouse</li>
<li><code>z+e</code> and <code>z+g</code> to insert my email addresses</li>
<li><code>|!=</code>, <code>|-&gt;</code>, <code>|&lt;-</code> will be replaced by not equal (≠), right arrow (→) and
left arrow (←), etc., automatically</li>
</ul>
<p>I shared
<a href="https://github.com/ethanppl/ahk" target="_blank" rel="noopener noreferrer">my AHK configuration in this repository</a> if
you are interested. I might write about it later too.</p>
<p>I think remapping keyboard is one of the most important change I made to my
laptop ever since I know how to use a computer. It is like the first time you
discovered you can use <code>Ctrl+C</code> rather than right click and select copy. I
highly encourage everyone to try it, especially for keys like <code>CapsLock</code> that is
in a very convenient location but is rarely used.</p>
<p>So once I boot to Ubuntu, the first thing I wanted to do is to replicate this
setup. Unfortunately, AHK only works for Windows, so I need to look for
alternatives. The first difficulty that you might face as well is Ubuntu 22.04
by default uses <a href="https://en.wikipedia.org/wiki/Wayland_(protocol)" target="_blank" rel="noopener noreferrer">Wayland</a> as
the window system, but a lot of tools available online works for
<a href="https://en.wikipedia.org/wiki/X_Window_System" target="_blank" rel="noopener noreferrer">X11</a> only. For example, there is
<a href="https://github.com/autokey/autokey" target="_blank" rel="noopener noreferrer">AutoKey</a> that seems to be popular but only
works for X11.</p>
<p>I first tried <a href="https://github.com/sezanzeb/input-remapper" target="_blank" rel="noopener noreferrer"><code>input-remapper</code></a>. It
looks promising with nice graphical user interface, but it didn't work out when
I tried to add more complicated logics. I also tried
<a href="https://github.com/boppreh/keyboard" target="_blank" rel="noopener noreferrer">keyboard</a>, a Python module which allows me
to create custom keyboard events in Python code. It's like coding my own daemon,
but I found it too much overhead and quite laggy. In the end, I found
<a href="https://wiki.archlinux.org/title/Input_remap_utilities" target="_blank" rel="noopener noreferrer">a list of input remapping utilities</a>
provided by Arch Linux wiki. Going through the list and I chose
<a href="https://github.com/rvaiya/keyd" target="_blank" rel="noopener noreferrer"><code>keyd</code></a> which works for me quite well over the
past year.</p>
<p>If you are using Windows, you can check
<a href="https://www.autohotkey.com/" target="_blank" rel="noopener noreferrer">AutoHotkey</a> as linked above. If you are on Mac, I
read that
<a href="https://karabiner-elements.pqrs.org/docs/getting-started/features/" target="_blank" rel="noopener noreferrer">Karabiner</a>
is good, but I have not used a Mac before. If your keyboard supports it,
<a href="https://docs.qmk.fm/#/newbs" target="_blank" rel="noopener noreferrer">QMK</a>/<a href="https://www.caniusevia.com/docs/specification" target="_blank" rel="noopener noreferrer">VIA</a>
might be good for you. Even if <code>keyd</code> doesn't work for you, you may follow along
to get some inspiration even though the syntax of the config is not the same.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="basic-concepts-in-keyd">Basic Concepts in <code>keyd</code><a href="https://wiki.ethanppl.com/blog/2024/09/08/keyd#basic-concepts-in-keyd" class="hash-link" aria-label="Direct link to basic-concepts-in-keyd" title="Direct link to basic-concepts-in-keyd">​</a></h2>
<p>The very first thing to understand in <code>keyd</code> config is it operates in terms of
layers. The most intuitive way for me to understand a layer is the <code>Shift</code> key.
When the <code>Shift</code> key is pressed and hold, a different layer is activated and all
the keys on your keyboard have a different meaning. And what <code>keyd</code> allows you
to do is to define custom layers, that is, defining how the layers are activated
and deactivated, and what each key means in each of the defined layer.</p>
<p>The major reason I select <code>keyd</code> is it works in X, sway and gnome in Wayland.
Second, it natively supports key overloading, which allows me to configure the
<code>CapsLock</code> key to behave as <code>Ctrl</code> on hold while <code>Esc</code> when tapped. From what I
test, it is instant and fast too.</p>
<p>To get started, install <code>keyd</code> from source. Clone
<a href="https://github.com/rvaiya/keyd" target="_blank" rel="noopener noreferrer">the repository</a> and build it from source.
Follow the instructions in the
<a href="https://github.com/rvaiya/keyd?tab=readme-ov-file#from-source" target="_blank" rel="noopener noreferrer">README</a> to
install it.</p>
<p>Here are some helpful commands to know:</p>
<ul>
<li><code>sudo systemctl enable keyd</code>: start <code>keyd</code>, probably run it once in your
lifetime</li>
<li><code>sudo keyd reload</code>: reload the config every time after you edit the config</li>
<li><code>sudo keyd monitor</code>: print key events, useful to debug what is remapped</li>
<li><code>keyd list-keys</code>: list all the valid key names, useful to check the
possibilities</li>
<li><code>backspace+escape+enter</code> keyboard combo: terminate <code>keyd</code> anywhere anytime in
case you severely messed up (happened once to me)</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="sharing-my-configuration">Sharing my Configuration<a href="https://wiki.ethanppl.com/blog/2024/09/08/keyd#sharing-my-configuration" class="hash-link" aria-label="Direct link to Sharing my Configuration" title="Direct link to Sharing my Configuration">​</a></h2>
<p>Here is the full config if you are interested. I will explain it line by line
below.</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[ids]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">*</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[main]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Maps capslock to escape when pressed and control when held.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">capslock = overload(control, esc)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Maps z to a custom layer, but just 'z' when pressed.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">z = overload(z, z)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Shift layer</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[shift:S]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## shift+capslock is capslock</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">capslock = capslock</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># Custom z layer</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[z]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## Escape common patterns</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">i = macro(zi)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">o = macro(zo)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## Emails</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">e = macro(hi@ethanppl.com)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">g = macro(hi@ethanppl.com)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## Simplify complicated shortcut keys</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">v = C-S-v</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">n = C-S-a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">x = A-f4</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">s = command(systemctl suspend)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## Arrows</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">j = down</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">k = up</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">h = left</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">l = right</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">## Media / modifier</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">m = oneshot(media)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">[media]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">j = previoussong</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">k = playpause</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">l = nextsong</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">a = macro({ enter 10ms "Aut 10ms hor 10ms iza 10ms tio 10ms n": space "Bea 10ms rer space C-v)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="main-layer">Main layer<a href="https://wiki.ethanppl.com/blog/2024/09/08/keyd#main-layer" class="hash-link" aria-label="Direct link to Main layer" title="Direct link to Main layer">​</a></h3>
<p>Let's go through it line by line.</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">capslock = overload(control, esc)</span><br></span></code></pre></div></div>
<p>This is the most important feature that I need, as introduced in the beginning.
According to the man page, <code>overload(&lt;layer&gt;, &lt;action&gt;)</code> "activates the layer on
hold while executes the action on tap". This line means <code>CapsLock</code> will act like
<code>Ctrl</code> when used with other keys. But when I tap it only, it works as <code>Esc</code>.
This makes key combo like <code>Ctrl+C</code> way easier than before, where the <code>Ctrl</code> key
is in the bottom left. It also makes <code>Esc</code> easier, which is used a lot in Vim.
This single line is the biggest reason why I picked <code>keyd</code>.</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">z = overload(z, z)</span><br></span></code></pre></div></div>
<p>This might seem weird when you first look at it, but think about the key <code>z</code> as
its own layer (remember, layer is like the <code>Shift</code> key). So when <code>z</code> is hold, it
activates a <code>z</code> layer, like holding the <code>Shift</code> key activate the shift layer,
but it acts as <code>z</code> when tap alone. This gives me another modifier key (e.g.
<code>Ctrl</code>, <code>Alt</code>, <code>Shift</code>), without overriding what the default keyboard shortcuts
that come with software programs. But before we go into this special <code>z</code> layer,
we need to fix one thing first.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="shift-layer">Shift layer<a href="https://wiki.ethanppl.com/blog/2024/09/08/keyd#shift-layer" class="hash-link" aria-label="Direct link to Shift layer" title="Direct link to Shift layer">​</a></h3>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[shift:S]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">capslock = capslock</span><br></span></code></pre></div></div>
<p>We don't have a <code>CapsLock</code> key after we remap it. What this two lines do is
that, in the shift layer, map <code>CapsLock</code> to work as <code>CapsLock</code>. So to summarize,
right now holding <code>CapsLock</code> is <code>Ctrl</code>, tapping <code>CapsLock</code> once is <code>Esc</code>, and
doing <code>Shift+CapsLock</code> is <code>CapsLock</code>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-z-layer">The <code>z</code> layer<a href="https://wiki.ethanppl.com/blog/2024/09/08/keyd#the-z-layer" class="hash-link" aria-label="Direct link to the-z-layer" title="Direct link to the-z-layer">​</a></h3>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">i = macro(zi)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">o = macro(zo)</span><br></span></code></pre></div></div>
<p>First thing is since I did this custom <code>z</code> layer with AutoHotkey in Windows, I
realized the character <code>i</code> and <code>o</code> commonly follows the <code>z</code> key (e.g. amazing
and amazon). To avoid delay in typing or keys being ignored because I typed <code>i</code>
before releasing <code>z</code>. I mapped press and hold <code>z</code> then <code>i</code> (<code>z+i</code>) to output
<code>zi</code> and <code>z+o</code> to output <code>zo</code> here.</p>
<p>I use <code>+</code> sign to mean press and hold the first key and type the second key. But
<code>keyd</code> use <code>+</code> sign to mean chording, which means two keys to be pressed at the
same time. I didn't use chording in my config and most of the documentation for
keyboard shortcuts often use <code>+</code> sign like <code>Ctrl+c</code>, so I hope it's easy to
understand.</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">e = macro(hi@ethanppl.com)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">g = macro(hi@ethanppl.com)</span><br></span></code></pre></div></div>
<p>Next, I mapped <code>z+e</code> and <code>z+g</code> to two emails that I used the most for
communication and sign in. You will be amazed how many times you type your email
each day. And how much better you don't need to type <code>@</code> anymore.</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">v = C-S-v</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">n = C-S-a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">x = A-f4</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">s = command(systemctl suspend)</span><br></span></code></pre></div></div>
<p>Here I simplified some commonly used shortcuts with the <code>z</code> layer. In <code>keyd</code>,
capitalized <code>C</code>, <code>S</code> and <code>A</code> means <code>Ctrl</code>, <code>Shift</code> and <code>Alt</code> key respectively.
And the hyphen <code>-</code> means press and hold. For example, <code>z+v</code> is an alias of
<code>Ctrl+Shift+V</code> which is often used as paste text only or the markdown preview in
VSCode. <code>z+n</code> is an alias of <code>Ctrl+Shift+a</code> which shows information of all tabs
in Chrome. <code>z+x</code> is an alias of <code>Alt-F4</code> which closes a window. And <code>z+s</code> run
the <code>systemctl suspend</code> command, which will suspend the laptop. I find this
helpful, and somehow I trust it to suspend my laptop successfully more than just
closing the lid of my laptop.</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">j = down</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">k = up</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">h = left</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">l = right</span><br></span></code></pre></div></div>
<p>Here I mapped <code>j</code>, <code>k</code>, <code>h</code>, <code>l</code> to be arrow keys. For example, holding <code>z+l</code>
will produce the right arrow key. The reason for these mappings (e.g. why <code>j</code> is
down) are based on Vim motions. These are helpful because arrows are usually
unreachable unless I move my palm away from my keyboard. Doing <code>z+l</code> allows me
to do things like autocomplete in terminal without moving my palm.</p>
<p>You might also notice that I try to pair keys that are comfortable to reach when
holding <code>z</code> down, like I would avoid mapping anything to <code>z+a</code> that is just
complicated and unnatural to type.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-zm-layer-a-layer-on-top-of-a-layer">The <code>z+m</code> layer, a layer on top of a layer<a href="https://wiki.ethanppl.com/blog/2024/09/08/keyd#the-zm-layer-a-layer-on-top-of-a-layer" class="hash-link" aria-label="Direct link to the-zm-layer-a-layer-on-top-of-a-layer" title="Direct link to the-zm-layer-a-layer-on-top-of-a-layer">​</a></h3>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">m = oneshot(media)</span><br></span></code></pre></div></div>
<p>Still in the <code>z</code> layer, I defined the <code>m</code> key to activate the <code>media</code> layer. It
activates this layer as <code>oneshot</code>. The man page defined <code>oneshot</code> as "If tapped,
activate the supplied layer for the duration of the next key press". It means
the layer is activated once tapped, and it will be toggled off only after
another key is pressed. This means the <code>media</code> layer is activated once we tap
<code>z+m</code>, and we don't have to hold it for it to be active (unlike the <code>shift</code> or
<code>z</code> layer).</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">[media]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">j = previoussong</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">k = playpause</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">l = nextsong</span><br></span></code></pre></div></div>
<p>I discovered these keys when browsing through the <code>keyd list-keys</code> command. And
Ubuntu support these keys. How this works is once I pressed <code>z+m</code>, then tap <code>l</code>,
it will emit a <code>nextsong</code> key press. What this allows me to do is whichever
active window I am in, I can use <code>z+m</code>, then <code>j</code>, <code>k</code>, or <code>l</code> to go back, pause,
or skip a song in Spotify, which I think is pretty amazing.</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">a = macro({ enter 10ms "Aut 10ms hor 10ms iza 10ms tio 10ms n": space "Bea 10ms rer space C-v)</span><br></span></code></pre></div></div>
<p>One last line which doesn't relate to media actually, but I put it in any way.
It is used to help me type the authorization header in GraphQL playground. What
I have to do is copy the token that I want to use, then type <code>z+m</code> and <code>a</code>, it
will help me generate the whole</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">{</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  "Authorization": "Bearer &lt;token_copied_here&gt;"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>It is taking advantage of the GraphQL playground I used that will help me close
the <code>{</code> curly braces. With some trial and error I realize I cannot make <code>keyd</code>
to type all keys at once, so I leave some delay in between and that works
better. Having it run <code>Ctrl+V</code> to paste also helps a lot. I find this saves me
quite some time each day.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="other-thoughts">Other thoughts<a href="https://wiki.ethanppl.com/blog/2024/09/08/keyd#other-thoughts" class="hash-link" aria-label="Direct link to Other thoughts" title="Direct link to Other thoughts">​</a></h2>
<p>There are many other features in <code>keyd</code> that is up to you to explore. I have
added different configs in and out over the year until I settle down to this set
of commands. For example, initially I also configured a shortcut to type
<code>console.log</code> and <code>IO.inspect</code> for TypeScript and Elixir, other than the
authorization header shortcut, but I found out I rarely used them and I removed
them.</p>
<p>I also tried <code>oneshot(shift)</code> which is recommended in the <code>keyd</code> README. But it
didn't work for me. I find out I often tap <code>Shift</code> but changed my mind
afterwards, which makes me accidentally typed characters in uppercase. I also
find out <code>oneshot(shift)</code> doesn't work well with Shift and drag to select in
bulk with mouse because it doesn't understand there is a mouse click and
deactivate the shift layer after I realize the <code>Shift</code> key.</p>
<p>Another thing I found is the <code>command()</code> call doesn't always work. I once
installed <code>copyq</code> to get clipboard history and I configured <code>z+c</code> to be
<code>command(copyq show)</code>, but it never worked. It's not a dealbreaker and I didn't
spend time to debug why.</p>
<p>One thing you might already notice is there is no more hotstrings, which I had
in <a href="https://github.com/ethanppl/ahk" target="_blank" rel="noopener noreferrer">my AutoHotkey configuration</a>. I can no
longer type <code>≠</code>, <code>→</code>, <code>←</code> and other special characters that easily. I realize
configuration like <code>l = ←</code> doesn't work. After reading the man page, I believe I
can make it works by setting up Unicode support, which have some other external
configuration required, and I have not spent the time investigating.</p>
<p>There is also no more mouse control. There is no way to move my mouse with
<code>keyd</code> because all <code>keyd</code> does is to remap keys. I know there are other daemons
in Linux that are designed for that, but I have not tried. There are
<a href="https://github.com/rvaiya/warpd" target="_blank" rel="noopener noreferrer"><code>warpd</code></a> for X11, macOS, or Sway only, but not
Wayland in gnome.</p>
<p>There are also some minor problems that I wish to solve in the future. For
example, <code>Ctrl+&lt;arrows&gt;</code> is a common key combination that I do, but I can't
easily do that with <code>CapsLock+z+&lt;hjkl&gt;</code> because the relative position of
<code>CapsLock</code> and <code>z</code> is too close.</p>
<p>I would like to try mapping specific shortcuts to specific applications too. But
most of the time I find the default configs coming with the app works good
enough. Also, I did not configure any keys to launch an application because I
find <code>meta+&lt;num&gt;</code> good enough to open the windows that are pinned to the task
bar. For example, <code>win+2</code> always open my browser and <code>win+3</code> open VSCode.</p>
<p>That is how my configuration in <code>keyd</code> works and some of my reasoning behind it.
I hope you like this explanation, and it inspires you to remap your keyboard
too. It genuinely improved my life.</p>
<p><em>You might be interested in <a href="https://wiki.ethanppl.com/computers/keyboard">this page about keyboards</a> in
my Wiki too.</em></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="useful-links">Useful links<a href="https://wiki.ethanppl.com/blog/2024/09/08/keyd#useful-links" class="hash-link" aria-label="Direct link to Useful links" title="Direct link to Useful links">​</a></h2>
<ul>
<li><a href="https://github.com/rvaiya/keyd" target="_blank" rel="noopener noreferrer"><code>keyd</code> repository</a></li>
<li><a href="https://github.com/rvaiya/keyd/tree/master/examples" target="_blank" rel="noopener noreferrer"><code>keyd</code> examples</a> by the
creator</li>
<li>If you are stuck, you might find a solution by searching the
<a href="https://github.com/rvaiya/keyd/issues" target="_blank" rel="noopener noreferrer">issues in <code>keyd</code></a></li>
</ul>]]></content>
        <author>
            <name>Ethan Pang</name>
            <uri>https://ethanppl.com/</uri>
        </author>
        <category label="Ubuntu" term="Ubuntu"/>
        <category label="Tips & Configs" term="Tips & Configs"/>
        <category label="Computers" term="Computers"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Don't say it's a weird bug, because it makes you look stupid]]></title>
        <id>https://wiki.ethanppl.com/blog/2024/06/19/weird-issue</id>
        <link href="https://wiki.ethanppl.com/blog/2024/06/19/weird-issue"/>
        <updated>2024-06-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Often when someone is debugging an issue, you might hear:]]></summary>
        <content type="html"><![CDATA[<p>Often when someone is debugging an issue, you might hear:</p>
<ul>
<li>It's a <em>weird bug</em></li>
<li><em>Somehow</em> it throws an error, it's <em>weird</em></li>
<li>I followed the README, but <em>weirdly</em> it doesn't work</li>
</ul>
<p>As if something outside their control misbehaved, they expect someone to help
them eliminate the "weirdness". I find that a bit annoying. What does "weird"
actually mean?</p>
<p>We think "it's weird" because we feel like we did nothing wrong, and the outcome
is not what we intended. We do not understand why something unexpected happened,
and our first instinct is to label it as "it's weird". If the system is "weird",
then it is no longer our problem.</p>
<p>However, is this true? Should you ever say computers behaved "weirdly"?</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="computers-never-lie">Computers never lie<a href="https://wiki.ethanppl.com/blog/2024/06/19/weird-issue#computers-never-lie" class="hash-link" aria-label="Direct link to Computers never lie" title="Direct link to Computers never lie">​</a></h2>
<p>One day, something like this happened. I was interrupted by my colleague because
he found a weird issue. He was debugging an API. While testing it, he missed the
authorization token in one of the service-to-service APIs, and as expected, an
unauthorized error was thrown. His immediate response was "weird", and then seek
help, and told me "it's weird". Huh? Why? What is weird though?</p>
<p>I understand what he felt like "weird" is he supplied a user token already, how
can it be unauthorized? The unauthorized error feels "weird" because the reason
is unknown. However, the reality is one of the APIs the program uses expects
another type of token, and the code missed that. There is nothing "weird", but
that immediate thought of the computer being "weird" makes it sound like he
thinks the computer lied to him, hence weird.</p>
<p>But computers don't lie! Computers are devices that take inputs, process and
then output. If the output is unexpected, either the inputs or the process, or
both are wrong. Data and code are both provided by users, programmers or other
systems. The computer only executes it. There is nothing weird about the
computer itself.</p>
<p>It's even worse when a developer says something is weird with the program that
they wrote. You wrote the program! The computer follows your instructions. How
would you blame something that exactly follows your instructions as weird, and
pretend to take no ownership of the error?</p>
<p>If you think seeing an unauthorized error is weird. It's not the computer
behaving weirdly, instead, it is you not understanding how your code works. It
is you not checking the API documentation before commenting it is weird. It is
not the computer lying to you therefore the code throw an error. Instead, it is
you who made a mistake in the code causing it to throw.</p>
<p>Computers don't lie. Even if they do because of hardware failure or cosmic rays
from light years away flipping a bit in the processor, it's abiding by the law
of physics. Figure out why and own the problem. That's how you learn.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-it-makes-you-look-stupid">Why it makes you look stupid<a href="https://wiki.ethanppl.com/blog/2024/06/19/weird-issue#why-it-makes-you-look-stupid" class="hash-link" aria-label="Direct link to Why it makes you look stupid" title="Direct link to Why it makes you look stupid">​</a></h2>
<p>When blaming something as weird, it sounds like blaming some external factors
causing the weirdness, as if you take no responsibility for the issue, and you
are not eager to understand the problem.</p>
<p>When you get used to saying "it's weird" to anything unexpected, your first
instinct is to make it sound like you have no control. It sounds like you do not
understand the issue only because some "weirdness" is hindering your ability to
understand. But to someone who understands, they know the reason is you lack the
knowledge to understand, not because it's weird. It just sounds like you do not
understand how things work, you are making up excuses, and you are not taking
ownership of figuring it out yourself. It doesn't matter how you think, it might
just be a filler word, but others who listen feel differently. It sounds like
you are stupid.</p>
<p>Even worse is if you are used to settling for the answer of "it's weird", you do
not try to understand what is wrong. You are tempted to seek help immediately.
Once you get used to that, you no longer self-learn and improve. You think you
don't understand just because things are "weird". You learn less.</p>
<p>Imagine if there are network issues, rather than labelling it as a "weird
internet problem", you take the time to investigate, you might figure out how
HTTP calls are structured, the difference between TCP and UDP, how DNS records
propagate, or how routing protocols work. That is how we learn.</p>
<p>So, whenever we are debugging, and when we encounter something unexpected, try
not to say "it's weird".</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="instead-state-the-facts">Instead, state the facts<a href="https://wiki.ethanppl.com/blog/2024/06/19/weird-issue#instead-state-the-facts" class="hash-link" aria-label="Direct link to Instead, state the facts" title="Direct link to Instead, state the facts">​</a></h2>
<p>The fact is we don't know. We find it unexpected because we don't know why, and
there is nothing wrong with stating that. Imagine someone coming to you to ask
you a question, which way is better:</p>
<blockquote>
<p>How do I find the log of this line in the console? Weirdly the log is not
showing up.</p>
</blockquote>
<p>Or,</p>
<blockquote>
<p>How do I find the log of this line in the console? I tried checking the
browser console, but I could not find it. I don't know where it is logged, can
you help?</p>
</blockquote>
<p>See the difference? The first one sounds like the person is blaming some
weirdness that swallowed the console.log. But in fact, it is some piece of code
changing the control flow causing that line not to log. Or it's just looking at
the wrong place to find the log, it could be in the server-side console.</p>
<p>Taking the unauthorized error example, instead of a filler word "weird", he
could comment "I already put in my token, I expect the API calls to be
authorized", and then proceed to find the source of the error.</p>
<p>It's mysterious and weird only because you don't understand how the program you
wrote works. State that you don't know what caused the unexpected behaviour is
better than labelling it as "weird".</p>
<p>Sooner or later you will figure out the issue. It might be some global variables
and side effects in functions. It might be some outdated cache. It might be race
conditions. Or it might be some network failure. No matter what it is, you will
realize there is nothing "weird", just a lack of understanding. So, admit that
it's just you don't know, and you will try to understand it.</p>
<p>To get even better, state what you have tried when seeking help. Divide and
conquer. Check intermediate outputs. Narrow down the scope and state your
findings when asking questions. "I tried checking the browser console". "This
line is logged in the console but not this". This shows that you are eager to
figure it out and learn. You put in the effort to understand the issue and try
to demystify it yourself. Talk to a
<a href="https://en.wikipedia.org/wiki/Rubber_duck_debugging" target="_blank" rel="noopener noreferrer">rubber duck</a> and you might
eventually figure it out all yourself :)</p>
<p>So, avoiding saying "it's weird". State what you found, what you expect to see
and what is unexpected. It will make you sound more credible. A person who takes
ownership.</p>]]></content>
        <author>
            <name>Ethan Pang</name>
            <uri>https://ethanppl.com/</uri>
        </author>
        <category label="Thoughts" term="Thoughts"/>
        <category label="Workplace" term="Workplace"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dual Boot Windows and Ubuntu with Secure Boot and Full Disk Encryption]]></title>
        <id>https://wiki.ethanppl.com/blog/2024/02/29/dual-boot-guide</id>
        <link href="https://wiki.ethanppl.com/blog/2024/02/29/dual-boot-guide"/>
        <updated>2024-02-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A few months ago, I finally took the time to set up dual boot on my laptop. I]]></summary>
        <content type="html"><![CDATA[<p>A few months ago, I finally took the time to set up dual boot on my laptop. I
would love to try Ubuntu as my daily driver again, while keeping the Windows OS
just in case. I treated this as a learning opportunity and configured dual boot
with secure boot still enabled and have full disk encryption configured for both
operating systems.</p>
<p>I wrote this blog because I could not find a single guide explains all steps for
secure boot and full disk encryption sequentially, and these steps interleave
each other. So, I made some notes before the installation to ensure I am doing
the right thing at the right time. For example, I won't accidentally skip a step
about configuring secure boot when I am focused on following another guide about
full disk encryption. This guide is a cleaned up version of the notes that I
compiled for my dual boot set up.</p>
<p>I organized the whole flow into 6 general steps:</p>
<ol>
<li>Preparing in Windows: set boot mode, partition disk, etc.</li>
<li>Configure BIOS: boot mode and other BIOS settings</li>
<li>Configure Ubuntu Partition: boot and data partition</li>
<li>Install Ubuntu: configure dual boot and mounting volumes correctly</li>
<li>Set up <code>crypttab</code> for full disk encryption</li>
<li>Reboot and fix some other issues</li>
</ol>
<p>You can do step 1 and 2 separately. From step 3 onwards, I suggest doing in 1
sitting, which might take an hour or more.</p>
<p>What I have is a Lenovo ThinkPad X1 Carbon 7th Gen laptop, running Windows 11
home and I would like it to dual boot into Ubuntu 22.04. And, as mentioned, with
secure boot enabled in the boot process and full disk encryption for both
operating systems.</p>
<p>Now the system has been running for a few months and things work fine. No issue
with booting or decrypting the disk. It's a good time to document the steps and
share the resources that I found helpful. Hopefully this is helpful to others
and maybe one day my future self.</p>
<p><strong>Dual boot is stressful and it has risk. This guide by no means is complete.</strong>
I have dual boot a few times before, so I kind of know how things look like. To
me, it's helpful to watch YouTube video of people dual booting before doing it
to understand what to expect. Also, check a few more guides, compare and
understand which part is common and which part is custom.</p>
<p><strong>Make sure you have access to guides and notes on mobile or another device.</strong>
You won't be able to access notes in the device during dual boot. Things might
break after dual booting. Maybe the Wi-Fi card driver is not working, or
graphics card config is wrong, or the pointer device is unusable. You will need
another device to access your notes or search the Internet for answers.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="preparation-in-windows">Preparation in Windows<a href="https://wiki.ethanppl.com/blog/2024/02/29/dual-boot-guide#preparation-in-windows" class="hash-link" aria-label="Direct link to Preparation in Windows" title="Direct link to Preparation in Windows">​</a></h2>
<p>Let's start!</p>
<p>The first step is to prepare for dual boot. All the steps in this stage are done
within the Windows. There is no specific order for these steps and no need to do
it in 1 sitting. I had my laptop running on Windows, so all the preparation are
done in Windows.</p>
<ul>
<li>UEFI, not BIOS<!-- -->
<ul>
<li>On Windows: <code>System Information</code> → <code>BIOS Mode</code> = <code>UEFI</code> instead of <code>Legacy</code></li>
<li><code>UEFI</code> is required for secure boot, GUID partition table (GPT) t's faster,
and many other features</li>
<li>Read more here: <a href="https://itsfoss.com/check-uefi-or-bios/" target="_blank" rel="noopener noreferrer">https://itsfoss.com/check-uefi-or-bios/</a></li>
</ul>
</li>
<li>GPT, not MBR<!-- -->
<ul>
<li>On Windows: <code>Disk management</code> → <code>Create and format hard disk partitions</code> →
right-click disk → <code>Properties</code> → <code>Volume</code> → <code>Partition style</code> =
<code>GUID Partition Table (GPT)</code></li>
<li>Read more here: <a href="https://itsfoss.com/check-mbr-or-gpt/" target="_blank" rel="noopener noreferrer">https://itsfoss.com/check-mbr-or-gpt/</a></li>
</ul>
</li>
<li>Use <a href="https://rufus.ie/en/" target="_blank" rel="noopener noreferrer">Rufus</a> to create the bootable USB<!-- -->
<ul>
<li>Get the <a href="https://ubuntu.com/download/desktop" target="_blank" rel="noopener noreferrer">Ubuntu Desktop Image</a></li>
<li>Partition scheme: Select <code>GPT</code></li>
<li>Target System: Select <code>UEFI</code></li>
</ul>
</li>
<li>Backup BitLocker recovery key<!-- -->
<ul>
<li>Make sure your BitLocker recovery key is saved to your Microsoft account, or
any other ways of backing it up</li>
<li>Read more on how to back up in
<a href="https://support.microsoft.com/en-us/windows/back-up-your-bitlocker-recovery-key-e63607b4-77fb-4ad3-8022-d6dc428fbd0d" target="_blank" rel="noopener noreferrer">Microsoft official guide</a></li>
</ul>
</li>
<li>Partition your disk<!-- -->
<ul>
<li>Assuming Windows now taking up the full disk, you will need to shrink the
volume available to Windows and create space for Linux</li>
<li>Disable BitLocker<!-- -->
<ul>
<li>I had to disable BitLocker to shrink the Windows volume</li>
<li>Follow the on-screen instructions for each to decrypt and reboot, it will
take some time</li>
<li>Read more on
<a href="https://www.diskpart.com/articles/resize-bitlocker-partition-windows-10-0725.html" target="_blank" rel="noopener noreferrer">this guide about resize BitLocker partition</a></li>
</ul>
</li>
<li>Partition<!-- -->
<ul>
<li>I used <a href="https://www.diskpart.com/download.html" target="_blank" rel="noopener noreferrer">AOMEI Partition Assistant</a></li>
<li>Read their
<a href="https://www.diskpart.com/safely-partition.html" target="_blank" rel="noopener noreferrer">How to safely partition</a>
tutorial</li>
<li>Other guides I found useful:
<a href="https://www.diskpart.com/help/align-partition.html" target="_blank" rel="noopener noreferrer">Align partition</a>,
<a href="https://www.diskpart.com/lib/PreOS-mode.html" target="_blank" rel="noopener noreferrer">PreOS Mode</a></li>
<li>If you want to use the Disk Management tool from Windows but failed,
<a href="https://answers.microsoft.com/en-us/windows/forum/all/windows-disk-management-unable-to-shrink-c-drive/217c3521-b254-4662-bac9-bc90dc633fab" target="_blank" rel="noopener noreferrer">this post</a>
might be helpful</li>
</ul>
</li>
<li>Move <code>WinRe</code> partition after the Windows partition<!-- -->
<ul>
<li>This is the recovery partition for Windows to support failover</li>
<li>It is recommended to keep this as a separate partition and put it right
after the Windows partition</li>
<li>Read more on
<a href="https://learn.microsoft.com/en-us/answers/questions/1354739/the-recovery-partition-is-typically-created-at-the" target="_blank" rel="noopener noreferrer">this post</a></li>
<li>So what I had is [Windows | WinRe | Unused space (for Ubuntu later)]</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="configure-bios-in-the-bios-menu">Configure BIOS in the BIOS Menu<a href="https://wiki.ethanppl.com/blog/2024/02/29/dual-boot-guide#configure-bios-in-the-bios-menu" class="hash-link" aria-label="Direct link to Configure BIOS in the BIOS Menu" title="Direct link to Configure BIOS in the BIOS Menu">​</a></h2>
<p>Just to make sure a few things are set in the BIOS menu. Knowing how to get into
the BIOS menu is also helpful in case of bad things happened.</p>
<p>Reboot the computer and enter the BIOS menu before the OS load. Search online
how to do it for your computer. It's usually F2 or F12. For me is pressing Enter
when it says something like "Press Enter to interrupt".</p>
<p>Things to check:</p>
<ul>
<li>Make sure the UEFI BIOS is up-to-date</li>
<li>SATA mode is <code>AHCI</code>, as Ubuntu doesn't support other operations</li>
<li>Secure boot is enabled and CSM is disabled<!-- -->
<ul>
<li>It is required to install Ubuntu with secure boot enabled for secure boot to
work with Ubuntu</li>
<li>CSM is to support non-UEFI OS. It should already be disabled with secure
boot enabled</li>
</ul>
</li>
<li>Boot mode is UEFI only</li>
<li>TPM security has to be enabled for BitLocker in Windows</li>
<li>You can check the Boot order in the BIOS menu as well</li>
</ul>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="configure-ubuntu-partition">Configure Ubuntu Partition<a href="https://wiki.ethanppl.com/blog/2024/02/29/dual-boot-guide#configure-ubuntu-partition" class="hash-link" aria-label="Direct link to Configure Ubuntu Partition" title="Direct link to Configure Ubuntu Partition">​</a></h2>
<p>The important bits start here! From now on, it's better to do all remaining
steps in one go.</p>
<p>This stage is to boot into Ubuntu with the live USB and configure the Ubuntu
partition that is encrypted.</p>
<ol>
<li>
<p>Boot the USB stick and select <code>Try without installing</code> when prompted</p>
</li>
<li>
<p>You should see the default Ubuntu desktop, open a terminal</p>
</li>
<li>
<p>In the terminal, change to root with</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo su</span><br></span></code></pre></div></div>
</li>
<li>
<p>Check the partition table again</p>
<ol>
<li>Check with <code>sgdisk</code>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sgdisk --print /dev/nvme0n1</span><br></span></code></pre></div></div>
</li>
<li>If your disk is not <code>/dev/nvme0n1</code>, then you will have to replace all the
following commands to your disk name, e.g. <code>/dev/sda</code></li>
<li>Look for the disk name (e.g. <code>/dev/sda</code> or <code>/dev/nvme0n1</code>) not the
partition name (e.g. <code>/dev/sda1</code> or <code>/dev/nvme0n1p1</code>)</li>
</ol>
</li>
<li>
<p>Create 2 partitions in the empty space in your disk, one for boot and the
rest for root</p>
<ol>
<li>New 1800M partition for boot<!-- -->
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sgdisk --new=5:0:+1800M /dev/nvme0n1</span><br></span></code></pre></div></div>
</li>
<li>New partition using the rest for root<!-- -->
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sgdisk --new=6:0:0 /dev/nvme0n1</span><br></span></code></pre></div></div>
</li>
<li>Name the partitions<!-- -->
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sgdisk --change-name=5:/boot --change-name=6:rootfs /dev/nvme0n1</span><br></span></code></pre></div></div>
</li>
<li>Choose 8300 as the type code for the file system (Linux filesystem)<!-- -->
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sgdisk --typecode=5:8300 --typecode=6:8300 /dev/nvme0n1</span><br></span></code></pre></div></div>
<!-- -->(you can find all typecode with <code>sgdisk -L</code>)</li>
<li>Make EXT4 file system (notice that here is the partition name)<!-- -->
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mkfs.ext4 -L boot /dev/nvme0n1p5</span><br></span></code></pre></div></div>
</li>
</ol>
</li>
<li>
<p>Encrypt the Linux data partition with LUKS</p>
<ul>
<li>In the following codeblock, I am showing the output as well</li>
<li>Lines after <code>#</code> are what needed to be inputted to the terminal</li>
<li>The passphrase you chose at this step is what you needed to decrypt the
disk when booting</li>
</ul>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># cryptsetup luksFormat --type=luks2 /dev/nvme0n1p6</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">WARNING!</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">========</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">This will overwrite data on /dev/nvme0n1p6 irrevocably.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Are you sure? (Type uppercase yes): YES</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Enter passphrase for /dev/nvme0n1p6:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Verify passphrase:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># cryptsetup open /dev/nvme0n1p6 nvme0n1p6_crypt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Enter passphrase for /dev/nvme0n1p6:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># ls /dev/mapper/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">control nvme0n1p6_crypt</span><br></span></code></pre></div></div>
</li>
<li>
<p>Set up logical volume manager (LVM), with root, swap and home partition</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># pvcreate /dev/mapper/nvme0n1p6_crypt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Physical volume "/dev/mapper/nvme0n1p6_crypt" successfully created.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># vgcreate ubuntu-vg /dev/mapper/nvme0n1p6_crypt</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Volume group "ubuntu-vg" successfully created</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># lvcreate -L 64G -n root ubuntu-vg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Logical volume "root" created.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># lvcreate -L 16G -n swap ubuntu-vg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Logical volume "swap" created.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># lvcreate -l 100%FREE -n home ubuntu-vg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Logical volume "home" created.</span><br></span></code></pre></div></div>
</li>
</ol>
<p>Now all the Ubuntu partitions are prepared. Without exiting the live
environment, use the GUI to continue the installation.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="install-ubuntu">Install Ubuntu<a href="https://wiki.ethanppl.com/blog/2024/02/29/dual-boot-guide#install-ubuntu" class="hash-link" aria-label="Direct link to Install Ubuntu" title="Direct link to Install Ubuntu">​</a></h2>
<p>We will install Ubuntu on the encrypted disk and configure things to make sure
secure boot also works.</p>
<ol>
<li>Run the graphical installer</li>
<li>Connect to your Wi-Fi network</li>
<li>On the software step, for "Other options" (This step is important for secure
boot to work)<!-- -->
<ol>
<li>Check the "Download updates" option</li>
<li>Check the "Install third-party software for graphics and Wi-Fi hardware"</li>
<li>Check the "Configure Secure Boot" option and enter a password, remember
this password. Useful for the MOK management step explained below.</li>
<li>Save and continue</li>
</ol>
</li>
<li>When asked what to do with the disk, pick "Something else", or the option
that allows you to manually assign disk partition<!-- -->
<ol>
<li>Use the ~1800MB partition as <code>ext4</code> with mount point as <code>/boot</code></li>
<li>Use the <code>/dev/mapper/ubuntu-vg-root</code> as <code>ext4</code> FS and mount it to <code>/</code></li>
<li>Use the <code>/dev/mapper/ubuntu-vg-home</code> as <code>ext4</code> FS and mount it to <code>/home</code></li>
<li>Use the <code>/dev/mapper/ubuntu-vg-swap</code> as <code>swap</code></li>
<li>Do the same as above if you have more or less partitions</li>
<li>The bootloader device should be <code>/dev/nvme0n1</code></li>
</ol>
</li>
<li>Proceed with the installation</li>
<li>When finished, select <code>Continue Testing</code>, and it should bring you back to the
Ubuntu Desktop environment</li>
</ol>
<p>Do not leave the live environment just yet.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="set-up-crypttab">Set up <code>crypttab</code><a href="https://wiki.ethanppl.com/blog/2024/02/29/dual-boot-guide#set-up-crypttab" class="hash-link" aria-label="Direct link to set-up-crypttab" title="Direct link to set-up-crypttab">​</a></h2>
<p><code>crypttab</code> is used to decrypt the disk on boot.</p>
<ol>
<li>
<p>Open the terminal and find the UUID of the partition with LUKS</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">sudo blkid /dev/nvme0n1p6</span><br></span></code></pre></div></div>
<p>Example output:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">/dev/nvme0n1p6: UUID="abcdefgh-1234-5678-9012-abcdefghijklm" TYPE="crypto_LUKS"</span><br></span></code></pre></div></div>
<p>I suggest writing the UUID down somewhere</p>
</li>
<li>
<p>Mount the drives and chroot into the mount:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">mount /dev/mapper/ubuntu-vg-root /target</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mount /dev/nvme0n1p5 /target/boot</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">for n in proc sys dev etc/resolv.conf; do mount --rbind /$n /target/$n; done</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">chroot /target</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mount -a</span><br></span></code></pre></div></div>
</li>
<li>
<p>Configure <code>/etc/crypttab</code>:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain"># &lt;target name&gt; &lt;source device&gt; &lt;key file&gt; &lt;options&gt;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># options used:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#     luks    - specifies that this is a LUKS encrypted device</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#     tries=0 - allows to re-enter password unlimited number of times</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#     discard - allows SSD TRIM command, WARNING: potential security risk (more: "man crypttab")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">#     loud    - display all warnings</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nvme0n1p6_crypt UUID=abcdefgh-1234-5678-9012-abcdefghijklm none luks,discard</span><br></span></code></pre></div></div>
</li>
<li>
<p>Apply the changes (still inside chroot)</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">update-initramfs -k all -c</span><br></span></code></pre></div></div>
</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="reboot-and-some-remaining-issues">Reboot and some remaining issues<a href="https://wiki.ethanppl.com/blog/2024/02/29/dual-boot-guide#reboot-and-some-remaining-issues" class="hash-link" aria-label="Direct link to Reboot and some remaining issues" title="Direct link to Reboot and some remaining issues">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="blue-screen-mok-management">Blue screen MOK management<a href="https://wiki.ethanppl.com/blog/2024/02/29/dual-boot-guide#blue-screen-mok-management" class="hash-link" aria-label="Direct link to Blue screen MOK management" title="Direct link to Blue screen MOK management">​</a></h3>
<ol>
<li>When reboot, because of the secure boot, you will see a blue screen and ask
to perform MOK management</li>
<li>Choose Enroll MOK, continue, yes</li>
<li>Input the password that you inputted on the step for software install during
the installation for third party drivers<!-- -->
<ul>
<li>It won't show what you typed, trust that it's there</li>
<li>This is only a one time thing so no worries</li>
<li>Once successful you don't need the password anymore</li>
</ul>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="windows-bitlocker-issue">Windows BitLocker Issue<a href="https://wiki.ethanppl.com/blog/2024/02/29/dual-boot-guide#windows-bitlocker-issue" class="hash-link" aria-label="Direct link to Windows BitLocker Issue" title="Direct link to Windows BitLocker Issue">​</a></h3>
<p>You might need to input the BitLocker recovery key when booting into Windows.
Find your recovery key in where ever you saved (e.g. Microsoft account) and
input it. This is also one time thing, so no worries.</p>
<p>If you have disabled BitLocker before to partition the disk, you will need to
re-enable it and encrypt the Windows partition again.</p>
<p>To encrypt again, you need to make sure you meet the pre-requisites to enable
BitLocker:</p>
<ul>
<li>Check that the partition table is GPT</li>
<li>BIOS is set to UEFI</li>
<li>Secure boot is enabled</li>
</ul>
<p>Go to <code>System information</code> → scroll down and see device encryption support needs
to be <code>meets prerequisites</code>. If not, check the above again and maybe reboot and
see.</p>
<p>Once the prerequisites are met, go to Settings → privacy &amp; security → device
encryption and enable BitLocker.</p>
<p>To check the progress:</p>
<ul>
<li>Open admin command prompt and input <code>manage-bde -status C:</code></li>
<li>If the status stuck, not updating, try <code>manage-bde -pause C:</code> and then
<code>manage-bde -resume C:</code></li>
</ul>
<p>With BitLocker re-enabled, this means both Ubuntu and Windows have full disk
encryption and secure boot enabled!</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="wrong-timezone-after-dual-boot">Wrong timezone after dual boot<a href="https://wiki.ethanppl.com/blog/2024/02/29/dual-boot-guide#wrong-timezone-after-dual-boot" class="hash-link" aria-label="Direct link to Wrong timezone after dual boot" title="Direct link to Wrong timezone after dual boot">​</a></h3>
<p>You might notice one of the OS show the wrong time before resyncing their time.
This is because they store time into the computer hardware clock differently.
Linux assumes that the time on the hardware clock is stored in UTC and Windows
assumes it is local time. One solution is to ask Linux to store the hardware
clock as local time:</p>
<div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">timedatectl set-local-rtc 1</span><br></span></code></pre></div></div>
<p><a href="https://itsfoss.com/wrong-time-dual-boot/" target="_blank" rel="noopener noreferrer">Read more in this guide from It's Foss</a></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="references">References<a href="https://wiki.ethanppl.com/blog/2024/02/29/dual-boot-guide#references" class="hash-link" aria-label="Direct link to References" title="Direct link to References">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="about-full-disk-encryption">About full disk encryption:<a href="https://wiki.ethanppl.com/blog/2024/02/29/dual-boot-guide#about-full-disk-encryption" class="hash-link" aria-label="Direct link to About full disk encryption:" title="Direct link to About full disk encryption:">​</a></h3>
<ul>
<li><a href="https://www.mikekasberg.com/blog/2020/04/08/dual-boot-ubuntu-and-windows-with-encryption.html" target="_blank" rel="noopener noreferrer">How to Dual-Boot Ubuntu 20.04 (or 22.04) and Windows 10 (or 11) with Encryption | Mike Kasberg</a> -
recommend reading</li>
<li><a href="https://gist.github.com/luispabon/db2c9e5f6cc73bb37812a19a40e137bc" target="_blank" rel="noopener noreferrer">Dual boot with encryption nodes | GitHub Gist from @luispabon</a></li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="about-secure-boot">About secure boot:<a href="https://wiki.ethanppl.com/blog/2024/02/29/dual-boot-guide#about-secure-boot" class="hash-link" aria-label="Direct link to About secure boot:" title="Direct link to About secure boot:">​</a></h3>
<ul>
<li><a href="https://www.reddit.com/r/linux4noobs/comments/osotp3/ubuntu_dual_boot_with_windows_10_can_i_enable/" target="_blank" rel="noopener noreferrer">Can I enable secure boot again? | Reddit</a> -
Ans: no</li>
<li><a href="https://youtu.be/GqJBniwj1Mg" target="_blank" rel="noopener noreferrer">A Clean Install of Linux Ubuntu 20.04 (Lenovo UEFI BIOS with Secure Boot and MOK) | YouTube</a> -
worth watching parts about the secure boot and MOK step</li>
<li><a href="https://askubuntu.com/questions/880240/it-is-possible-to-dual-boot-linux-and-windows-10-with-secure-boot-enabled" target="_blank" rel="noopener noreferrer">It is possible to dual boot Linux and Windows 10 with secure boot enabled? | Ask Ubuntu</a> -
Ans: yes</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="about-partition-and-bitlocker">About partition and BitLocker:<a href="https://wiki.ethanppl.com/blog/2024/02/29/dual-boot-guide#about-partition-and-bitlocker" class="hash-link" aria-label="Direct link to About partition and BitLocker:" title="Direct link to About partition and BitLocker:">​</a></h3>
<ul>
<li><a href="https://answers.microsoft.com/en-us/windows/forum/all/windows-disk-management-unable-to-shrink-c-drive/217c3521-b254-4662-bac9-bc90dc633fab" target="_blank" rel="noopener noreferrer">Windows Disk Management unable to shrink C: drive volume</a></li>
<li><a href="https://www.diskpart.com/articles/resize-bitlocker-partition-windows-10-0725.html" target="_blank" rel="noopener noreferrer">How can I resize BitLocker partition in Windows 10/11</a></li>
<li><a href="https://itsfoss.com/dual-boot-ubuntu-windows-bitlocker/" target="_blank" rel="noopener noreferrer">Dual Booting Ubuntu with Windows 10 Pro with BitLocker Encryption</a></li>
</ul>
<p>That's it and I hope you can set up dual boot without issues!</p>]]></content>
        <author>
            <name>Ethan Pang</name>
            <uri>https://ethanppl.com/</uri>
        </author>
        <category label="Dual Boot" term="Dual Boot"/>
        <category label="Ubuntu" term="Ubuntu"/>
        <category label="Computers" term="Computers"/>
    </entry>
</feed>